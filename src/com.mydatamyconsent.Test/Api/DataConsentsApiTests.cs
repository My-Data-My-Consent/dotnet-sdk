/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using com.mydatamyconsent.Client;
using com.mydatamyconsent.Api;
// uncomment below to import models
//using com.mydatamyconsent.Model;

namespace com.mydatamyconsent.Test.Api
{
    /// <summary>
    ///  Class for testing DataConsentsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DataConsentsApiTests : IDisposable
    {
        private DataConsentsApi instance;

        public DataConsentsApiTests()
        {
            instance = new DataConsentsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of DataConsentsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' DataConsentsApi
            //Assert.IsType<DataConsentsApi>(instance);
        }

        /// <summary>
        /// Test V1ConsentsConsentIdAccountsAccountIdGet
        /// </summary>
        [Fact]
        public void V1ConsentsConsentIdAccountsAccountIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string consentId = null;
            //string accountId = null;
            //var response = instance.V1ConsentsConsentIdAccountsAccountIdGet(consentId, accountId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test V1ConsentsConsentIdAccountsAccountIdInsightsGet
        /// </summary>
        [Fact]
        public void V1ConsentsConsentIdAccountsAccountIdInsightsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string consentId = null;
            //string accountId = null;
            //var response = instance.V1ConsentsConsentIdAccountsAccountIdInsightsGet(consentId, accountId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test V1ConsentsConsentIdAccountsAccountIdTransactionsGet
        /// </summary>
        [Fact]
        public void V1ConsentsConsentIdAccountsAccountIdTransactionsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string consentId = null;
            //string accountId = null;
            //string filters = null;
            //DateTime? fromDate = null;
            //DateTime? toDate = null;
            //var response = instance.V1ConsentsConsentIdAccountsAccountIdTransactionsGet(consentId, accountId, filters, fromDate, toDate);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test V1ConsentsConsentIdAccountsGet
        /// </summary>
        [Fact]
        public void V1ConsentsConsentIdAccountsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string consentId = null;
            //var response = instance.V1ConsentsConsentIdAccountsGet(consentId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test V1ConsentsConsentIdDocumentsDocumentIdAnalysisGet
        /// </summary>
        [Fact]
        public void V1ConsentsConsentIdDocumentsDocumentIdAnalysisGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string consentId = null;
            //string documentId = null;
            //var response = instance.V1ConsentsConsentIdDocumentsDocumentIdAnalysisGet(consentId, documentId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test V1ConsentsConsentIdDocumentsDocumentIdDownloadGet
        /// </summary>
        [Fact]
        public void V1ConsentsConsentIdDocumentsDocumentIdDownloadGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string consentId = null;
            //string documentId = null;
            //var response = instance.V1ConsentsConsentIdDocumentsDocumentIdDownloadGet(consentId, documentId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test V1ConsentsConsentIdDocumentsDocumentIdGet
        /// </summary>
        [Fact]
        public void V1ConsentsConsentIdDocumentsDocumentIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string consentId = null;
            //string documentId = null;
            //var response = instance.V1ConsentsConsentIdDocumentsDocumentIdGet(consentId, documentId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test V1ConsentsConsentIdDocumentsGet
        /// </summary>
        [Fact]
        public void V1ConsentsConsentIdDocumentsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string consentId = null;
            //var response = instance.V1ConsentsConsentIdDocumentsGet(consentId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test V1ConsentsConsentIdGet
        /// </summary>
        [Fact]
        public void V1ConsentsConsentIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string consentId = null;
            //var response = instance.V1ConsentsConsentIdGet(consentId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test V1ConsentsGet
        /// </summary>
        [Fact]
        public void V1ConsentsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DataConsentStatus? status = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //var response = instance.V1ConsentsGet(status, startDate, endDate);
            //Assert.IsType<Object>(response);
        }
    }
}
