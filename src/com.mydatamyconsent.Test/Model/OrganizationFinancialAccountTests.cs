/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using com.mydatamyconsent.Api;
using com.mydatamyconsent.Model;
using com.mydatamyconsent.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace com.mydatamyconsent.Test.Model
{
    /// <summary>
    ///  Class for testing OrganizationFinancialAccount
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class OrganizationFinancialAccountTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for OrganizationFinancialAccount
        //private OrganizationFinancialAccount instance;

        public OrganizationFinancialAccountTests()
        {
            // TODO uncomment below to create an instance of OrganizationFinancialAccount
            //instance = new OrganizationFinancialAccount();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of OrganizationFinancialAccount
        /// </summary>
        [Fact]
        public void OrganizationFinancialAccountInstanceTest()
        {
            // TODO uncomment below to test "IsType" OrganizationFinancialAccount
            //Assert.IsType<OrganizationFinancialAccount>(instance);
        }


        /// <summary>
        /// Test the property 'Id'
        /// </summary>
        [Fact]
        public void IdTest()
        {
            // TODO unit test for the property 'Id'
        }
        /// <summary>
        /// Test the property 'OrganizationId'
        /// </summary>
        [Fact]
        public void OrganizationIdTest()
        {
            // TODO unit test for the property 'OrganizationId'
        }
        /// <summary>
        /// Test the property 'BeneficiaryName'
        /// </summary>
        [Fact]
        public void BeneficiaryNameTest()
        {
            // TODO unit test for the property 'BeneficiaryName'
        }
        /// <summary>
        /// Test the property 'AccountNumber'
        /// </summary>
        [Fact]
        public void AccountNumberTest()
        {
            // TODO unit test for the property 'AccountNumber'
        }
        /// <summary>
        /// Test the property 'RoutingNumber'
        /// </summary>
        [Fact]
        public void RoutingNumberTest()
        {
            // TODO unit test for the property 'RoutingNumber'
        }
        /// <summary>
        /// Test the property 'Organization'
        /// </summary>
        [Fact]
        public void OrganizationTest()
        {
            // TODO unit test for the property 'Organization'
        }
        /// <summary>
        /// Test the property 'IsPrimary'
        /// </summary>
        [Fact]
        public void IsPrimaryTest()
        {
            // TODO unit test for the property 'IsPrimary'
        }
        /// <summary>
        /// Test the property 'IsVerified'
        /// </summary>
        [Fact]
        public void IsVerifiedTest()
        {
            // TODO unit test for the property 'IsVerified'
        }
        /// <summary>
        /// Test the property 'LogoUrl'
        /// </summary>
        [Fact]
        public void LogoUrlTest()
        {
            // TODO unit test for the property 'LogoUrl'
        }
        /// <summary>
        /// Test the property 'BankName'
        /// </summary>
        [Fact]
        public void BankNameTest()
        {
            // TODO unit test for the property 'BankName'
        }
        /// <summary>
        /// Test the property 'BankAccountProofUrl'
        /// </summary>
        [Fact]
        public void BankAccountProofUrlTest()
        {
            // TODO unit test for the property 'BankAccountProofUrl'
        }
        /// <summary>
        /// Test the property 'FileType'
        /// </summary>
        [Fact]
        public void FileTypeTest()
        {
            // TODO unit test for the property 'FileType'
        }
        /// <summary>
        /// Test the property 'BankAccountType'
        /// </summary>
        [Fact]
        public void BankAccountTypeTest()
        {
            // TODO unit test for the property 'BankAccountType'
        }

    }

}
