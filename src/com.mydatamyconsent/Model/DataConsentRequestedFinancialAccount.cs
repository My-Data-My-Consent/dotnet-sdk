/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.mydatamyconsent.Client.OpenAPIDateConverter;

namespace com.mydatamyconsent.Model
{
    /// <summary>
    /// DataConsentRequestedFinancialAccount
    /// </summary>
    [DataContract(Name = "DataConsentRequestedFinancialAccount")]
    public partial class DataConsentRequestedFinancialAccount : IEquatable<DataConsentRequestedFinancialAccount>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets AccountType
        /// </summary>
        [DataMember(Name = "accountType", EmitDefaultValue = false)]
        public FinancialAccountTypes? AccountType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DataConsentRequestedFinancialAccount" /> class.
        /// </summary>
        /// <param name="drn">drn.</param>
        /// <param name="fromDatetime">fromDatetime.</param>
        /// <param name="toDatetime">toDatetime.</param>
        /// <param name="providerId">providerId.</param>
        /// <param name="accountType">accountType.</param>
        /// <param name="accountIdentifier">accountIdentifier.</param>
        /// <param name="filters">filters.</param>
        public DataConsentRequestedFinancialAccount(string drn = default(string), DateTime fromDatetime = default(DateTime), DateTime toDatetime = default(DateTime), Guid? providerId = default(Guid?), FinancialAccountTypes? accountType = default(FinancialAccountTypes?), string accountIdentifier = default(string), List<DataConsentRfaFilter> filters = default(List<DataConsentRfaFilter>))
        {
            this.Drn = drn;
            this.FromDatetime = fromDatetime;
            this.ToDatetime = toDatetime;
            this.ProviderId = providerId;
            this.AccountType = accountType;
            this.AccountIdentifier = accountIdentifier;
            this.Filters = filters;
        }

        /// <summary>
        /// Gets or Sets Drn
        /// </summary>
        [DataMember(Name = "drn", EmitDefaultValue = true)]
        public string Drn { get; set; }

        /// <summary>
        /// Gets or Sets FromDatetime
        /// </summary>
        [DataMember(Name = "fromDatetime", EmitDefaultValue = false)]
        public DateTime FromDatetime { get; set; }

        /// <summary>
        /// Gets or Sets ToDatetime
        /// </summary>
        [DataMember(Name = "toDatetime", EmitDefaultValue = false)]
        public DateTime ToDatetime { get; set; }

        /// <summary>
        /// Gets or Sets ProviderId
        /// </summary>
        [DataMember(Name = "providerId", EmitDefaultValue = true)]
        public Guid? ProviderId { get; set; }

        /// <summary>
        /// Gets or Sets AccountIdentifier
        /// </summary>
        [DataMember(Name = "accountIdentifier", EmitDefaultValue = true)]
        public string AccountIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets Filters
        /// </summary>
        [DataMember(Name = "filters", EmitDefaultValue = true)]
        public List<DataConsentRfaFilter> Filters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DataConsentRequestedFinancialAccount {\n");
            sb.Append("  Drn: ").Append(Drn).Append("\n");
            sb.Append("  FromDatetime: ").Append(FromDatetime).Append("\n");
            sb.Append("  ToDatetime: ").Append(ToDatetime).Append("\n");
            sb.Append("  ProviderId: ").Append(ProviderId).Append("\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("  AccountIdentifier: ").Append(AccountIdentifier).Append("\n");
            sb.Append("  Filters: ").Append(Filters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DataConsentRequestedFinancialAccount);
        }

        /// <summary>
        /// Returns true if DataConsentRequestedFinancialAccount instances are equal
        /// </summary>
        /// <param name="input">Instance of DataConsentRequestedFinancialAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataConsentRequestedFinancialAccount input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Drn == input.Drn ||
                    (this.Drn != null &&
                    this.Drn.Equals(input.Drn))
                ) && 
                (
                    this.FromDatetime == input.FromDatetime ||
                    (this.FromDatetime != null &&
                    this.FromDatetime.Equals(input.FromDatetime))
                ) && 
                (
                    this.ToDatetime == input.ToDatetime ||
                    (this.ToDatetime != null &&
                    this.ToDatetime.Equals(input.ToDatetime))
                ) && 
                (
                    this.ProviderId == input.ProviderId ||
                    (this.ProviderId != null &&
                    this.ProviderId.Equals(input.ProviderId))
                ) && 
                (
                    this.AccountType == input.AccountType ||
                    this.AccountType.Equals(input.AccountType)
                ) && 
                (
                    this.AccountIdentifier == input.AccountIdentifier ||
                    (this.AccountIdentifier != null &&
                    this.AccountIdentifier.Equals(input.AccountIdentifier))
                ) && 
                (
                    this.Filters == input.Filters ||
                    this.Filters != null &&
                    input.Filters != null &&
                    this.Filters.SequenceEqual(input.Filters)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Drn != null)
                    hashCode = hashCode * 59 + this.Drn.GetHashCode();
                if (this.FromDatetime != null)
                    hashCode = hashCode * 59 + this.FromDatetime.GetHashCode();
                if (this.ToDatetime != null)
                    hashCode = hashCode * 59 + this.ToDatetime.GetHashCode();
                if (this.ProviderId != null)
                    hashCode = hashCode * 59 + this.ProviderId.GetHashCode();
                hashCode = hashCode * 59 + this.AccountType.GetHashCode();
                if (this.AccountIdentifier != null)
                    hashCode = hashCode * 59 + this.AccountIdentifier.GetHashCode();
                if (this.Filters != null)
                    hashCode = hashCode * 59 + this.Filters.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
