/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.mydatamyconsent.Client.OpenAPIDateConverter;

namespace com.mydatamyconsent.Model
{
    /// <summary>
    /// SuggestedAccountDto
    /// </summary>
    [DataContract(Name = "SuggestedAccountDto")]
    public partial class SuggestedAccountDto : IEquatable<SuggestedAccountDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SuggestedAccountDto" /> class.
        /// </summary>
        /// <param name="issuerId">issuerId.</param>
        /// <param name="accountId">accountId.</param>
        /// <param name="issuerName">issuerName.</param>
        /// <param name="accountLogoUrl">accountLogoUrl.</param>
        /// <param name="accountNumber">accountNumber.</param>
        /// <param name="accountCategory">accountCategory.</param>
        public SuggestedAccountDto(Guid issuerId = default(Guid), Guid accountId = default(Guid), string issuerName = default(string), string accountLogoUrl = default(string), string accountNumber = default(string), string accountCategory = default(string))
        {
            this.IssuerId = issuerId;
            this.AccountId = accountId;
            this.IssuerName = issuerName;
            this.AccountLogoUrl = accountLogoUrl;
            this.AccountNumber = accountNumber;
            this.AccountCategory = accountCategory;
        }

        /// <summary>
        /// Gets or Sets IssuerId
        /// </summary>
        [DataMember(Name = "issuerId", EmitDefaultValue = false)]
        public Guid IssuerId { get; set; }

        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name = "accountId", EmitDefaultValue = false)]
        public Guid AccountId { get; set; }

        /// <summary>
        /// Gets or Sets IssuerName
        /// </summary>
        [DataMember(Name = "issuerName", EmitDefaultValue = true)]
        public string IssuerName { get; set; }

        /// <summary>
        /// Gets or Sets AccountLogoUrl
        /// </summary>
        [DataMember(Name = "accountLogoUrl", EmitDefaultValue = true)]
        public string AccountLogoUrl { get; set; }

        /// <summary>
        /// Gets or Sets AccountNumber
        /// </summary>
        [DataMember(Name = "accountNumber", EmitDefaultValue = true)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets AccountCategory
        /// </summary>
        [DataMember(Name = "accountCategory", EmitDefaultValue = true)]
        public string AccountCategory { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SuggestedAccountDto {\n");
            sb.Append("  IssuerId: ").Append(IssuerId).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  IssuerName: ").Append(IssuerName).Append("\n");
            sb.Append("  AccountLogoUrl: ").Append(AccountLogoUrl).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  AccountCategory: ").Append(AccountCategory).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SuggestedAccountDto);
        }

        /// <summary>
        /// Returns true if SuggestedAccountDto instances are equal
        /// </summary>
        /// <param name="input">Instance of SuggestedAccountDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SuggestedAccountDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IssuerId == input.IssuerId ||
                    (this.IssuerId != null &&
                    this.IssuerId.Equals(input.IssuerId))
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.IssuerName == input.IssuerName ||
                    (this.IssuerName != null &&
                    this.IssuerName.Equals(input.IssuerName))
                ) && 
                (
                    this.AccountLogoUrl == input.AccountLogoUrl ||
                    (this.AccountLogoUrl != null &&
                    this.AccountLogoUrl.Equals(input.AccountLogoUrl))
                ) && 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                ) && 
                (
                    this.AccountCategory == input.AccountCategory ||
                    (this.AccountCategory != null &&
                    this.AccountCategory.Equals(input.AccountCategory))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IssuerId != null)
                    hashCode = hashCode * 59 + this.IssuerId.GetHashCode();
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.IssuerName != null)
                    hashCode = hashCode * 59 + this.IssuerName.GetHashCode();
                if (this.AccountLogoUrl != null)
                    hashCode = hashCode * 59 + this.AccountLogoUrl.GetHashCode();
                if (this.AccountNumber != null)
                    hashCode = hashCode * 59 + this.AccountNumber.GetHashCode();
                if (this.AccountCategory != null)
                    hashCode = hashCode * 59 + this.AccountCategory.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
