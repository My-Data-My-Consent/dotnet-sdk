/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.mydatamyconsent.Client.OpenAPIDateConverter;

namespace com.mydatamyconsent.Model
{
    /// <summary>
    /// OrganizationAddress
    /// </summary>
    [DataContract(Name = "OrganizationAddress")]
    public partial class OrganizationAddress : IEquatable<OrganizationAddress>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public OrganizationAddressType? Type { get; set; }

        /// <summary>
        /// Gets or Sets ProofDocumentType
        /// </summary>
        [DataMember(Name = "proofDocumentType", EmitDefaultValue = false)]
        public ProofDocumentType? ProofDocumentType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationAddress" /> class.
        /// </summary>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="createdAtUtc">createdAtUtc.</param>
        /// <param name="updatedBy">updatedBy.</param>
        /// <param name="updatedAtUtc">updatedAtUtc.</param>
        /// <param name="createdByUser">createdByUser.</param>
        /// <param name="updatedByUser">updatedByUser.</param>
        /// <param name="deletedBy">deletedBy.</param>
        /// <param name="deletedAtUtc">deletedAtUtc.</param>
        /// <param name="deletedByUser">deletedByUser.</param>
        /// <param name="id">id.</param>
        /// <param name="organizationId">organizationId.</param>
        /// <param name="organizationName">organizationName.</param>
        /// <param name="type">type.</param>
        /// <param name="addressLine1">addressLine1.</param>
        /// <param name="addressLine2">addressLine2.</param>
        /// <param name="landMark">landMark.</param>
        /// <param name="countryId">countryId.</param>
        /// <param name="stateId">stateId.</param>
        /// <param name="city">city.</param>
        /// <param name="postCode">postCode.</param>
        /// <param name="proofDocumentType">proofDocumentType.</param>
        /// <param name="proofDocumentUrl">proofDocumentUrl.</param>
        /// <param name="country">country.</param>
        /// <param name="organization">organization.</param>
        /// <param name="countryState">countryState.</param>
        /// <param name="isPrimary">isPrimary.</param>
        /// <param name="isVerified">isVerified.</param>
        public OrganizationAddress(Guid createdBy = default(Guid), DateTime createdAtUtc = default(DateTime), Guid? updatedBy = default(Guid?), DateTime? updatedAtUtc = default(DateTime?), ApplicationUser createdByUser = default(ApplicationUser), ApplicationUser updatedByUser = default(ApplicationUser), Guid? deletedBy = default(Guid?), DateTime? deletedAtUtc = default(DateTime?), ApplicationUser deletedByUser = default(ApplicationUser), Guid id = default(Guid), Guid organizationId = default(Guid), string organizationName = default(string), OrganizationAddressType? type = default(OrganizationAddressType?), string addressLine1 = default(string), string addressLine2 = default(string), string landMark = default(string), Guid countryId = default(Guid), Guid stateId = default(Guid), string city = default(string), string postCode = default(string), ProofDocumentType? proofDocumentType = default(ProofDocumentType?), string proofDocumentUrl = default(string), Country country = default(Country), Organization organization = default(Organization), CountryState countryState = default(CountryState), bool isPrimary = default(bool), bool isVerified = default(bool))
        {
            this.CreatedBy = createdBy;
            this.CreatedAtUtc = createdAtUtc;
            this.UpdatedBy = updatedBy;
            this.UpdatedAtUtc = updatedAtUtc;
            this.CreatedByUser = createdByUser;
            this.UpdatedByUser = updatedByUser;
            this.DeletedBy = deletedBy;
            this.DeletedAtUtc = deletedAtUtc;
            this.DeletedByUser = deletedByUser;
            this.Id = id;
            this.OrganizationId = organizationId;
            this.OrganizationName = organizationName;
            this.Type = type;
            this.AddressLine1 = addressLine1;
            this.AddressLine2 = addressLine2;
            this.LandMark = landMark;
            this.CountryId = countryId;
            this.StateId = stateId;
            this.City = city;
            this.PostCode = postCode;
            this.ProofDocumentType = proofDocumentType;
            this.ProofDocumentUrl = proofDocumentUrl;
            this.Country = country;
            this.Organization = organization;
            this.CountryState = countryState;
            this.IsPrimary = isPrimary;
            this.IsVerified = isVerified;
        }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "createdBy", EmitDefaultValue = false)]
        public Guid CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAtUtc
        /// </summary>
        [DataMember(Name = "createdAtUtc", EmitDefaultValue = false)]
        public DateTime CreatedAtUtc { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedBy
        /// </summary>
        [DataMember(Name = "updatedBy", EmitDefaultValue = true)]
        public Guid? UpdatedBy { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAtUtc
        /// </summary>
        [DataMember(Name = "updatedAtUtc", EmitDefaultValue = true)]
        public DateTime? UpdatedAtUtc { get; set; }

        /// <summary>
        /// Gets or Sets CreatedByUser
        /// </summary>
        [DataMember(Name = "createdByUser", EmitDefaultValue = false)]
        public ApplicationUser CreatedByUser { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedByUser
        /// </summary>
        [DataMember(Name = "updatedByUser", EmitDefaultValue = false)]
        public ApplicationUser UpdatedByUser { get; set; }

        /// <summary>
        /// Gets or Sets DeletedBy
        /// </summary>
        [DataMember(Name = "deletedBy", EmitDefaultValue = true)]
        public Guid? DeletedBy { get; set; }

        /// <summary>
        /// Gets or Sets DeletedAtUtc
        /// </summary>
        [DataMember(Name = "deletedAtUtc", EmitDefaultValue = true)]
        public DateTime? DeletedAtUtc { get; set; }

        /// <summary>
        /// Gets or Sets DeletedByUser
        /// </summary>
        [DataMember(Name = "deletedByUser", EmitDefaultValue = false)]
        public ApplicationUser DeletedByUser { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationId
        /// </summary>
        [DataMember(Name = "organizationId", EmitDefaultValue = false)]
        public Guid OrganizationId { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationName
        /// </summary>
        [DataMember(Name = "organizationName", EmitDefaultValue = true)]
        public string OrganizationName { get; set; }

        /// <summary>
        /// Gets or Sets AddressLine1
        /// </summary>
        [DataMember(Name = "addressLine1", EmitDefaultValue = true)]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// Gets or Sets AddressLine2
        /// </summary>
        [DataMember(Name = "addressLine2", EmitDefaultValue = true)]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// Gets or Sets LandMark
        /// </summary>
        [DataMember(Name = "landMark", EmitDefaultValue = true)]
        public string LandMark { get; set; }

        /// <summary>
        /// Gets or Sets CountryId
        /// </summary>
        [DataMember(Name = "countryId", EmitDefaultValue = false)]
        public Guid CountryId { get; set; }

        /// <summary>
        /// Gets or Sets StateId
        /// </summary>
        [DataMember(Name = "stateId", EmitDefaultValue = false)]
        public Guid StateId { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name = "city", EmitDefaultValue = true)]
        public string City { get; set; }

        /// <summary>
        /// Gets or Sets PostCode
        /// </summary>
        [DataMember(Name = "postCode", EmitDefaultValue = true)]
        public string PostCode { get; set; }

        /// <summary>
        /// Gets or Sets ProofDocumentUrl
        /// </summary>
        [DataMember(Name = "proofDocumentUrl", EmitDefaultValue = true)]
        public string ProofDocumentUrl { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public Country Country { get; set; }

        /// <summary>
        /// Gets or Sets Organization
        /// </summary>
        [DataMember(Name = "organization", EmitDefaultValue = false)]
        public Organization Organization { get; set; }

        /// <summary>
        /// Gets or Sets CountryState
        /// </summary>
        [DataMember(Name = "countryState", EmitDefaultValue = false)]
        public CountryState CountryState { get; set; }

        /// <summary>
        /// Gets or Sets IsPrimary
        /// </summary>
        [DataMember(Name = "isPrimary", EmitDefaultValue = true)]
        public bool IsPrimary { get; set; }

        /// <summary>
        /// Gets or Sets IsVerified
        /// </summary>
        [DataMember(Name = "isVerified", EmitDefaultValue = true)]
        public bool IsVerified { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrganizationAddress {\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedAtUtc: ").Append(CreatedAtUtc).Append("\n");
            sb.Append("  UpdatedBy: ").Append(UpdatedBy).Append("\n");
            sb.Append("  UpdatedAtUtc: ").Append(UpdatedAtUtc).Append("\n");
            sb.Append("  CreatedByUser: ").Append(CreatedByUser).Append("\n");
            sb.Append("  UpdatedByUser: ").Append(UpdatedByUser).Append("\n");
            sb.Append("  DeletedBy: ").Append(DeletedBy).Append("\n");
            sb.Append("  DeletedAtUtc: ").Append(DeletedAtUtc).Append("\n");
            sb.Append("  DeletedByUser: ").Append(DeletedByUser).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  OrganizationName: ").Append(OrganizationName).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  LandMark: ").Append(LandMark).Append("\n");
            sb.Append("  CountryId: ").Append(CountryId).Append("\n");
            sb.Append("  StateId: ").Append(StateId).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  PostCode: ").Append(PostCode).Append("\n");
            sb.Append("  ProofDocumentType: ").Append(ProofDocumentType).Append("\n");
            sb.Append("  ProofDocumentUrl: ").Append(ProofDocumentUrl).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Organization: ").Append(Organization).Append("\n");
            sb.Append("  CountryState: ").Append(CountryState).Append("\n");
            sb.Append("  IsPrimary: ").Append(IsPrimary).Append("\n");
            sb.Append("  IsVerified: ").Append(IsVerified).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrganizationAddress);
        }

        /// <summary>
        /// Returns true if OrganizationAddress instances are equal
        /// </summary>
        /// <param name="input">Instance of OrganizationAddress to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrganizationAddress input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.CreatedAtUtc == input.CreatedAtUtc ||
                    (this.CreatedAtUtc != null &&
                    this.CreatedAtUtc.Equals(input.CreatedAtUtc))
                ) && 
                (
                    this.UpdatedBy == input.UpdatedBy ||
                    (this.UpdatedBy != null &&
                    this.UpdatedBy.Equals(input.UpdatedBy))
                ) && 
                (
                    this.UpdatedAtUtc == input.UpdatedAtUtc ||
                    (this.UpdatedAtUtc != null &&
                    this.UpdatedAtUtc.Equals(input.UpdatedAtUtc))
                ) && 
                (
                    this.CreatedByUser == input.CreatedByUser ||
                    (this.CreatedByUser != null &&
                    this.CreatedByUser.Equals(input.CreatedByUser))
                ) && 
                (
                    this.UpdatedByUser == input.UpdatedByUser ||
                    (this.UpdatedByUser != null &&
                    this.UpdatedByUser.Equals(input.UpdatedByUser))
                ) && 
                (
                    this.DeletedBy == input.DeletedBy ||
                    (this.DeletedBy != null &&
                    this.DeletedBy.Equals(input.DeletedBy))
                ) && 
                (
                    this.DeletedAtUtc == input.DeletedAtUtc ||
                    (this.DeletedAtUtc != null &&
                    this.DeletedAtUtc.Equals(input.DeletedAtUtc))
                ) && 
                (
                    this.DeletedByUser == input.DeletedByUser ||
                    (this.DeletedByUser != null &&
                    this.DeletedByUser.Equals(input.DeletedByUser))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.OrganizationId == input.OrganizationId ||
                    (this.OrganizationId != null &&
                    this.OrganizationId.Equals(input.OrganizationId))
                ) && 
                (
                    this.OrganizationName == input.OrganizationName ||
                    (this.OrganizationName != null &&
                    this.OrganizationName.Equals(input.OrganizationName))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.AddressLine1 == input.AddressLine1 ||
                    (this.AddressLine1 != null &&
                    this.AddressLine1.Equals(input.AddressLine1))
                ) && 
                (
                    this.AddressLine2 == input.AddressLine2 ||
                    (this.AddressLine2 != null &&
                    this.AddressLine2.Equals(input.AddressLine2))
                ) && 
                (
                    this.LandMark == input.LandMark ||
                    (this.LandMark != null &&
                    this.LandMark.Equals(input.LandMark))
                ) && 
                (
                    this.CountryId == input.CountryId ||
                    (this.CountryId != null &&
                    this.CountryId.Equals(input.CountryId))
                ) && 
                (
                    this.StateId == input.StateId ||
                    (this.StateId != null &&
                    this.StateId.Equals(input.StateId))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.PostCode == input.PostCode ||
                    (this.PostCode != null &&
                    this.PostCode.Equals(input.PostCode))
                ) && 
                (
                    this.ProofDocumentType == input.ProofDocumentType ||
                    this.ProofDocumentType.Equals(input.ProofDocumentType)
                ) && 
                (
                    this.ProofDocumentUrl == input.ProofDocumentUrl ||
                    (this.ProofDocumentUrl != null &&
                    this.ProofDocumentUrl.Equals(input.ProofDocumentUrl))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.Organization == input.Organization ||
                    (this.Organization != null &&
                    this.Organization.Equals(input.Organization))
                ) && 
                (
                    this.CountryState == input.CountryState ||
                    (this.CountryState != null &&
                    this.CountryState.Equals(input.CountryState))
                ) && 
                (
                    this.IsPrimary == input.IsPrimary ||
                    this.IsPrimary.Equals(input.IsPrimary)
                ) && 
                (
                    this.IsVerified == input.IsVerified ||
                    this.IsVerified.Equals(input.IsVerified)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.CreatedAtUtc != null)
                    hashCode = hashCode * 59 + this.CreatedAtUtc.GetHashCode();
                if (this.UpdatedBy != null)
                    hashCode = hashCode * 59 + this.UpdatedBy.GetHashCode();
                if (this.UpdatedAtUtc != null)
                    hashCode = hashCode * 59 + this.UpdatedAtUtc.GetHashCode();
                if (this.CreatedByUser != null)
                    hashCode = hashCode * 59 + this.CreatedByUser.GetHashCode();
                if (this.UpdatedByUser != null)
                    hashCode = hashCode * 59 + this.UpdatedByUser.GetHashCode();
                if (this.DeletedBy != null)
                    hashCode = hashCode * 59 + this.DeletedBy.GetHashCode();
                if (this.DeletedAtUtc != null)
                    hashCode = hashCode * 59 + this.DeletedAtUtc.GetHashCode();
                if (this.DeletedByUser != null)
                    hashCode = hashCode * 59 + this.DeletedByUser.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.OrganizationId != null)
                    hashCode = hashCode * 59 + this.OrganizationId.GetHashCode();
                if (this.OrganizationName != null)
                    hashCode = hashCode * 59 + this.OrganizationName.GetHashCode();
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.AddressLine1 != null)
                    hashCode = hashCode * 59 + this.AddressLine1.GetHashCode();
                if (this.AddressLine2 != null)
                    hashCode = hashCode * 59 + this.AddressLine2.GetHashCode();
                if (this.LandMark != null)
                    hashCode = hashCode * 59 + this.LandMark.GetHashCode();
                if (this.CountryId != null)
                    hashCode = hashCode * 59 + this.CountryId.GetHashCode();
                if (this.StateId != null)
                    hashCode = hashCode * 59 + this.StateId.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.PostCode != null)
                    hashCode = hashCode * 59 + this.PostCode.GetHashCode();
                hashCode = hashCode * 59 + this.ProofDocumentType.GetHashCode();
                if (this.ProofDocumentUrl != null)
                    hashCode = hashCode * 59 + this.ProofDocumentUrl.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.Organization != null)
                    hashCode = hashCode * 59 + this.Organization.GetHashCode();
                if (this.CountryState != null)
                    hashCode = hashCode * 59 + this.CountryState.GetHashCode();
                hashCode = hashCode * 59 + this.IsPrimary.GetHashCode();
                hashCode = hashCode * 59 + this.IsVerified.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
