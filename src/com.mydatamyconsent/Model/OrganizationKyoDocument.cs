/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.mydatamyconsent.Client.OpenAPIDateConverter;

namespace com.mydatamyconsent.Model
{
    /// <summary>
    /// OrganizationKyoDocument
    /// </summary>
    [DataContract(Name = "OrganizationKyoDocument")]
    public partial class OrganizationKyoDocument : IEquatable<OrganizationKyoDocument>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationKyoDocument" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="organizationId">organizationId.</param>
        /// <param name="documentName">documentName.</param>
        /// <param name="storageUrl">storageUrl.</param>
        /// <param name="uploadedAtUtc">uploadedAtUtc.</param>
        /// <param name="verifiedBy">verifiedBy.</param>
        /// <param name="verifiedAtUtc">verifiedAtUtc.</param>
        /// <param name="deletedBy">deletedBy.</param>
        /// <param name="deletedAtUtc">deletedAtUtc.</param>
        /// <param name="organization">organization.</param>
        /// <param name="verifiedByUser">verifiedByUser.</param>
        /// <param name="deletedByUser">deletedByUser.</param>
        /// <param name="rejection">rejection.</param>
        public OrganizationKyoDocument(Guid id = default(Guid), Guid organizationId = default(Guid), string documentName = default(string), string storageUrl = default(string), DateTime uploadedAtUtc = default(DateTime), Guid? verifiedBy = default(Guid?), DateTime? verifiedAtUtc = default(DateTime?), Guid? deletedBy = default(Guid?), DateTime? deletedAtUtc = default(DateTime?), Organization organization = default(Organization), ApplicationUser verifiedByUser = default(ApplicationUser), ApplicationUser deletedByUser = default(ApplicationUser), Rejection rejection = default(Rejection))
        {
            this.Id = id;
            this.OrganizationId = organizationId;
            this.DocumentName = documentName;
            this.StorageUrl = storageUrl;
            this.UploadedAtUtc = uploadedAtUtc;
            this.VerifiedBy = verifiedBy;
            this.VerifiedAtUtc = verifiedAtUtc;
            this.DeletedBy = deletedBy;
            this.DeletedAtUtc = deletedAtUtc;
            this.Organization = organization;
            this.VerifiedByUser = verifiedByUser;
            this.DeletedByUser = deletedByUser;
            this.Rejection = rejection;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationId
        /// </summary>
        [DataMember(Name = "organizationId", EmitDefaultValue = false)]
        public Guid OrganizationId { get; set; }

        /// <summary>
        /// Gets or Sets DocumentName
        /// </summary>
        [DataMember(Name = "documentName", EmitDefaultValue = true)]
        public string DocumentName { get; set; }

        /// <summary>
        /// Gets or Sets StorageUrl
        /// </summary>
        [DataMember(Name = "storageUrl", EmitDefaultValue = true)]
        public string StorageUrl { get; set; }

        /// <summary>
        /// Gets or Sets UploadedAtUtc
        /// </summary>
        [DataMember(Name = "uploadedAtUtc", EmitDefaultValue = false)]
        public DateTime UploadedAtUtc { get; set; }

        /// <summary>
        /// Gets or Sets VerifiedBy
        /// </summary>
        [DataMember(Name = "verifiedBy", EmitDefaultValue = true)]
        public Guid? VerifiedBy { get; set; }

        /// <summary>
        /// Gets or Sets VerifiedAtUtc
        /// </summary>
        [DataMember(Name = "verifiedAtUtc", EmitDefaultValue = true)]
        public DateTime? VerifiedAtUtc { get; set; }

        /// <summary>
        /// Gets or Sets DeletedBy
        /// </summary>
        [DataMember(Name = "deletedBy", EmitDefaultValue = true)]
        public Guid? DeletedBy { get; set; }

        /// <summary>
        /// Gets or Sets DeletedAtUtc
        /// </summary>
        [DataMember(Name = "deletedAtUtc", EmitDefaultValue = true)]
        public DateTime? DeletedAtUtc { get; set; }

        /// <summary>
        /// Gets or Sets Organization
        /// </summary>
        [DataMember(Name = "organization", EmitDefaultValue = false)]
        public Organization Organization { get; set; }

        /// <summary>
        /// Gets or Sets VerifiedByUser
        /// </summary>
        [DataMember(Name = "verifiedByUser", EmitDefaultValue = false)]
        public ApplicationUser VerifiedByUser { get; set; }

        /// <summary>
        /// Gets or Sets DeletedByUser
        /// </summary>
        [DataMember(Name = "deletedByUser", EmitDefaultValue = false)]
        public ApplicationUser DeletedByUser { get; set; }

        /// <summary>
        /// Gets or Sets Rejection
        /// </summary>
        [DataMember(Name = "rejection", EmitDefaultValue = false)]
        public Rejection Rejection { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrganizationKyoDocument {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  DocumentName: ").Append(DocumentName).Append("\n");
            sb.Append("  StorageUrl: ").Append(StorageUrl).Append("\n");
            sb.Append("  UploadedAtUtc: ").Append(UploadedAtUtc).Append("\n");
            sb.Append("  VerifiedBy: ").Append(VerifiedBy).Append("\n");
            sb.Append("  VerifiedAtUtc: ").Append(VerifiedAtUtc).Append("\n");
            sb.Append("  DeletedBy: ").Append(DeletedBy).Append("\n");
            sb.Append("  DeletedAtUtc: ").Append(DeletedAtUtc).Append("\n");
            sb.Append("  Organization: ").Append(Organization).Append("\n");
            sb.Append("  VerifiedByUser: ").Append(VerifiedByUser).Append("\n");
            sb.Append("  DeletedByUser: ").Append(DeletedByUser).Append("\n");
            sb.Append("  Rejection: ").Append(Rejection).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrganizationKyoDocument);
        }

        /// <summary>
        /// Returns true if OrganizationKyoDocument instances are equal
        /// </summary>
        /// <param name="input">Instance of OrganizationKyoDocument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrganizationKyoDocument input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.OrganizationId == input.OrganizationId ||
                    (this.OrganizationId != null &&
                    this.OrganizationId.Equals(input.OrganizationId))
                ) && 
                (
                    this.DocumentName == input.DocumentName ||
                    (this.DocumentName != null &&
                    this.DocumentName.Equals(input.DocumentName))
                ) && 
                (
                    this.StorageUrl == input.StorageUrl ||
                    (this.StorageUrl != null &&
                    this.StorageUrl.Equals(input.StorageUrl))
                ) && 
                (
                    this.UploadedAtUtc == input.UploadedAtUtc ||
                    (this.UploadedAtUtc != null &&
                    this.UploadedAtUtc.Equals(input.UploadedAtUtc))
                ) && 
                (
                    this.VerifiedBy == input.VerifiedBy ||
                    (this.VerifiedBy != null &&
                    this.VerifiedBy.Equals(input.VerifiedBy))
                ) && 
                (
                    this.VerifiedAtUtc == input.VerifiedAtUtc ||
                    (this.VerifiedAtUtc != null &&
                    this.VerifiedAtUtc.Equals(input.VerifiedAtUtc))
                ) && 
                (
                    this.DeletedBy == input.DeletedBy ||
                    (this.DeletedBy != null &&
                    this.DeletedBy.Equals(input.DeletedBy))
                ) && 
                (
                    this.DeletedAtUtc == input.DeletedAtUtc ||
                    (this.DeletedAtUtc != null &&
                    this.DeletedAtUtc.Equals(input.DeletedAtUtc))
                ) && 
                (
                    this.Organization == input.Organization ||
                    (this.Organization != null &&
                    this.Organization.Equals(input.Organization))
                ) && 
                (
                    this.VerifiedByUser == input.VerifiedByUser ||
                    (this.VerifiedByUser != null &&
                    this.VerifiedByUser.Equals(input.VerifiedByUser))
                ) && 
                (
                    this.DeletedByUser == input.DeletedByUser ||
                    (this.DeletedByUser != null &&
                    this.DeletedByUser.Equals(input.DeletedByUser))
                ) && 
                (
                    this.Rejection == input.Rejection ||
                    (this.Rejection != null &&
                    this.Rejection.Equals(input.Rejection))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.OrganizationId != null)
                    hashCode = hashCode * 59 + this.OrganizationId.GetHashCode();
                if (this.DocumentName != null)
                    hashCode = hashCode * 59 + this.DocumentName.GetHashCode();
                if (this.StorageUrl != null)
                    hashCode = hashCode * 59 + this.StorageUrl.GetHashCode();
                if (this.UploadedAtUtc != null)
                    hashCode = hashCode * 59 + this.UploadedAtUtc.GetHashCode();
                if (this.VerifiedBy != null)
                    hashCode = hashCode * 59 + this.VerifiedBy.GetHashCode();
                if (this.VerifiedAtUtc != null)
                    hashCode = hashCode * 59 + this.VerifiedAtUtc.GetHashCode();
                if (this.DeletedBy != null)
                    hashCode = hashCode * 59 + this.DeletedBy.GetHashCode();
                if (this.DeletedAtUtc != null)
                    hashCode = hashCode * 59 + this.DeletedAtUtc.GetHashCode();
                if (this.Organization != null)
                    hashCode = hashCode * 59 + this.Organization.GetHashCode();
                if (this.VerifiedByUser != null)
                    hashCode = hashCode * 59 + this.VerifiedByUser.GetHashCode();
                if (this.DeletedByUser != null)
                    hashCode = hashCode * 59 + this.DeletedByUser.GetHashCode();
                if (this.Rejection != null)
                    hashCode = hashCode * 59 + this.Rejection.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
