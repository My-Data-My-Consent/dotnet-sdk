/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.mydatamyconsent.Client.OpenAPIDateConverter;

namespace com.mydatamyconsent.Model
{
    /// <summary>
    /// RefreshToken
    /// </summary>
    [DataContract(Name = "RefreshToken")]
    public partial class RefreshToken : IEquatable<RefreshToken>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RefreshToken" /> class.
        /// </summary>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="createdAtUtc">createdAtUtc.</param>
        /// <param name="updatedBy">updatedBy.</param>
        /// <param name="updatedAtUtc">updatedAtUtc.</param>
        /// <param name="createdByUser">createdByUser.</param>
        /// <param name="updatedByUser">updatedByUser.</param>
        /// <param name="deletedBy">deletedBy.</param>
        /// <param name="deletedAtUtc">deletedAtUtc.</param>
        /// <param name="deletedByUser">deletedByUser.</param>
        /// <param name="id">id.</param>
        /// <param name="installationId">installationId.</param>
        /// <param name="token">token.</param>
        /// <param name="accessToken">accessToken.</param>
        /// <param name="accessTokenExpires">accessTokenExpires.</param>
        /// <param name="expires">expires.</param>
        /// <param name="created">created.</param>
        /// <param name="revoked">revoked.</param>
        /// <param name="userId">userId.</param>
        /// <param name="user">user.</param>
        public RefreshToken(Guid createdBy = default(Guid), DateTime createdAtUtc = default(DateTime), Guid? updatedBy = default(Guid?), DateTime? updatedAtUtc = default(DateTime?), ApplicationUser createdByUser = default(ApplicationUser), ApplicationUser updatedByUser = default(ApplicationUser), Guid? deletedBy = default(Guid?), DateTime? deletedAtUtc = default(DateTime?), ApplicationUser deletedByUser = default(ApplicationUser), Guid id = default(Guid), string installationId = default(string), string token = default(string), string accessToken = default(string), DateTime accessTokenExpires = default(DateTime), DateTime expires = default(DateTime), DateTime created = default(DateTime), DateTime? revoked = default(DateTime?), Guid userId = default(Guid), ApplicationUser user = default(ApplicationUser))
        {
            this.CreatedBy = createdBy;
            this.CreatedAtUtc = createdAtUtc;
            this.UpdatedBy = updatedBy;
            this.UpdatedAtUtc = updatedAtUtc;
            this.CreatedByUser = createdByUser;
            this.UpdatedByUser = updatedByUser;
            this.DeletedBy = deletedBy;
            this.DeletedAtUtc = deletedAtUtc;
            this.DeletedByUser = deletedByUser;
            this.Id = id;
            this.InstallationId = installationId;
            this.Token = token;
            this.AccessToken = accessToken;
            this.AccessTokenExpires = accessTokenExpires;
            this.Expires = expires;
            this.Created = created;
            this.Revoked = revoked;
            this.UserId = userId;
            this.User = user;
        }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "createdBy", EmitDefaultValue = false)]
        public Guid CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAtUtc
        /// </summary>
        [DataMember(Name = "createdAtUtc", EmitDefaultValue = false)]
        public DateTime CreatedAtUtc { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedBy
        /// </summary>
        [DataMember(Name = "updatedBy", EmitDefaultValue = true)]
        public Guid? UpdatedBy { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAtUtc
        /// </summary>
        [DataMember(Name = "updatedAtUtc", EmitDefaultValue = true)]
        public DateTime? UpdatedAtUtc { get; set; }

        /// <summary>
        /// Gets or Sets CreatedByUser
        /// </summary>
        [DataMember(Name = "createdByUser", EmitDefaultValue = false)]
        public ApplicationUser CreatedByUser { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedByUser
        /// </summary>
        [DataMember(Name = "updatedByUser", EmitDefaultValue = false)]
        public ApplicationUser UpdatedByUser { get; set; }

        /// <summary>
        /// Gets or Sets DeletedBy
        /// </summary>
        [DataMember(Name = "deletedBy", EmitDefaultValue = true)]
        public Guid? DeletedBy { get; set; }

        /// <summary>
        /// Gets or Sets DeletedAtUtc
        /// </summary>
        [DataMember(Name = "deletedAtUtc", EmitDefaultValue = true)]
        public DateTime? DeletedAtUtc { get; set; }

        /// <summary>
        /// Gets or Sets DeletedByUser
        /// </summary>
        [DataMember(Name = "deletedByUser", EmitDefaultValue = false)]
        public ApplicationUser DeletedByUser { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets InstallationId
        /// </summary>
        [DataMember(Name = "installationId", EmitDefaultValue = true)]
        public string InstallationId { get; set; }

        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name = "token", EmitDefaultValue = true)]
        public string Token { get; set; }

        /// <summary>
        /// Gets or Sets AccessToken
        /// </summary>
        [DataMember(Name = "accessToken", EmitDefaultValue = true)]
        public string AccessToken { get; set; }

        /// <summary>
        /// Gets or Sets AccessTokenExpires
        /// </summary>
        [DataMember(Name = "accessTokenExpires", EmitDefaultValue = false)]
        public DateTime AccessTokenExpires { get; set; }

        /// <summary>
        /// Gets or Sets Expires
        /// </summary>
        [DataMember(Name = "expires", EmitDefaultValue = false)]
        public DateTime Expires { get; set; }

        /// <summary>
        /// Gets or Sets IsExpired
        /// </summary>
        [DataMember(Name = "isExpired", EmitDefaultValue = true)]
        public bool IsExpired { get; private set; }

        /// <summary>
        /// Returns false as IsExpired should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsExpired()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// Gets or Sets Revoked
        /// </summary>
        [DataMember(Name = "revoked", EmitDefaultValue = true)]
        public DateTime? Revoked { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name = "isActive", EmitDefaultValue = true)]
        public bool IsActive { get; private set; }

        /// <summary>
        /// Returns false as IsActive should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsActive()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name = "userId", EmitDefaultValue = false)]
        public Guid UserId { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "user", EmitDefaultValue = false)]
        public ApplicationUser User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RefreshToken {\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedAtUtc: ").Append(CreatedAtUtc).Append("\n");
            sb.Append("  UpdatedBy: ").Append(UpdatedBy).Append("\n");
            sb.Append("  UpdatedAtUtc: ").Append(UpdatedAtUtc).Append("\n");
            sb.Append("  CreatedByUser: ").Append(CreatedByUser).Append("\n");
            sb.Append("  UpdatedByUser: ").Append(UpdatedByUser).Append("\n");
            sb.Append("  DeletedBy: ").Append(DeletedBy).Append("\n");
            sb.Append("  DeletedAtUtc: ").Append(DeletedAtUtc).Append("\n");
            sb.Append("  DeletedByUser: ").Append(DeletedByUser).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InstallationId: ").Append(InstallationId).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  AccessToken: ").Append(AccessToken).Append("\n");
            sb.Append("  AccessTokenExpires: ").Append(AccessTokenExpires).Append("\n");
            sb.Append("  Expires: ").Append(Expires).Append("\n");
            sb.Append("  IsExpired: ").Append(IsExpired).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Revoked: ").Append(Revoked).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RefreshToken);
        }

        /// <summary>
        /// Returns true if RefreshToken instances are equal
        /// </summary>
        /// <param name="input">Instance of RefreshToken to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RefreshToken input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.CreatedAtUtc == input.CreatedAtUtc ||
                    (this.CreatedAtUtc != null &&
                    this.CreatedAtUtc.Equals(input.CreatedAtUtc))
                ) && 
                (
                    this.UpdatedBy == input.UpdatedBy ||
                    (this.UpdatedBy != null &&
                    this.UpdatedBy.Equals(input.UpdatedBy))
                ) && 
                (
                    this.UpdatedAtUtc == input.UpdatedAtUtc ||
                    (this.UpdatedAtUtc != null &&
                    this.UpdatedAtUtc.Equals(input.UpdatedAtUtc))
                ) && 
                (
                    this.CreatedByUser == input.CreatedByUser ||
                    (this.CreatedByUser != null &&
                    this.CreatedByUser.Equals(input.CreatedByUser))
                ) && 
                (
                    this.UpdatedByUser == input.UpdatedByUser ||
                    (this.UpdatedByUser != null &&
                    this.UpdatedByUser.Equals(input.UpdatedByUser))
                ) && 
                (
                    this.DeletedBy == input.DeletedBy ||
                    (this.DeletedBy != null &&
                    this.DeletedBy.Equals(input.DeletedBy))
                ) && 
                (
                    this.DeletedAtUtc == input.DeletedAtUtc ||
                    (this.DeletedAtUtc != null &&
                    this.DeletedAtUtc.Equals(input.DeletedAtUtc))
                ) && 
                (
                    this.DeletedByUser == input.DeletedByUser ||
                    (this.DeletedByUser != null &&
                    this.DeletedByUser.Equals(input.DeletedByUser))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.InstallationId == input.InstallationId ||
                    (this.InstallationId != null &&
                    this.InstallationId.Equals(input.InstallationId))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.AccessToken == input.AccessToken ||
                    (this.AccessToken != null &&
                    this.AccessToken.Equals(input.AccessToken))
                ) && 
                (
                    this.AccessTokenExpires == input.AccessTokenExpires ||
                    (this.AccessTokenExpires != null &&
                    this.AccessTokenExpires.Equals(input.AccessTokenExpires))
                ) && 
                (
                    this.Expires == input.Expires ||
                    (this.Expires != null &&
                    this.Expires.Equals(input.Expires))
                ) && 
                (
                    this.IsExpired == input.IsExpired ||
                    this.IsExpired.Equals(input.IsExpired)
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Revoked == input.Revoked ||
                    (this.Revoked != null &&
                    this.Revoked.Equals(input.Revoked))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    this.IsActive.Equals(input.IsActive)
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.CreatedAtUtc != null)
                    hashCode = hashCode * 59 + this.CreatedAtUtc.GetHashCode();
                if (this.UpdatedBy != null)
                    hashCode = hashCode * 59 + this.UpdatedBy.GetHashCode();
                if (this.UpdatedAtUtc != null)
                    hashCode = hashCode * 59 + this.UpdatedAtUtc.GetHashCode();
                if (this.CreatedByUser != null)
                    hashCode = hashCode * 59 + this.CreatedByUser.GetHashCode();
                if (this.UpdatedByUser != null)
                    hashCode = hashCode * 59 + this.UpdatedByUser.GetHashCode();
                if (this.DeletedBy != null)
                    hashCode = hashCode * 59 + this.DeletedBy.GetHashCode();
                if (this.DeletedAtUtc != null)
                    hashCode = hashCode * 59 + this.DeletedAtUtc.GetHashCode();
                if (this.DeletedByUser != null)
                    hashCode = hashCode * 59 + this.DeletedByUser.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.InstallationId != null)
                    hashCode = hashCode * 59 + this.InstallationId.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.AccessToken != null)
                    hashCode = hashCode * 59 + this.AccessToken.GetHashCode();
                if (this.AccessTokenExpires != null)
                    hashCode = hashCode * 59 + this.AccessTokenExpires.GetHashCode();
                if (this.Expires != null)
                    hashCode = hashCode * 59 + this.Expires.GetHashCode();
                hashCode = hashCode * 59 + this.IsExpired.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.Revoked != null)
                    hashCode = hashCode * 59 + this.Revoked.GetHashCode();
                hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
