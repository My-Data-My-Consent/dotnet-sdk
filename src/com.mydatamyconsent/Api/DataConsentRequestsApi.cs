/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using com.mydatamyconsent.Client;
using com.mydatamyconsent.Model;

namespace com.mydatamyconsent.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataConsentRequestsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel a Consent Request by ID.
        /// </summary>
        /// <remarks>
        /// .
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">consent request id.</param>
        /// <returns></returns>
        void CancelConsentRequest(Guid requestId);

        /// <summary>
        /// Cancel a Consent Request by ID.
        /// </summary>
        /// <remarks>
        /// .
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">consent request id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CancelConsentRequestWithHttpInfo(Guid requestId);
        /// <summary>
        /// Create a consent request.
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataConsentRequestModel">MyDataMyConsent.Models.Consents.DataConsentRequestModel. (optional)</param>
        /// <returns>DataConsent</returns>
        DataConsent CreateRequest(DataConsentRequestModel dataConsentRequestModel = default(DataConsentRequestModel));

        /// <summary>
        /// Create a consent request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataConsentRequestModel">MyDataMyConsent.Models.Consents.DataConsentRequestModel. (optional)</param>
        /// <returns>ApiResponse of DataConsent</returns>
        ApiResponse<DataConsent> CreateRequestWithHttpInfo(DataConsentRequestModel dataConsentRequestModel = default(DataConsentRequestModel));
        /// <summary>
        /// Get all Consent Requests.
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status"> (optional)</param>
        /// <returns>Object</returns>
        Object GetAllConsentRequests(DataConsentStatus? status = default(DataConsentStatus?));

        /// <summary>
        /// Get all Consent Requests.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetAllConsentRequestsWithHttpInfo(DataConsentStatus? status = default(DataConsentStatus?));
        /// <summary>
        /// Get a Consent Request by ID.
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId"></param>
        /// <returns>DataConsentDetailsDto</returns>
        DataConsentDetailsDto GetConsentRequestById(Guid requestId);

        /// <summary>
        /// Get a Consent Request by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId"></param>
        /// <returns>ApiResponse of DataConsentDetailsDto</returns>
        ApiResponse<DataConsentDetailsDto> GetConsentRequestByIdWithHttpInfo(Guid requestId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataConsentRequestsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Cancel a Consent Request by ID.
        /// </summary>
        /// <remarks>
        /// .
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">consent request id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CancelConsentRequestAsync(Guid requestId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel a Consent Request by ID.
        /// </summary>
        /// <remarks>
        /// .
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">consent request id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelConsentRequestWithHttpInfoAsync(Guid requestId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a consent request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataConsentRequestModel">MyDataMyConsent.Models.Consents.DataConsentRequestModel. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataConsent</returns>
        System.Threading.Tasks.Task<DataConsent> CreateRequestAsync(DataConsentRequestModel dataConsentRequestModel = default(DataConsentRequestModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a consent request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataConsentRequestModel">MyDataMyConsent.Models.Consents.DataConsentRequestModel. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataConsent)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataConsent>> CreateRequestWithHttpInfoAsync(DataConsentRequestModel dataConsentRequestModel = default(DataConsentRequestModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all Consent Requests.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetAllConsentRequestsAsync(DataConsentStatus? status = default(DataConsentStatus?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all Consent Requests.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAllConsentRequestsWithHttpInfoAsync(DataConsentStatus? status = default(DataConsentStatus?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a Consent Request by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataConsentDetailsDto</returns>
        System.Threading.Tasks.Task<DataConsentDetailsDto> GetConsentRequestByIdAsync(Guid requestId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a Consent Request by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataConsentDetailsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataConsentDetailsDto>> GetConsentRequestByIdWithHttpInfoAsync(Guid requestId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataConsentRequestsApi : IDataConsentRequestsApiSync, IDataConsentRequestsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DataConsentRequestsApi : IDataConsentRequestsApi
    {
        private com.mydatamyconsent.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DataConsentRequestsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataConsentRequestsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataConsentRequestsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataConsentRequestsApi(string basePath)
        {
            this.Configuration = com.mydatamyconsent.Client.Configuration.MergeConfigurations(
                com.mydatamyconsent.Client.GlobalConfiguration.Instance,
                new com.mydatamyconsent.Client.Configuration { BasePath = basePath }
            );
            this.Client = new com.mydatamyconsent.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new com.mydatamyconsent.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = com.mydatamyconsent.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataConsentRequestsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DataConsentRequestsApi(com.mydatamyconsent.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = com.mydatamyconsent.Client.Configuration.MergeConfigurations(
                com.mydatamyconsent.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new com.mydatamyconsent.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new com.mydatamyconsent.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = com.mydatamyconsent.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataConsentRequestsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DataConsentRequestsApi(com.mydatamyconsent.Client.ISynchronousClient client, com.mydatamyconsent.Client.IAsynchronousClient asyncClient, com.mydatamyconsent.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = com.mydatamyconsent.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public com.mydatamyconsent.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public com.mydatamyconsent.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public com.mydatamyconsent.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.mydatamyconsent.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Cancel a Consent Request by ID. .
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">consent request id.</param>
        /// <returns></returns>
        public void CancelConsentRequest(Guid requestId)
        {
            CancelConsentRequestWithHttpInfo(requestId);
        }

        /// <summary>
        /// Cancel a Consent Request by ID. .
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">consent request id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public com.mydatamyconsent.Client.ApiResponse<Object> CancelConsentRequestWithHttpInfo(Guid requestId)
        {
            com.mydatamyconsent.Client.RequestOptions localVarRequestOptions = new com.mydatamyconsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = com.mydatamyconsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.mydatamyconsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("requestId", com.mydatamyconsent.Client.ClientUtils.ParameterToString(requestId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/consent-requests/{requestId}/cancel", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelConsentRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel a Consent Request by ID. .
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">consent request id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CancelConsentRequestAsync(Guid requestId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CancelConsentRequestWithHttpInfoAsync(requestId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Cancel a Consent Request by ID. .
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">consent request id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<com.mydatamyconsent.Client.ApiResponse<Object>> CancelConsentRequestWithHttpInfoAsync(Guid requestId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            com.mydatamyconsent.Client.RequestOptions localVarRequestOptions = new com.mydatamyconsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = com.mydatamyconsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.mydatamyconsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("requestId", com.mydatamyconsent.Client.ClientUtils.ParameterToString(requestId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/consent-requests/{requestId}/cancel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelConsentRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a consent request. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataConsentRequestModel">MyDataMyConsent.Models.Consents.DataConsentRequestModel. (optional)</param>
        /// <returns>DataConsent</returns>
        public DataConsent CreateRequest(DataConsentRequestModel dataConsentRequestModel = default(DataConsentRequestModel))
        {
            com.mydatamyconsent.Client.ApiResponse<DataConsent> localVarResponse = CreateRequestWithHttpInfo(dataConsentRequestModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a consent request. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataConsentRequestModel">MyDataMyConsent.Models.Consents.DataConsentRequestModel. (optional)</param>
        /// <returns>ApiResponse of DataConsent</returns>
        public com.mydatamyconsent.Client.ApiResponse<DataConsent> CreateRequestWithHttpInfo(DataConsentRequestModel dataConsentRequestModel = default(DataConsentRequestModel))
        {
            com.mydatamyconsent.Client.RequestOptions localVarRequestOptions = new com.mydatamyconsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = com.mydatamyconsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.mydatamyconsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = dataConsentRequestModel;


            // make the HTTP request
            var localVarResponse = this.Client.Post<DataConsent>("/v1/consent-requests", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a consent request. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataConsentRequestModel">MyDataMyConsent.Models.Consents.DataConsentRequestModel. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataConsent</returns>
        public async System.Threading.Tasks.Task<DataConsent> CreateRequestAsync(DataConsentRequestModel dataConsentRequestModel = default(DataConsentRequestModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.mydatamyconsent.Client.ApiResponse<DataConsent> localVarResponse = await CreateRequestWithHttpInfoAsync(dataConsentRequestModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a consent request. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataConsentRequestModel">MyDataMyConsent.Models.Consents.DataConsentRequestModel. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataConsent)</returns>
        public async System.Threading.Tasks.Task<com.mydatamyconsent.Client.ApiResponse<DataConsent>> CreateRequestWithHttpInfoAsync(DataConsentRequestModel dataConsentRequestModel = default(DataConsentRequestModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            com.mydatamyconsent.Client.RequestOptions localVarRequestOptions = new com.mydatamyconsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };


            var localVarContentType = com.mydatamyconsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.mydatamyconsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = dataConsentRequestModel;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<DataConsent>("/v1/consent-requests", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all Consent Requests. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status"> (optional)</param>
        /// <returns>Object</returns>
        public Object GetAllConsentRequests(DataConsentStatus? status = default(DataConsentStatus?))
        {
            com.mydatamyconsent.Client.ApiResponse<Object> localVarResponse = GetAllConsentRequestsWithHttpInfo(status);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all Consent Requests. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public com.mydatamyconsent.Client.ApiResponse<Object> GetAllConsentRequestsWithHttpInfo(DataConsentStatus? status = default(DataConsentStatus?))
        {
            com.mydatamyconsent.Client.RequestOptions localVarRequestOptions = new com.mydatamyconsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = com.mydatamyconsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.mydatamyconsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.mydatamyconsent.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/v1/consent-requests", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllConsentRequests", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all Consent Requests. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetAllConsentRequestsAsync(DataConsentStatus? status = default(DataConsentStatus?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.mydatamyconsent.Client.ApiResponse<Object> localVarResponse = await GetAllConsentRequestsWithHttpInfoAsync(status, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all Consent Requests. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<com.mydatamyconsent.Client.ApiResponse<Object>> GetAllConsentRequestsWithHttpInfoAsync(DataConsentStatus? status = default(DataConsentStatus?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            com.mydatamyconsent.Client.RequestOptions localVarRequestOptions = new com.mydatamyconsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };


            var localVarContentType = com.mydatamyconsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.mydatamyconsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.mydatamyconsent.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/v1/consent-requests", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllConsentRequests", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Consent Request by ID. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId"></param>
        /// <returns>DataConsentDetailsDto</returns>
        public DataConsentDetailsDto GetConsentRequestById(Guid requestId)
        {
            com.mydatamyconsent.Client.ApiResponse<DataConsentDetailsDto> localVarResponse = GetConsentRequestByIdWithHttpInfo(requestId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Consent Request by ID. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId"></param>
        /// <returns>ApiResponse of DataConsentDetailsDto</returns>
        public com.mydatamyconsent.Client.ApiResponse<DataConsentDetailsDto> GetConsentRequestByIdWithHttpInfo(Guid requestId)
        {
            com.mydatamyconsent.Client.RequestOptions localVarRequestOptions = new com.mydatamyconsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = com.mydatamyconsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.mydatamyconsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("requestId", com.mydatamyconsent.Client.ClientUtils.ParameterToString(requestId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<DataConsentDetailsDto>("/v1/consent-requests/{requestId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConsentRequestById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Consent Request by ID. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataConsentDetailsDto</returns>
        public async System.Threading.Tasks.Task<DataConsentDetailsDto> GetConsentRequestByIdAsync(Guid requestId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.mydatamyconsent.Client.ApiResponse<DataConsentDetailsDto> localVarResponse = await GetConsentRequestByIdWithHttpInfoAsync(requestId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Consent Request by ID. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataConsentDetailsDto)</returns>
        public async System.Threading.Tasks.Task<com.mydatamyconsent.Client.ApiResponse<DataConsentDetailsDto>> GetConsentRequestByIdWithHttpInfoAsync(Guid requestId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            com.mydatamyconsent.Client.RequestOptions localVarRequestOptions = new com.mydatamyconsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };


            var localVarContentType = com.mydatamyconsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.mydatamyconsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("requestId", com.mydatamyconsent.Client.ClientUtils.ParameterToString(requestId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DataConsentDetailsDto>("/v1/consent-requests/{requestId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConsentRequestById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
