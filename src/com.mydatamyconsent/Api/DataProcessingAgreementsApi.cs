/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using com.mydatamyconsent.Client;
using com.mydatamyconsent.Model;

namespace com.mydatamyconsent.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataProcessingAgreementsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get all data processing agreements.
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <returns>DataProcessingAgreementPaginatedList</returns>
        DataProcessingAgreementPaginatedList V1DataAgreementsGet(int? pageNo = default(int?), int? pageSize = default(int?));

        /// <summary>
        /// Get all data processing agreements.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <returns>ApiResponse of DataProcessingAgreementPaginatedList</returns>
        ApiResponse<DataProcessingAgreementPaginatedList> V1DataAgreementsGetWithHttpInfo(int? pageNo = default(int?), int? pageSize = default(int?));
        /// <summary>
        /// Delete a data processing agreement. This will not delete a published or a agreement in use with consents.
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void V1DataAgreementsIdDelete(Guid id);

        /// <summary>
        /// Delete a data processing agreement. This will not delete a published or a agreement in use with consents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V1DataAgreementsIdDeleteWithHttpInfo(Guid id);
        /// <summary>
        /// Get data processing agreement by Id.
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>DataProcessingAgreement</returns>
        DataProcessingAgreement V1DataAgreementsIdGet(Guid id);

        /// <summary>
        /// Get data processing agreement by Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of DataProcessingAgreement</returns>
        ApiResponse<DataProcessingAgreement> V1DataAgreementsIdGetWithHttpInfo(Guid id);
        /// <summary>
        /// Update a data processing agreement.
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataProcessingAgreement"> (optional)</param>
        /// <returns>DataProcessingAgreement</returns>
        DataProcessingAgreement V1DataAgreementsIdPut(Guid id, DataProcessingAgreement dataProcessingAgreement = default(DataProcessingAgreement));

        /// <summary>
        /// Update a data processing agreement.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataProcessingAgreement"> (optional)</param>
        /// <returns>ApiResponse of DataProcessingAgreement</returns>
        ApiResponse<DataProcessingAgreement> V1DataAgreementsIdPutWithHttpInfo(Guid id, DataProcessingAgreement dataProcessingAgreement = default(DataProcessingAgreement));
        /// <summary>
        /// Terminate a data processing agreement.
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void V1DataAgreementsIdTerminatePut(Guid id);

        /// <summary>
        /// Terminate a data processing agreement.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V1DataAgreementsIdTerminatePutWithHttpInfo(Guid id);
        /// <summary>
        /// Create a data processing agreement.
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataProcessingAgreement"> (optional)</param>
        /// <returns>DataProcessingAgreement</returns>
        DataProcessingAgreement V1DataAgreementsPost(DataProcessingAgreement dataProcessingAgreement = default(DataProcessingAgreement));

        /// <summary>
        /// Create a data processing agreement.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataProcessingAgreement"> (optional)</param>
        /// <returns>ApiResponse of DataProcessingAgreement</returns>
        ApiResponse<DataProcessingAgreement> V1DataAgreementsPostWithHttpInfo(DataProcessingAgreement dataProcessingAgreement = default(DataProcessingAgreement));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataProcessingAgreementsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get all data processing agreements.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataProcessingAgreementPaginatedList</returns>
        System.Threading.Tasks.Task<DataProcessingAgreementPaginatedList> V1DataAgreementsGetAsync(int? pageNo = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all data processing agreements.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataProcessingAgreementPaginatedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataProcessingAgreementPaginatedList>> V1DataAgreementsGetWithHttpInfoAsync(int? pageNo = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a data processing agreement. This will not delete a published or a agreement in use with consents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V1DataAgreementsIdDeleteAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a data processing agreement. This will not delete a published or a agreement in use with consents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1DataAgreementsIdDeleteWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get data processing agreement by Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataProcessingAgreement</returns>
        System.Threading.Tasks.Task<DataProcessingAgreement> V1DataAgreementsIdGetAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get data processing agreement by Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataProcessingAgreement)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataProcessingAgreement>> V1DataAgreementsIdGetWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a data processing agreement.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataProcessingAgreement"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataProcessingAgreement</returns>
        System.Threading.Tasks.Task<DataProcessingAgreement> V1DataAgreementsIdPutAsync(Guid id, DataProcessingAgreement dataProcessingAgreement = default(DataProcessingAgreement), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a data processing agreement.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataProcessingAgreement"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataProcessingAgreement)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataProcessingAgreement>> V1DataAgreementsIdPutWithHttpInfoAsync(Guid id, DataProcessingAgreement dataProcessingAgreement = default(DataProcessingAgreement), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Terminate a data processing agreement.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V1DataAgreementsIdTerminatePutAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Terminate a data processing agreement.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1DataAgreementsIdTerminatePutWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a data processing agreement.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataProcessingAgreement"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataProcessingAgreement</returns>
        System.Threading.Tasks.Task<DataProcessingAgreement> V1DataAgreementsPostAsync(DataProcessingAgreement dataProcessingAgreement = default(DataProcessingAgreement), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a data processing agreement.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataProcessingAgreement"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataProcessingAgreement)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataProcessingAgreement>> V1DataAgreementsPostWithHttpInfoAsync(DataProcessingAgreement dataProcessingAgreement = default(DataProcessingAgreement), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataProcessingAgreementsApi : IDataProcessingAgreementsApiSync, IDataProcessingAgreementsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DataProcessingAgreementsApi : IDataProcessingAgreementsApi
    {
        private com.mydatamyconsent.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DataProcessingAgreementsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataProcessingAgreementsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataProcessingAgreementsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataProcessingAgreementsApi(string basePath)
        {
            this.Configuration = com.mydatamyconsent.Client.Configuration.MergeConfigurations(
                com.mydatamyconsent.Client.GlobalConfiguration.Instance,
                new com.mydatamyconsent.Client.Configuration { BasePath = basePath }
            );
            this.Client = new com.mydatamyconsent.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new com.mydatamyconsent.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = com.mydatamyconsent.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataProcessingAgreementsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DataProcessingAgreementsApi(com.mydatamyconsent.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = com.mydatamyconsent.Client.Configuration.MergeConfigurations(
                com.mydatamyconsent.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new com.mydatamyconsent.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new com.mydatamyconsent.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = com.mydatamyconsent.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataProcessingAgreementsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DataProcessingAgreementsApi(com.mydatamyconsent.Client.ISynchronousClient client, com.mydatamyconsent.Client.IAsynchronousClient asyncClient, com.mydatamyconsent.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = com.mydatamyconsent.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public com.mydatamyconsent.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public com.mydatamyconsent.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public com.mydatamyconsent.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.mydatamyconsent.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get all data processing agreements. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <returns>DataProcessingAgreementPaginatedList</returns>
        public DataProcessingAgreementPaginatedList V1DataAgreementsGet(int? pageNo = default(int?), int? pageSize = default(int?))
        {
            com.mydatamyconsent.Client.ApiResponse<DataProcessingAgreementPaginatedList> localVarResponse = V1DataAgreementsGetWithHttpInfo(pageNo, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all data processing agreements. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <returns>ApiResponse of DataProcessingAgreementPaginatedList</returns>
        public com.mydatamyconsent.Client.ApiResponse<DataProcessingAgreementPaginatedList> V1DataAgreementsGetWithHttpInfo(int? pageNo = default(int?), int? pageSize = default(int?))
        {
            com.mydatamyconsent.Client.RequestOptions localVarRequestOptions = new com.mydatamyconsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = com.mydatamyconsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.mydatamyconsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.mydatamyconsent.Client.ClientUtils.ParameterToMultiMap("", "pageNo", pageNo));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.mydatamyconsent.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<DataProcessingAgreementPaginatedList>("/v1/data-agreements", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DataAgreementsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all data processing agreements. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataProcessingAgreementPaginatedList</returns>
        public async System.Threading.Tasks.Task<DataProcessingAgreementPaginatedList> V1DataAgreementsGetAsync(int? pageNo = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.mydatamyconsent.Client.ApiResponse<DataProcessingAgreementPaginatedList> localVarResponse = await V1DataAgreementsGetWithHttpInfoAsync(pageNo, pageSize, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all data processing agreements. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataProcessingAgreementPaginatedList)</returns>
        public async System.Threading.Tasks.Task<com.mydatamyconsent.Client.ApiResponse<DataProcessingAgreementPaginatedList>> V1DataAgreementsGetWithHttpInfoAsync(int? pageNo = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            com.mydatamyconsent.Client.RequestOptions localVarRequestOptions = new com.mydatamyconsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };


            var localVarContentType = com.mydatamyconsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.mydatamyconsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.mydatamyconsent.Client.ClientUtils.ParameterToMultiMap("", "pageNo", pageNo));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.mydatamyconsent.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DataProcessingAgreementPaginatedList>("/v1/data-agreements", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DataAgreementsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a data processing agreement. This will not delete a published or a agreement in use with consents. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void V1DataAgreementsIdDelete(Guid id)
        {
            V1DataAgreementsIdDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a data processing agreement. This will not delete a published or a agreement in use with consents. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public com.mydatamyconsent.Client.ApiResponse<Object> V1DataAgreementsIdDeleteWithHttpInfo(Guid id)
        {
            com.mydatamyconsent.Client.RequestOptions localVarRequestOptions = new com.mydatamyconsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = com.mydatamyconsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.mydatamyconsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", com.mydatamyconsent.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/data-agreements/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DataAgreementsIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a data processing agreement. This will not delete a published or a agreement in use with consents. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V1DataAgreementsIdDeleteAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await V1DataAgreementsIdDeleteWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a data processing agreement. This will not delete a published or a agreement in use with consents. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<com.mydatamyconsent.Client.ApiResponse<Object>> V1DataAgreementsIdDeleteWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            com.mydatamyconsent.Client.RequestOptions localVarRequestOptions = new com.mydatamyconsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };


            var localVarContentType = com.mydatamyconsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.mydatamyconsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", com.mydatamyconsent.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/data-agreements/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DataAgreementsIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get data processing agreement by Id. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>DataProcessingAgreement</returns>
        public DataProcessingAgreement V1DataAgreementsIdGet(Guid id)
        {
            com.mydatamyconsent.Client.ApiResponse<DataProcessingAgreement> localVarResponse = V1DataAgreementsIdGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get data processing agreement by Id. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of DataProcessingAgreement</returns>
        public com.mydatamyconsent.Client.ApiResponse<DataProcessingAgreement> V1DataAgreementsIdGetWithHttpInfo(Guid id)
        {
            com.mydatamyconsent.Client.RequestOptions localVarRequestOptions = new com.mydatamyconsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = com.mydatamyconsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.mydatamyconsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", com.mydatamyconsent.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<DataProcessingAgreement>("/v1/data-agreements/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DataAgreementsIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get data processing agreement by Id. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataProcessingAgreement</returns>
        public async System.Threading.Tasks.Task<DataProcessingAgreement> V1DataAgreementsIdGetAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.mydatamyconsent.Client.ApiResponse<DataProcessingAgreement> localVarResponse = await V1DataAgreementsIdGetWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get data processing agreement by Id. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataProcessingAgreement)</returns>
        public async System.Threading.Tasks.Task<com.mydatamyconsent.Client.ApiResponse<DataProcessingAgreement>> V1DataAgreementsIdGetWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            com.mydatamyconsent.Client.RequestOptions localVarRequestOptions = new com.mydatamyconsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };


            var localVarContentType = com.mydatamyconsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.mydatamyconsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", com.mydatamyconsent.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DataProcessingAgreement>("/v1/data-agreements/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DataAgreementsIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a data processing agreement. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataProcessingAgreement"> (optional)</param>
        /// <returns>DataProcessingAgreement</returns>
        public DataProcessingAgreement V1DataAgreementsIdPut(Guid id, DataProcessingAgreement dataProcessingAgreement = default(DataProcessingAgreement))
        {
            com.mydatamyconsent.Client.ApiResponse<DataProcessingAgreement> localVarResponse = V1DataAgreementsIdPutWithHttpInfo(id, dataProcessingAgreement);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a data processing agreement. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataProcessingAgreement"> (optional)</param>
        /// <returns>ApiResponse of DataProcessingAgreement</returns>
        public com.mydatamyconsent.Client.ApiResponse<DataProcessingAgreement> V1DataAgreementsIdPutWithHttpInfo(Guid id, DataProcessingAgreement dataProcessingAgreement = default(DataProcessingAgreement))
        {
            com.mydatamyconsent.Client.RequestOptions localVarRequestOptions = new com.mydatamyconsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = com.mydatamyconsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.mydatamyconsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", com.mydatamyconsent.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = dataProcessingAgreement;


            // make the HTTP request
            var localVarResponse = this.Client.Put<DataProcessingAgreement>("/v1/data-agreements/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DataAgreementsIdPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a data processing agreement. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataProcessingAgreement"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataProcessingAgreement</returns>
        public async System.Threading.Tasks.Task<DataProcessingAgreement> V1DataAgreementsIdPutAsync(Guid id, DataProcessingAgreement dataProcessingAgreement = default(DataProcessingAgreement), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.mydatamyconsent.Client.ApiResponse<DataProcessingAgreement> localVarResponse = await V1DataAgreementsIdPutWithHttpInfoAsync(id, dataProcessingAgreement, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a data processing agreement. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataProcessingAgreement"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataProcessingAgreement)</returns>
        public async System.Threading.Tasks.Task<com.mydatamyconsent.Client.ApiResponse<DataProcessingAgreement>> V1DataAgreementsIdPutWithHttpInfoAsync(Guid id, DataProcessingAgreement dataProcessingAgreement = default(DataProcessingAgreement), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            com.mydatamyconsent.Client.RequestOptions localVarRequestOptions = new com.mydatamyconsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };


            var localVarContentType = com.mydatamyconsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.mydatamyconsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", com.mydatamyconsent.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = dataProcessingAgreement;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<DataProcessingAgreement>("/v1/data-agreements/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DataAgreementsIdPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Terminate a data processing agreement. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void V1DataAgreementsIdTerminatePut(Guid id)
        {
            V1DataAgreementsIdTerminatePutWithHttpInfo(id);
        }

        /// <summary>
        /// Terminate a data processing agreement. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public com.mydatamyconsent.Client.ApiResponse<Object> V1DataAgreementsIdTerminatePutWithHttpInfo(Guid id)
        {
            com.mydatamyconsent.Client.RequestOptions localVarRequestOptions = new com.mydatamyconsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = com.mydatamyconsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.mydatamyconsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", com.mydatamyconsent.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/v1/data-agreements/{id}/terminate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DataAgreementsIdTerminatePut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Terminate a data processing agreement. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V1DataAgreementsIdTerminatePutAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await V1DataAgreementsIdTerminatePutWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Terminate a data processing agreement. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<com.mydatamyconsent.Client.ApiResponse<Object>> V1DataAgreementsIdTerminatePutWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            com.mydatamyconsent.Client.RequestOptions localVarRequestOptions = new com.mydatamyconsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };


            var localVarContentType = com.mydatamyconsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.mydatamyconsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", com.mydatamyconsent.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/v1/data-agreements/{id}/terminate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DataAgreementsIdTerminatePut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a data processing agreement. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataProcessingAgreement"> (optional)</param>
        /// <returns>DataProcessingAgreement</returns>
        public DataProcessingAgreement V1DataAgreementsPost(DataProcessingAgreement dataProcessingAgreement = default(DataProcessingAgreement))
        {
            com.mydatamyconsent.Client.ApiResponse<DataProcessingAgreement> localVarResponse = V1DataAgreementsPostWithHttpInfo(dataProcessingAgreement);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a data processing agreement. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataProcessingAgreement"> (optional)</param>
        /// <returns>ApiResponse of DataProcessingAgreement</returns>
        public com.mydatamyconsent.Client.ApiResponse<DataProcessingAgreement> V1DataAgreementsPostWithHttpInfo(DataProcessingAgreement dataProcessingAgreement = default(DataProcessingAgreement))
        {
            com.mydatamyconsent.Client.RequestOptions localVarRequestOptions = new com.mydatamyconsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = com.mydatamyconsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.mydatamyconsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = dataProcessingAgreement;


            // make the HTTP request
            var localVarResponse = this.Client.Post<DataProcessingAgreement>("/v1/data-agreements", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DataAgreementsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a data processing agreement. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataProcessingAgreement"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataProcessingAgreement</returns>
        public async System.Threading.Tasks.Task<DataProcessingAgreement> V1DataAgreementsPostAsync(DataProcessingAgreement dataProcessingAgreement = default(DataProcessingAgreement), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.mydatamyconsent.Client.ApiResponse<DataProcessingAgreement> localVarResponse = await V1DataAgreementsPostWithHttpInfoAsync(dataProcessingAgreement, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a data processing agreement. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataProcessingAgreement"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataProcessingAgreement)</returns>
        public async System.Threading.Tasks.Task<com.mydatamyconsent.Client.ApiResponse<DataProcessingAgreement>> V1DataAgreementsPostWithHttpInfoAsync(DataProcessingAgreement dataProcessingAgreement = default(DataProcessingAgreement), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            com.mydatamyconsent.Client.RequestOptions localVarRequestOptions = new com.mydatamyconsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };


            var localVarContentType = com.mydatamyconsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.mydatamyconsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = dataProcessingAgreement;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<DataProcessingAgreement>("/v1/data-agreements", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DataAgreementsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
