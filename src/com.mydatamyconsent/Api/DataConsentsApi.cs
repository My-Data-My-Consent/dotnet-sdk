/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using com.mydatamyconsent.Client;
using com.mydatamyconsent.Model;

namespace com.mydatamyconsent.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataConsentsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get consented financial account details.
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <returns>Object</returns>
        Object V1ConsentsConsentIdAccountsAccountIdGet(string consentId, string accountId);

        /// <summary>
        /// Get consented financial account details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> V1ConsentsConsentIdAccountsAccountIdGetWithHttpInfo(string consentId, string accountId);
        /// <summary>
        /// Get consented financial account insights.
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <returns>Object</returns>
        Object V1ConsentsConsentIdAccountsAccountIdInsightsGet(string consentId, string accountId);

        /// <summary>
        /// Get consented financial account insights.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> V1ConsentsConsentIdAccountsAccountIdInsightsGetWithHttpInfo(string consentId, string accountId);
        /// <summary>
        /// Get consented financial account transactions.
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="filters"> (optional)</param>
        /// <param name="fromDate"> (optional)</param>
        /// <param name="toDate"> (optional)</param>
        /// <returns>Object</returns>
        Object V1ConsentsConsentIdAccountsAccountIdTransactionsGet(string consentId, string accountId, string filters = default(string), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?));

        /// <summary>
        /// Get consented financial account transactions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="filters"> (optional)</param>
        /// <param name="fromDate"> (optional)</param>
        /// <param name="toDate"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> V1ConsentsConsentIdAccountsAccountIdTransactionsGetWithHttpInfo(string consentId, string accountId, string filters = default(string), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?));
        /// <summary>
        /// Get all accounts in a consent.
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <returns>Object</returns>
        Object V1ConsentsConsentIdAccountsGet(string consentId);

        /// <summary>
        /// Get all accounts in a consent.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> V1ConsentsConsentIdAccountsGetWithHttpInfo(string consentId);
        /// <summary>
        /// Get analysis of a consented document.
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId">Document Id.</param>
        /// <returns>Object</returns>
        Object V1ConsentsConsentIdDocumentsDocumentIdAnalysisGet(string consentId, string documentId);

        /// <summary>
        /// Get analysis of a consented document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId">Document Id.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> V1ConsentsConsentIdDocumentsDocumentIdAnalysisGetWithHttpInfo(string consentId, string documentId);
        /// <summary>
        /// Download a consented document.
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId">Document Id.</param>
        /// <returns>Object</returns>
        Object V1ConsentsConsentIdDocumentsDocumentIdDownloadGet(string consentId, string documentId);

        /// <summary>
        /// Download a consented document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId">Document Id.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> V1ConsentsConsentIdDocumentsDocumentIdDownloadGetWithHttpInfo(string consentId, string documentId);
        /// <summary>
        /// Get consented document details.
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId">Document Id.</param>
        /// <returns>Object</returns>
        Object V1ConsentsConsentIdDocumentsDocumentIdGet(string consentId, string documentId);

        /// <summary>
        /// Get consented document details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId">Document Id.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> V1ConsentsConsentIdDocumentsDocumentIdGetWithHttpInfo(string consentId, string documentId);
        /// <summary>
        /// Get all documents in a consent.
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <returns>Object</returns>
        Object V1ConsentsConsentIdDocumentsGet(string consentId);

        /// <summary>
        /// Get all documents in a consent.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> V1ConsentsConsentIdDocumentsGetWithHttpInfo(string consentId);
        /// <summary>
        /// Get consent details by consent id.
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <returns>Object</returns>
        Object V1ConsentsConsentIdGet(string consentId);

        /// <summary>
        /// Get consent details by consent id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> V1ConsentsConsentIdGetWithHttpInfo(string consentId);
        /// <summary>
        /// Get all consents filtered by status and time.
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">MyDataMyConsent.Domain.Entities.ConsentAggregate.Enums.DataConsentStatus. (optional)</param>
        /// <param name="startDate">System.DateTime. (optional)</param>
        /// <param name="endDate">till dateSystem.DateTime. (optional)</param>
        /// <returns>Object</returns>
        Object V1ConsentsGet(DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?));

        /// <summary>
        /// Get all consents filtered by status and time.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">MyDataMyConsent.Domain.Entities.ConsentAggregate.Enums.DataConsentStatus. (optional)</param>
        /// <param name="startDate">System.DateTime. (optional)</param>
        /// <param name="endDate">till dateSystem.DateTime. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> V1ConsentsGetWithHttpInfo(DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataConsentsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get consented financial account details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> V1ConsentsConsentIdAccountsAccountIdGetAsync(string consentId, string accountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get consented financial account details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1ConsentsConsentIdAccountsAccountIdGetWithHttpInfoAsync(string consentId, string accountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get consented financial account insights.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> V1ConsentsConsentIdAccountsAccountIdInsightsGetAsync(string consentId, string accountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get consented financial account insights.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1ConsentsConsentIdAccountsAccountIdInsightsGetWithHttpInfoAsync(string consentId, string accountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get consented financial account transactions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="filters"> (optional)</param>
        /// <param name="fromDate"> (optional)</param>
        /// <param name="toDate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> V1ConsentsConsentIdAccountsAccountIdTransactionsGetAsync(string consentId, string accountId, string filters = default(string), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get consented financial account transactions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="filters"> (optional)</param>
        /// <param name="fromDate"> (optional)</param>
        /// <param name="toDate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1ConsentsConsentIdAccountsAccountIdTransactionsGetWithHttpInfoAsync(string consentId, string accountId, string filters = default(string), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all accounts in a consent.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> V1ConsentsConsentIdAccountsGetAsync(string consentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all accounts in a consent.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1ConsentsConsentIdAccountsGetWithHttpInfoAsync(string consentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get analysis of a consented document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId">Document Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> V1ConsentsConsentIdDocumentsDocumentIdAnalysisGetAsync(string consentId, string documentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get analysis of a consented document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId">Document Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1ConsentsConsentIdDocumentsDocumentIdAnalysisGetWithHttpInfoAsync(string consentId, string documentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Download a consented document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId">Document Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> V1ConsentsConsentIdDocumentsDocumentIdDownloadGetAsync(string consentId, string documentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Download a consented document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId">Document Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1ConsentsConsentIdDocumentsDocumentIdDownloadGetWithHttpInfoAsync(string consentId, string documentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get consented document details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId">Document Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> V1ConsentsConsentIdDocumentsDocumentIdGetAsync(string consentId, string documentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get consented document details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId">Document Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1ConsentsConsentIdDocumentsDocumentIdGetWithHttpInfoAsync(string consentId, string documentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all documents in a consent.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> V1ConsentsConsentIdDocumentsGetAsync(string consentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all documents in a consent.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1ConsentsConsentIdDocumentsGetWithHttpInfoAsync(string consentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get consent details by consent id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> V1ConsentsConsentIdGetAsync(string consentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get consent details by consent id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1ConsentsConsentIdGetWithHttpInfoAsync(string consentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all consents filtered by status and time.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">MyDataMyConsent.Domain.Entities.ConsentAggregate.Enums.DataConsentStatus. (optional)</param>
        /// <param name="startDate">System.DateTime. (optional)</param>
        /// <param name="endDate">till dateSystem.DateTime. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> V1ConsentsGetAsync(DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all consents filtered by status and time.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">MyDataMyConsent.Domain.Entities.ConsentAggregate.Enums.DataConsentStatus. (optional)</param>
        /// <param name="startDate">System.DateTime. (optional)</param>
        /// <param name="endDate">till dateSystem.DateTime. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1ConsentsGetWithHttpInfoAsync(DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataConsentsApi : IDataConsentsApiSync, IDataConsentsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DataConsentsApi : IDataConsentsApi
    {
        private com.mydatamyconsent.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DataConsentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataConsentsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataConsentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataConsentsApi(string basePath)
        {
            this.Configuration = com.mydatamyconsent.Client.Configuration.MergeConfigurations(
                com.mydatamyconsent.Client.GlobalConfiguration.Instance,
                new com.mydatamyconsent.Client.Configuration { BasePath = basePath }
            );
            this.Client = new com.mydatamyconsent.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new com.mydatamyconsent.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = com.mydatamyconsent.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataConsentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DataConsentsApi(com.mydatamyconsent.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = com.mydatamyconsent.Client.Configuration.MergeConfigurations(
                com.mydatamyconsent.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new com.mydatamyconsent.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new com.mydatamyconsent.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = com.mydatamyconsent.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataConsentsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DataConsentsApi(com.mydatamyconsent.Client.ISynchronousClient client, com.mydatamyconsent.Client.IAsynchronousClient asyncClient, com.mydatamyconsent.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = com.mydatamyconsent.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public com.mydatamyconsent.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public com.mydatamyconsent.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public com.mydatamyconsent.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.mydatamyconsent.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get consented financial account details. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <returns>Object</returns>
        public Object V1ConsentsConsentIdAccountsAccountIdGet(string consentId, string accountId)
        {
            com.mydatamyconsent.Client.ApiResponse<Object> localVarResponse = V1ConsentsConsentIdAccountsAccountIdGetWithHttpInfo(consentId, accountId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get consented financial account details. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <returns>ApiResponse of Object</returns>
        public com.mydatamyconsent.Client.ApiResponse<Object> V1ConsentsConsentIdAccountsAccountIdGetWithHttpInfo(string consentId, string accountId)
        {
            // verify the required parameter 'consentId' is set
            if (consentId == null)
                throw new com.mydatamyconsent.Client.ApiException(400, "Missing required parameter 'consentId' when calling DataConsentsApi->V1ConsentsConsentIdAccountsAccountIdGet");

            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new com.mydatamyconsent.Client.ApiException(400, "Missing required parameter 'accountId' when calling DataConsentsApi->V1ConsentsConsentIdAccountsAccountIdGet");

            com.mydatamyconsent.Client.RequestOptions localVarRequestOptions = new com.mydatamyconsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = com.mydatamyconsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.mydatamyconsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("consentId", com.mydatamyconsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("accountId", com.mydatamyconsent.Client.ClientUtils.ParameterToString(accountId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/v1/consents/{consentId}/accounts/{accountId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ConsentsConsentIdAccountsAccountIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get consented financial account details. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> V1ConsentsConsentIdAccountsAccountIdGetAsync(string consentId, string accountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.mydatamyconsent.Client.ApiResponse<Object> localVarResponse = await V1ConsentsConsentIdAccountsAccountIdGetWithHttpInfoAsync(consentId, accountId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get consented financial account details. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<com.mydatamyconsent.Client.ApiResponse<Object>> V1ConsentsConsentIdAccountsAccountIdGetWithHttpInfoAsync(string consentId, string accountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'consentId' is set
            if (consentId == null)
                throw new com.mydatamyconsent.Client.ApiException(400, "Missing required parameter 'consentId' when calling DataConsentsApi->V1ConsentsConsentIdAccountsAccountIdGet");

            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new com.mydatamyconsent.Client.ApiException(400, "Missing required parameter 'accountId' when calling DataConsentsApi->V1ConsentsConsentIdAccountsAccountIdGet");


            com.mydatamyconsent.Client.RequestOptions localVarRequestOptions = new com.mydatamyconsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };


            var localVarContentType = com.mydatamyconsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.mydatamyconsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("consentId", com.mydatamyconsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("accountId", com.mydatamyconsent.Client.ClientUtils.ParameterToString(accountId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/v1/consents/{consentId}/accounts/{accountId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ConsentsConsentIdAccountsAccountIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get consented financial account insights. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <returns>Object</returns>
        public Object V1ConsentsConsentIdAccountsAccountIdInsightsGet(string consentId, string accountId)
        {
            com.mydatamyconsent.Client.ApiResponse<Object> localVarResponse = V1ConsentsConsentIdAccountsAccountIdInsightsGetWithHttpInfo(consentId, accountId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get consented financial account insights. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <returns>ApiResponse of Object</returns>
        public com.mydatamyconsent.Client.ApiResponse<Object> V1ConsentsConsentIdAccountsAccountIdInsightsGetWithHttpInfo(string consentId, string accountId)
        {
            // verify the required parameter 'consentId' is set
            if (consentId == null)
                throw new com.mydatamyconsent.Client.ApiException(400, "Missing required parameter 'consentId' when calling DataConsentsApi->V1ConsentsConsentIdAccountsAccountIdInsightsGet");

            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new com.mydatamyconsent.Client.ApiException(400, "Missing required parameter 'accountId' when calling DataConsentsApi->V1ConsentsConsentIdAccountsAccountIdInsightsGet");

            com.mydatamyconsent.Client.RequestOptions localVarRequestOptions = new com.mydatamyconsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = com.mydatamyconsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.mydatamyconsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("consentId", com.mydatamyconsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("accountId", com.mydatamyconsent.Client.ClientUtils.ParameterToString(accountId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/v1/consents/{consentId}/accounts/{accountId}/insights", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ConsentsConsentIdAccountsAccountIdInsightsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get consented financial account insights. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> V1ConsentsConsentIdAccountsAccountIdInsightsGetAsync(string consentId, string accountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.mydatamyconsent.Client.ApiResponse<Object> localVarResponse = await V1ConsentsConsentIdAccountsAccountIdInsightsGetWithHttpInfoAsync(consentId, accountId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get consented financial account insights. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<com.mydatamyconsent.Client.ApiResponse<Object>> V1ConsentsConsentIdAccountsAccountIdInsightsGetWithHttpInfoAsync(string consentId, string accountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'consentId' is set
            if (consentId == null)
                throw new com.mydatamyconsent.Client.ApiException(400, "Missing required parameter 'consentId' when calling DataConsentsApi->V1ConsentsConsentIdAccountsAccountIdInsightsGet");

            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new com.mydatamyconsent.Client.ApiException(400, "Missing required parameter 'accountId' when calling DataConsentsApi->V1ConsentsConsentIdAccountsAccountIdInsightsGet");


            com.mydatamyconsent.Client.RequestOptions localVarRequestOptions = new com.mydatamyconsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };


            var localVarContentType = com.mydatamyconsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.mydatamyconsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("consentId", com.mydatamyconsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("accountId", com.mydatamyconsent.Client.ClientUtils.ParameterToString(accountId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/v1/consents/{consentId}/accounts/{accountId}/insights", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ConsentsConsentIdAccountsAccountIdInsightsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get consented financial account transactions. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="filters"> (optional)</param>
        /// <param name="fromDate"> (optional)</param>
        /// <param name="toDate"> (optional)</param>
        /// <returns>Object</returns>
        public Object V1ConsentsConsentIdAccountsAccountIdTransactionsGet(string consentId, string accountId, string filters = default(string), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?))
        {
            com.mydatamyconsent.Client.ApiResponse<Object> localVarResponse = V1ConsentsConsentIdAccountsAccountIdTransactionsGetWithHttpInfo(consentId, accountId, filters, fromDate, toDate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get consented financial account transactions. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="filters"> (optional)</param>
        /// <param name="fromDate"> (optional)</param>
        /// <param name="toDate"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public com.mydatamyconsent.Client.ApiResponse<Object> V1ConsentsConsentIdAccountsAccountIdTransactionsGetWithHttpInfo(string consentId, string accountId, string filters = default(string), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?))
        {
            // verify the required parameter 'consentId' is set
            if (consentId == null)
                throw new com.mydatamyconsent.Client.ApiException(400, "Missing required parameter 'consentId' when calling DataConsentsApi->V1ConsentsConsentIdAccountsAccountIdTransactionsGet");

            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new com.mydatamyconsent.Client.ApiException(400, "Missing required parameter 'accountId' when calling DataConsentsApi->V1ConsentsConsentIdAccountsAccountIdTransactionsGet");

            com.mydatamyconsent.Client.RequestOptions localVarRequestOptions = new com.mydatamyconsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = com.mydatamyconsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.mydatamyconsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("consentId", com.mydatamyconsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("accountId", com.mydatamyconsent.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            if (filters != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.mydatamyconsent.Client.ClientUtils.ParameterToMultiMap("", "filters", filters));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.mydatamyconsent.Client.ClientUtils.ParameterToMultiMap("", "fromDate", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.mydatamyconsent.Client.ClientUtils.ParameterToMultiMap("", "toDate", toDate));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/v1/consents/{consentId}/accounts/{accountId}/transactions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ConsentsConsentIdAccountsAccountIdTransactionsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get consented financial account transactions. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="filters"> (optional)</param>
        /// <param name="fromDate"> (optional)</param>
        /// <param name="toDate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> V1ConsentsConsentIdAccountsAccountIdTransactionsGetAsync(string consentId, string accountId, string filters = default(string), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.mydatamyconsent.Client.ApiResponse<Object> localVarResponse = await V1ConsentsConsentIdAccountsAccountIdTransactionsGetWithHttpInfoAsync(consentId, accountId, filters, fromDate, toDate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get consented financial account transactions. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="filters"> (optional)</param>
        /// <param name="fromDate"> (optional)</param>
        /// <param name="toDate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<com.mydatamyconsent.Client.ApiResponse<Object>> V1ConsentsConsentIdAccountsAccountIdTransactionsGetWithHttpInfoAsync(string consentId, string accountId, string filters = default(string), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'consentId' is set
            if (consentId == null)
                throw new com.mydatamyconsent.Client.ApiException(400, "Missing required parameter 'consentId' when calling DataConsentsApi->V1ConsentsConsentIdAccountsAccountIdTransactionsGet");

            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new com.mydatamyconsent.Client.ApiException(400, "Missing required parameter 'accountId' when calling DataConsentsApi->V1ConsentsConsentIdAccountsAccountIdTransactionsGet");


            com.mydatamyconsent.Client.RequestOptions localVarRequestOptions = new com.mydatamyconsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };


            var localVarContentType = com.mydatamyconsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.mydatamyconsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("consentId", com.mydatamyconsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("accountId", com.mydatamyconsent.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            if (filters != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.mydatamyconsent.Client.ClientUtils.ParameterToMultiMap("", "filters", filters));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.mydatamyconsent.Client.ClientUtils.ParameterToMultiMap("", "fromDate", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.mydatamyconsent.Client.ClientUtils.ParameterToMultiMap("", "toDate", toDate));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/v1/consents/{consentId}/accounts/{accountId}/transactions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ConsentsConsentIdAccountsAccountIdTransactionsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all accounts in a consent. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <returns>Object</returns>
        public Object V1ConsentsConsentIdAccountsGet(string consentId)
        {
            com.mydatamyconsent.Client.ApiResponse<Object> localVarResponse = V1ConsentsConsentIdAccountsGetWithHttpInfo(consentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all accounts in a consent. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <returns>ApiResponse of Object</returns>
        public com.mydatamyconsent.Client.ApiResponse<Object> V1ConsentsConsentIdAccountsGetWithHttpInfo(string consentId)
        {
            // verify the required parameter 'consentId' is set
            if (consentId == null)
                throw new com.mydatamyconsent.Client.ApiException(400, "Missing required parameter 'consentId' when calling DataConsentsApi->V1ConsentsConsentIdAccountsGet");

            com.mydatamyconsent.Client.RequestOptions localVarRequestOptions = new com.mydatamyconsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = com.mydatamyconsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.mydatamyconsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("consentId", com.mydatamyconsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/v1/consents/{consentId}/accounts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ConsentsConsentIdAccountsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all accounts in a consent. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> V1ConsentsConsentIdAccountsGetAsync(string consentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.mydatamyconsent.Client.ApiResponse<Object> localVarResponse = await V1ConsentsConsentIdAccountsGetWithHttpInfoAsync(consentId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all accounts in a consent. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<com.mydatamyconsent.Client.ApiResponse<Object>> V1ConsentsConsentIdAccountsGetWithHttpInfoAsync(string consentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'consentId' is set
            if (consentId == null)
                throw new com.mydatamyconsent.Client.ApiException(400, "Missing required parameter 'consentId' when calling DataConsentsApi->V1ConsentsConsentIdAccountsGet");


            com.mydatamyconsent.Client.RequestOptions localVarRequestOptions = new com.mydatamyconsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };


            var localVarContentType = com.mydatamyconsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.mydatamyconsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("consentId", com.mydatamyconsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/v1/consents/{consentId}/accounts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ConsentsConsentIdAccountsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get analysis of a consented document. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId">Document Id.</param>
        /// <returns>Object</returns>
        public Object V1ConsentsConsentIdDocumentsDocumentIdAnalysisGet(string consentId, string documentId)
        {
            com.mydatamyconsent.Client.ApiResponse<Object> localVarResponse = V1ConsentsConsentIdDocumentsDocumentIdAnalysisGetWithHttpInfo(consentId, documentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get analysis of a consented document. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId">Document Id.</param>
        /// <returns>ApiResponse of Object</returns>
        public com.mydatamyconsent.Client.ApiResponse<Object> V1ConsentsConsentIdDocumentsDocumentIdAnalysisGetWithHttpInfo(string consentId, string documentId)
        {
            // verify the required parameter 'consentId' is set
            if (consentId == null)
                throw new com.mydatamyconsent.Client.ApiException(400, "Missing required parameter 'consentId' when calling DataConsentsApi->V1ConsentsConsentIdDocumentsDocumentIdAnalysisGet");

            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new com.mydatamyconsent.Client.ApiException(400, "Missing required parameter 'documentId' when calling DataConsentsApi->V1ConsentsConsentIdDocumentsDocumentIdAnalysisGet");

            com.mydatamyconsent.Client.RequestOptions localVarRequestOptions = new com.mydatamyconsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = com.mydatamyconsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.mydatamyconsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("consentId", com.mydatamyconsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("documentId", com.mydatamyconsent.Client.ClientUtils.ParameterToString(documentId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/v1/consents/{consentId}/documents/{documentId}/analysis", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ConsentsConsentIdDocumentsDocumentIdAnalysisGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get analysis of a consented document. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId">Document Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> V1ConsentsConsentIdDocumentsDocumentIdAnalysisGetAsync(string consentId, string documentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.mydatamyconsent.Client.ApiResponse<Object> localVarResponse = await V1ConsentsConsentIdDocumentsDocumentIdAnalysisGetWithHttpInfoAsync(consentId, documentId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get analysis of a consented document. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId">Document Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<com.mydatamyconsent.Client.ApiResponse<Object>> V1ConsentsConsentIdDocumentsDocumentIdAnalysisGetWithHttpInfoAsync(string consentId, string documentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'consentId' is set
            if (consentId == null)
                throw new com.mydatamyconsent.Client.ApiException(400, "Missing required parameter 'consentId' when calling DataConsentsApi->V1ConsentsConsentIdDocumentsDocumentIdAnalysisGet");

            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new com.mydatamyconsent.Client.ApiException(400, "Missing required parameter 'documentId' when calling DataConsentsApi->V1ConsentsConsentIdDocumentsDocumentIdAnalysisGet");


            com.mydatamyconsent.Client.RequestOptions localVarRequestOptions = new com.mydatamyconsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };


            var localVarContentType = com.mydatamyconsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.mydatamyconsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("consentId", com.mydatamyconsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("documentId", com.mydatamyconsent.Client.ClientUtils.ParameterToString(documentId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/v1/consents/{consentId}/documents/{documentId}/analysis", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ConsentsConsentIdDocumentsDocumentIdAnalysisGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download a consented document. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId">Document Id.</param>
        /// <returns>Object</returns>
        public Object V1ConsentsConsentIdDocumentsDocumentIdDownloadGet(string consentId, string documentId)
        {
            com.mydatamyconsent.Client.ApiResponse<Object> localVarResponse = V1ConsentsConsentIdDocumentsDocumentIdDownloadGetWithHttpInfo(consentId, documentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download a consented document. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId">Document Id.</param>
        /// <returns>ApiResponse of Object</returns>
        public com.mydatamyconsent.Client.ApiResponse<Object> V1ConsentsConsentIdDocumentsDocumentIdDownloadGetWithHttpInfo(string consentId, string documentId)
        {
            // verify the required parameter 'consentId' is set
            if (consentId == null)
                throw new com.mydatamyconsent.Client.ApiException(400, "Missing required parameter 'consentId' when calling DataConsentsApi->V1ConsentsConsentIdDocumentsDocumentIdDownloadGet");

            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new com.mydatamyconsent.Client.ApiException(400, "Missing required parameter 'documentId' when calling DataConsentsApi->V1ConsentsConsentIdDocumentsDocumentIdDownloadGet");

            com.mydatamyconsent.Client.RequestOptions localVarRequestOptions = new com.mydatamyconsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = com.mydatamyconsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.mydatamyconsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("consentId", com.mydatamyconsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("documentId", com.mydatamyconsent.Client.ClientUtils.ParameterToString(documentId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/v1/consents/{consentId}/documents/{documentId}/download", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ConsentsConsentIdDocumentsDocumentIdDownloadGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download a consented document. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId">Document Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> V1ConsentsConsentIdDocumentsDocumentIdDownloadGetAsync(string consentId, string documentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.mydatamyconsent.Client.ApiResponse<Object> localVarResponse = await V1ConsentsConsentIdDocumentsDocumentIdDownloadGetWithHttpInfoAsync(consentId, documentId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download a consented document. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId">Document Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<com.mydatamyconsent.Client.ApiResponse<Object>> V1ConsentsConsentIdDocumentsDocumentIdDownloadGetWithHttpInfoAsync(string consentId, string documentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'consentId' is set
            if (consentId == null)
                throw new com.mydatamyconsent.Client.ApiException(400, "Missing required parameter 'consentId' when calling DataConsentsApi->V1ConsentsConsentIdDocumentsDocumentIdDownloadGet");

            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new com.mydatamyconsent.Client.ApiException(400, "Missing required parameter 'documentId' when calling DataConsentsApi->V1ConsentsConsentIdDocumentsDocumentIdDownloadGet");


            com.mydatamyconsent.Client.RequestOptions localVarRequestOptions = new com.mydatamyconsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };


            var localVarContentType = com.mydatamyconsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.mydatamyconsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("consentId", com.mydatamyconsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("documentId", com.mydatamyconsent.Client.ClientUtils.ParameterToString(documentId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/v1/consents/{consentId}/documents/{documentId}/download", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ConsentsConsentIdDocumentsDocumentIdDownloadGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get consented document details. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId">Document Id.</param>
        /// <returns>Object</returns>
        public Object V1ConsentsConsentIdDocumentsDocumentIdGet(string consentId, string documentId)
        {
            com.mydatamyconsent.Client.ApiResponse<Object> localVarResponse = V1ConsentsConsentIdDocumentsDocumentIdGetWithHttpInfo(consentId, documentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get consented document details. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId">Document Id.</param>
        /// <returns>ApiResponse of Object</returns>
        public com.mydatamyconsent.Client.ApiResponse<Object> V1ConsentsConsentIdDocumentsDocumentIdGetWithHttpInfo(string consentId, string documentId)
        {
            // verify the required parameter 'consentId' is set
            if (consentId == null)
                throw new com.mydatamyconsent.Client.ApiException(400, "Missing required parameter 'consentId' when calling DataConsentsApi->V1ConsentsConsentIdDocumentsDocumentIdGet");

            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new com.mydatamyconsent.Client.ApiException(400, "Missing required parameter 'documentId' when calling DataConsentsApi->V1ConsentsConsentIdDocumentsDocumentIdGet");

            com.mydatamyconsent.Client.RequestOptions localVarRequestOptions = new com.mydatamyconsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = com.mydatamyconsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.mydatamyconsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("consentId", com.mydatamyconsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("documentId", com.mydatamyconsent.Client.ClientUtils.ParameterToString(documentId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/v1/consents/{consentId}/documents/{documentId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ConsentsConsentIdDocumentsDocumentIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get consented document details. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId">Document Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> V1ConsentsConsentIdDocumentsDocumentIdGetAsync(string consentId, string documentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.mydatamyconsent.Client.ApiResponse<Object> localVarResponse = await V1ConsentsConsentIdDocumentsDocumentIdGetWithHttpInfoAsync(consentId, documentId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get consented document details. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId">Document Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<com.mydatamyconsent.Client.ApiResponse<Object>> V1ConsentsConsentIdDocumentsDocumentIdGetWithHttpInfoAsync(string consentId, string documentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'consentId' is set
            if (consentId == null)
                throw new com.mydatamyconsent.Client.ApiException(400, "Missing required parameter 'consentId' when calling DataConsentsApi->V1ConsentsConsentIdDocumentsDocumentIdGet");

            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new com.mydatamyconsent.Client.ApiException(400, "Missing required parameter 'documentId' when calling DataConsentsApi->V1ConsentsConsentIdDocumentsDocumentIdGet");


            com.mydatamyconsent.Client.RequestOptions localVarRequestOptions = new com.mydatamyconsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };


            var localVarContentType = com.mydatamyconsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.mydatamyconsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("consentId", com.mydatamyconsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("documentId", com.mydatamyconsent.Client.ClientUtils.ParameterToString(documentId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/v1/consents/{consentId}/documents/{documentId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ConsentsConsentIdDocumentsDocumentIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all documents in a consent. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <returns>Object</returns>
        public Object V1ConsentsConsentIdDocumentsGet(string consentId)
        {
            com.mydatamyconsent.Client.ApiResponse<Object> localVarResponse = V1ConsentsConsentIdDocumentsGetWithHttpInfo(consentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all documents in a consent. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <returns>ApiResponse of Object</returns>
        public com.mydatamyconsent.Client.ApiResponse<Object> V1ConsentsConsentIdDocumentsGetWithHttpInfo(string consentId)
        {
            // verify the required parameter 'consentId' is set
            if (consentId == null)
                throw new com.mydatamyconsent.Client.ApiException(400, "Missing required parameter 'consentId' when calling DataConsentsApi->V1ConsentsConsentIdDocumentsGet");

            com.mydatamyconsent.Client.RequestOptions localVarRequestOptions = new com.mydatamyconsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = com.mydatamyconsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.mydatamyconsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("consentId", com.mydatamyconsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/v1/consents/{consentId}/documents", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ConsentsConsentIdDocumentsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all documents in a consent. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> V1ConsentsConsentIdDocumentsGetAsync(string consentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.mydatamyconsent.Client.ApiResponse<Object> localVarResponse = await V1ConsentsConsentIdDocumentsGetWithHttpInfoAsync(consentId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all documents in a consent. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<com.mydatamyconsent.Client.ApiResponse<Object>> V1ConsentsConsentIdDocumentsGetWithHttpInfoAsync(string consentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'consentId' is set
            if (consentId == null)
                throw new com.mydatamyconsent.Client.ApiException(400, "Missing required parameter 'consentId' when calling DataConsentsApi->V1ConsentsConsentIdDocumentsGet");


            com.mydatamyconsent.Client.RequestOptions localVarRequestOptions = new com.mydatamyconsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };


            var localVarContentType = com.mydatamyconsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.mydatamyconsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("consentId", com.mydatamyconsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/v1/consents/{consentId}/documents", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ConsentsConsentIdDocumentsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get consent details by consent id. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <returns>Object</returns>
        public Object V1ConsentsConsentIdGet(string consentId)
        {
            com.mydatamyconsent.Client.ApiResponse<Object> localVarResponse = V1ConsentsConsentIdGetWithHttpInfo(consentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get consent details by consent id. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <returns>ApiResponse of Object</returns>
        public com.mydatamyconsent.Client.ApiResponse<Object> V1ConsentsConsentIdGetWithHttpInfo(string consentId)
        {
            // verify the required parameter 'consentId' is set
            if (consentId == null)
                throw new com.mydatamyconsent.Client.ApiException(400, "Missing required parameter 'consentId' when calling DataConsentsApi->V1ConsentsConsentIdGet");

            com.mydatamyconsent.Client.RequestOptions localVarRequestOptions = new com.mydatamyconsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = com.mydatamyconsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.mydatamyconsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("consentId", com.mydatamyconsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/v1/consents/{consentId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ConsentsConsentIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get consent details by consent id. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> V1ConsentsConsentIdGetAsync(string consentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.mydatamyconsent.Client.ApiResponse<Object> localVarResponse = await V1ConsentsConsentIdGetWithHttpInfoAsync(consentId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get consent details by consent id. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<com.mydatamyconsent.Client.ApiResponse<Object>> V1ConsentsConsentIdGetWithHttpInfoAsync(string consentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'consentId' is set
            if (consentId == null)
                throw new com.mydatamyconsent.Client.ApiException(400, "Missing required parameter 'consentId' when calling DataConsentsApi->V1ConsentsConsentIdGet");


            com.mydatamyconsent.Client.RequestOptions localVarRequestOptions = new com.mydatamyconsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };


            var localVarContentType = com.mydatamyconsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.mydatamyconsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("consentId", com.mydatamyconsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/v1/consents/{consentId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ConsentsConsentIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all consents filtered by status and time. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">MyDataMyConsent.Domain.Entities.ConsentAggregate.Enums.DataConsentStatus. (optional)</param>
        /// <param name="startDate">System.DateTime. (optional)</param>
        /// <param name="endDate">till dateSystem.DateTime. (optional)</param>
        /// <returns>Object</returns>
        public Object V1ConsentsGet(DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?))
        {
            com.mydatamyconsent.Client.ApiResponse<Object> localVarResponse = V1ConsentsGetWithHttpInfo(status, startDate, endDate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all consents filtered by status and time. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">MyDataMyConsent.Domain.Entities.ConsentAggregate.Enums.DataConsentStatus. (optional)</param>
        /// <param name="startDate">System.DateTime. (optional)</param>
        /// <param name="endDate">till dateSystem.DateTime. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public com.mydatamyconsent.Client.ApiResponse<Object> V1ConsentsGetWithHttpInfo(DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?))
        {
            com.mydatamyconsent.Client.RequestOptions localVarRequestOptions = new com.mydatamyconsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = com.mydatamyconsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.mydatamyconsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.mydatamyconsent.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.mydatamyconsent.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.mydatamyconsent.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/v1/consents", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ConsentsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all consents filtered by status and time. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">MyDataMyConsent.Domain.Entities.ConsentAggregate.Enums.DataConsentStatus. (optional)</param>
        /// <param name="startDate">System.DateTime. (optional)</param>
        /// <param name="endDate">till dateSystem.DateTime. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> V1ConsentsGetAsync(DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.mydatamyconsent.Client.ApiResponse<Object> localVarResponse = await V1ConsentsGetWithHttpInfoAsync(status, startDate, endDate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all consents filtered by status and time. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">MyDataMyConsent.Domain.Entities.ConsentAggregate.Enums.DataConsentStatus. (optional)</param>
        /// <param name="startDate">System.DateTime. (optional)</param>
        /// <param name="endDate">till dateSystem.DateTime. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<com.mydatamyconsent.Client.ApiResponse<Object>> V1ConsentsGetWithHttpInfoAsync(DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            com.mydatamyconsent.Client.RequestOptions localVarRequestOptions = new com.mydatamyconsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };


            var localVarContentType = com.mydatamyconsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.mydatamyconsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.mydatamyconsent.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.mydatamyconsent.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.mydatamyconsent.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/v1/consents", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ConsentsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
