/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using com.mydatamyconsent.Client;
using com.mydatamyconsent.Model;

namespace com.mydatamyconsent.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDigiLockerCompatIssuerApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Digilocker Compatible endpoint to Issue Documents.
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushUriRequest"> (optional)</param>
        /// <returns>PushUriResponse</returns>
        PushUriResponse IssuerIssuedoc1XmlPost(PushUriRequest pushUriRequest = default(PushUriRequest));

        /// <summary>
        /// Digilocker Compatible endpoint to Issue Documents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushUriRequest"> (optional)</param>
        /// <returns>ApiResponse of PushUriResponse</returns>
        ApiResponse<PushUriResponse> IssuerIssuedoc1XmlPostWithHttpInfo(PushUriRequest pushUriRequest = default(PushUriRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDigiLockerCompatIssuerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Digilocker Compatible endpoint to Issue Documents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushUriRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PushUriResponse</returns>
        System.Threading.Tasks.Task<PushUriResponse> IssuerIssuedoc1XmlPostAsync(PushUriRequest pushUriRequest = default(PushUriRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Digilocker Compatible endpoint to Issue Documents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushUriRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PushUriResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PushUriResponse>> IssuerIssuedoc1XmlPostWithHttpInfoAsync(PushUriRequest pushUriRequest = default(PushUriRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDigiLockerCompatIssuerApi : IDigiLockerCompatIssuerApiSync, IDigiLockerCompatIssuerApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DigiLockerCompatIssuerApi : IDigiLockerCompatIssuerApi
    {
        private com.mydatamyconsent.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DigiLockerCompatIssuerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DigiLockerCompatIssuerApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DigiLockerCompatIssuerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DigiLockerCompatIssuerApi(string basePath)
        {
            this.Configuration = com.mydatamyconsent.Client.Configuration.MergeConfigurations(
                com.mydatamyconsent.Client.GlobalConfiguration.Instance,
                new com.mydatamyconsent.Client.Configuration { BasePath = basePath }
            );
            this.Client = new com.mydatamyconsent.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new com.mydatamyconsent.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = com.mydatamyconsent.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DigiLockerCompatIssuerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DigiLockerCompatIssuerApi(com.mydatamyconsent.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = com.mydatamyconsent.Client.Configuration.MergeConfigurations(
                com.mydatamyconsent.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new com.mydatamyconsent.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new com.mydatamyconsent.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = com.mydatamyconsent.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DigiLockerCompatIssuerApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DigiLockerCompatIssuerApi(com.mydatamyconsent.Client.ISynchronousClient client, com.mydatamyconsent.Client.IAsynchronousClient asyncClient, com.mydatamyconsent.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = com.mydatamyconsent.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public com.mydatamyconsent.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public com.mydatamyconsent.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public com.mydatamyconsent.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.mydatamyconsent.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Digilocker Compatible endpoint to Issue Documents. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushUriRequest"> (optional)</param>
        /// <returns>PushUriResponse</returns>
        public PushUriResponse IssuerIssuedoc1XmlPost(PushUriRequest pushUriRequest = default(PushUriRequest))
        {
            com.mydatamyconsent.Client.ApiResponse<PushUriResponse> localVarResponse = IssuerIssuedoc1XmlPostWithHttpInfo(pushUriRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Digilocker Compatible endpoint to Issue Documents. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushUriRequest"> (optional)</param>
        /// <returns>ApiResponse of PushUriResponse</returns>
        public com.mydatamyconsent.Client.ApiResponse<PushUriResponse> IssuerIssuedoc1XmlPostWithHttpInfo(PushUriRequest pushUriRequest = default(PushUriRequest))
        {
            com.mydatamyconsent.Client.RequestOptions localVarRequestOptions = new com.mydatamyconsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml"
            };

            var localVarContentType = com.mydatamyconsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.mydatamyconsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = pushUriRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PushUriResponse>("/issuer/issuedoc/1/xml", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IssuerIssuedoc1XmlPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Digilocker Compatible endpoint to Issue Documents. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushUriRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PushUriResponse</returns>
        public async System.Threading.Tasks.Task<PushUriResponse> IssuerIssuedoc1XmlPostAsync(PushUriRequest pushUriRequest = default(PushUriRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.mydatamyconsent.Client.ApiResponse<PushUriResponse> localVarResponse = await IssuerIssuedoc1XmlPostWithHttpInfoAsync(pushUriRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Digilocker Compatible endpoint to Issue Documents. 
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushUriRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PushUriResponse)</returns>
        public async System.Threading.Tasks.Task<com.mydatamyconsent.Client.ApiResponse<PushUriResponse>> IssuerIssuedoc1XmlPostWithHttpInfoAsync(PushUriRequest pushUriRequest = default(PushUriRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            com.mydatamyconsent.Client.RequestOptions localVarRequestOptions = new com.mydatamyconsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml"
            };


            var localVarContentType = com.mydatamyconsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.mydatamyconsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = pushUriRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<PushUriResponse>("/issuer/issuedoc/1/xml", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IssuerIssuedoc1XmlPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
