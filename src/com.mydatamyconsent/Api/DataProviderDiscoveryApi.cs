/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using com.mydatamyconsent.Client;
using com.mydatamyconsent.Model;

namespace com.mydatamyconsent.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataProviderDiscoveryApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Discover all data providers in My Data My Consent by country and filters.
        /// </summary>
        /// <remarks>
        /// .
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountType">Account type. (optional)</param>
        /// <param name="documentType">Document type. (optional)</param>
        /// <param name="organizationCategory">Organization category. (optional)</param>
        /// <param name="pageNo">Page number. (optional)</param>
        /// <param name="pageSize">Page size. (optional)</param>
        /// <param name="country">ISO2 Country code. (optional, default to &quot;IN&quot;)</param>
        /// <returns>DataProviderPaginatedList</returns>
        DataProviderPaginatedList V1DataProvidersGet(string accountType = default(string), string documentType = default(string), string organizationCategory = default(string), int? pageNo = default(int?), int? pageSize = default(int?), string country = default(string));

        /// <summary>
        /// Discover all data providers in My Data My Consent by country and filters.
        /// </summary>
        /// <remarks>
        /// .
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountType">Account type. (optional)</param>
        /// <param name="documentType">Document type. (optional)</param>
        /// <param name="organizationCategory">Organization category. (optional)</param>
        /// <param name="pageNo">Page number. (optional)</param>
        /// <param name="pageSize">Page size. (optional)</param>
        /// <param name="country">ISO2 Country code. (optional, default to &quot;IN&quot;)</param>
        /// <returns>ApiResponse of DataProviderPaginatedList</returns>
        ApiResponse<DataProviderPaginatedList> V1DataProvidersGetWithHttpInfo(string accountType = default(string), string documentType = default(string), string organizationCategory = default(string), int? pageNo = default(int?), int? pageSize = default(int?), string country = default(string));
        /// <summary>
        /// Get a Data Provider details.
        /// </summary>
        /// <remarks>
        /// .
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">Provider Id.</param>
        /// <returns>DataProvider</returns>
        DataProvider V1DataProvidersProviderIdGet(string providerId);

        /// <summary>
        /// Get a Data Provider details.
        /// </summary>
        /// <remarks>
        /// .
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">Provider Id.</param>
        /// <returns>ApiResponse of DataProvider</returns>
        ApiResponse<DataProvider> V1DataProvidersProviderIdGetWithHttpInfo(string providerId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataProviderDiscoveryApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Discover all data providers in My Data My Consent by country and filters.
        /// </summary>
        /// <remarks>
        /// .
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountType">Account type. (optional)</param>
        /// <param name="documentType">Document type. (optional)</param>
        /// <param name="organizationCategory">Organization category. (optional)</param>
        /// <param name="pageNo">Page number. (optional)</param>
        /// <param name="pageSize">Page size. (optional)</param>
        /// <param name="country">ISO2 Country code. (optional, default to &quot;IN&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataProviderPaginatedList</returns>
        System.Threading.Tasks.Task<DataProviderPaginatedList> V1DataProvidersGetAsync(string accountType = default(string), string documentType = default(string), string organizationCategory = default(string), int? pageNo = default(int?), int? pageSize = default(int?), string country = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Discover all data providers in My Data My Consent by country and filters.
        /// </summary>
        /// <remarks>
        /// .
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountType">Account type. (optional)</param>
        /// <param name="documentType">Document type. (optional)</param>
        /// <param name="organizationCategory">Organization category. (optional)</param>
        /// <param name="pageNo">Page number. (optional)</param>
        /// <param name="pageSize">Page size. (optional)</param>
        /// <param name="country">ISO2 Country code. (optional, default to &quot;IN&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataProviderPaginatedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataProviderPaginatedList>> V1DataProvidersGetWithHttpInfoAsync(string accountType = default(string), string documentType = default(string), string organizationCategory = default(string), int? pageNo = default(int?), int? pageSize = default(int?), string country = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a Data Provider details.
        /// </summary>
        /// <remarks>
        /// .
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">Provider Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataProvider</returns>
        System.Threading.Tasks.Task<DataProvider> V1DataProvidersProviderIdGetAsync(string providerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a Data Provider details.
        /// </summary>
        /// <remarks>
        /// .
        /// </remarks>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">Provider Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataProvider)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataProvider>> V1DataProvidersProviderIdGetWithHttpInfoAsync(string providerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataProviderDiscoveryApi : IDataProviderDiscoveryApiSync, IDataProviderDiscoveryApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DataProviderDiscoveryApi : IDataProviderDiscoveryApi
    {
        private com.mydatamyconsent.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DataProviderDiscoveryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataProviderDiscoveryApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataProviderDiscoveryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataProviderDiscoveryApi(string basePath)
        {
            this.Configuration = com.mydatamyconsent.Client.Configuration.MergeConfigurations(
                com.mydatamyconsent.Client.GlobalConfiguration.Instance,
                new com.mydatamyconsent.Client.Configuration { BasePath = basePath }
            );
            this.Client = new com.mydatamyconsent.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new com.mydatamyconsent.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = com.mydatamyconsent.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataProviderDiscoveryApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DataProviderDiscoveryApi(com.mydatamyconsent.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = com.mydatamyconsent.Client.Configuration.MergeConfigurations(
                com.mydatamyconsent.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new com.mydatamyconsent.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new com.mydatamyconsent.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = com.mydatamyconsent.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataProviderDiscoveryApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DataProviderDiscoveryApi(com.mydatamyconsent.Client.ISynchronousClient client, com.mydatamyconsent.Client.IAsynchronousClient asyncClient, com.mydatamyconsent.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = com.mydatamyconsent.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public com.mydatamyconsent.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public com.mydatamyconsent.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public com.mydatamyconsent.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.mydatamyconsent.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Discover all data providers in My Data My Consent by country and filters. .
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountType">Account type. (optional)</param>
        /// <param name="documentType">Document type. (optional)</param>
        /// <param name="organizationCategory">Organization category. (optional)</param>
        /// <param name="pageNo">Page number. (optional)</param>
        /// <param name="pageSize">Page size. (optional)</param>
        /// <param name="country">ISO2 Country code. (optional, default to &quot;IN&quot;)</param>
        /// <returns>DataProviderPaginatedList</returns>
        public DataProviderPaginatedList V1DataProvidersGet(string accountType = default(string), string documentType = default(string), string organizationCategory = default(string), int? pageNo = default(int?), int? pageSize = default(int?), string country = default(string))
        {
            com.mydatamyconsent.Client.ApiResponse<DataProviderPaginatedList> localVarResponse = V1DataProvidersGetWithHttpInfo(accountType, documentType, organizationCategory, pageNo, pageSize, country);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Discover all data providers in My Data My Consent by country and filters. .
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountType">Account type. (optional)</param>
        /// <param name="documentType">Document type. (optional)</param>
        /// <param name="organizationCategory">Organization category. (optional)</param>
        /// <param name="pageNo">Page number. (optional)</param>
        /// <param name="pageSize">Page size. (optional)</param>
        /// <param name="country">ISO2 Country code. (optional, default to &quot;IN&quot;)</param>
        /// <returns>ApiResponse of DataProviderPaginatedList</returns>
        public com.mydatamyconsent.Client.ApiResponse<DataProviderPaginatedList> V1DataProvidersGetWithHttpInfo(string accountType = default(string), string documentType = default(string), string organizationCategory = default(string), int? pageNo = default(int?), int? pageSize = default(int?), string country = default(string))
        {
            com.mydatamyconsent.Client.RequestOptions localVarRequestOptions = new com.mydatamyconsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = com.mydatamyconsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.mydatamyconsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (accountType != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.mydatamyconsent.Client.ClientUtils.ParameterToMultiMap("", "accountType", accountType));
            }
            if (documentType != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.mydatamyconsent.Client.ClientUtils.ParameterToMultiMap("", "documentType", documentType));
            }
            if (organizationCategory != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.mydatamyconsent.Client.ClientUtils.ParameterToMultiMap("", "organizationCategory", organizationCategory));
            }
            if (pageNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.mydatamyconsent.Client.ClientUtils.ParameterToMultiMap("", "pageNo", pageNo));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.mydatamyconsent.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (country != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.mydatamyconsent.Client.ClientUtils.ParameterToMultiMap("", "country", country));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<DataProviderPaginatedList>("/v1/data-providers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DataProvidersGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Discover all data providers in My Data My Consent by country and filters. .
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountType">Account type. (optional)</param>
        /// <param name="documentType">Document type. (optional)</param>
        /// <param name="organizationCategory">Organization category. (optional)</param>
        /// <param name="pageNo">Page number. (optional)</param>
        /// <param name="pageSize">Page size. (optional)</param>
        /// <param name="country">ISO2 Country code. (optional, default to &quot;IN&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataProviderPaginatedList</returns>
        public async System.Threading.Tasks.Task<DataProviderPaginatedList> V1DataProvidersGetAsync(string accountType = default(string), string documentType = default(string), string organizationCategory = default(string), int? pageNo = default(int?), int? pageSize = default(int?), string country = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.mydatamyconsent.Client.ApiResponse<DataProviderPaginatedList> localVarResponse = await V1DataProvidersGetWithHttpInfoAsync(accountType, documentType, organizationCategory, pageNo, pageSize, country, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Discover all data providers in My Data My Consent by country and filters. .
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountType">Account type. (optional)</param>
        /// <param name="documentType">Document type. (optional)</param>
        /// <param name="organizationCategory">Organization category. (optional)</param>
        /// <param name="pageNo">Page number. (optional)</param>
        /// <param name="pageSize">Page size. (optional)</param>
        /// <param name="country">ISO2 Country code. (optional, default to &quot;IN&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataProviderPaginatedList)</returns>
        public async System.Threading.Tasks.Task<com.mydatamyconsent.Client.ApiResponse<DataProviderPaginatedList>> V1DataProvidersGetWithHttpInfoAsync(string accountType = default(string), string documentType = default(string), string organizationCategory = default(string), int? pageNo = default(int?), int? pageSize = default(int?), string country = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            com.mydatamyconsent.Client.RequestOptions localVarRequestOptions = new com.mydatamyconsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };


            var localVarContentType = com.mydatamyconsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.mydatamyconsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (accountType != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.mydatamyconsent.Client.ClientUtils.ParameterToMultiMap("", "accountType", accountType));
            }
            if (documentType != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.mydatamyconsent.Client.ClientUtils.ParameterToMultiMap("", "documentType", documentType));
            }
            if (organizationCategory != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.mydatamyconsent.Client.ClientUtils.ParameterToMultiMap("", "organizationCategory", organizationCategory));
            }
            if (pageNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.mydatamyconsent.Client.ClientUtils.ParameterToMultiMap("", "pageNo", pageNo));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.mydatamyconsent.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (country != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.mydatamyconsent.Client.ClientUtils.ParameterToMultiMap("", "country", country));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DataProviderPaginatedList>("/v1/data-providers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DataProvidersGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Data Provider details. .
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">Provider Id.</param>
        /// <returns>DataProvider</returns>
        public DataProvider V1DataProvidersProviderIdGet(string providerId)
        {
            com.mydatamyconsent.Client.ApiResponse<DataProvider> localVarResponse = V1DataProvidersProviderIdGetWithHttpInfo(providerId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Data Provider details. .
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">Provider Id.</param>
        /// <returns>ApiResponse of DataProvider</returns>
        public com.mydatamyconsent.Client.ApiResponse<DataProvider> V1DataProvidersProviderIdGetWithHttpInfo(string providerId)
        {
            // verify the required parameter 'providerId' is set
            if (providerId == null)
                throw new com.mydatamyconsent.Client.ApiException(400, "Missing required parameter 'providerId' when calling DataProviderDiscoveryApi->V1DataProvidersProviderIdGet");

            com.mydatamyconsent.Client.RequestOptions localVarRequestOptions = new com.mydatamyconsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = com.mydatamyconsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.mydatamyconsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("providerId", com.mydatamyconsent.Client.ClientUtils.ParameterToString(providerId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<DataProvider>("/v1/data-providers/{providerId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DataProvidersProviderIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Data Provider details. .
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">Provider Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataProvider</returns>
        public async System.Threading.Tasks.Task<DataProvider> V1DataProvidersProviderIdGetAsync(string providerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.mydatamyconsent.Client.ApiResponse<DataProvider> localVarResponse = await V1DataProvidersProviderIdGetWithHttpInfoAsync(providerId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Data Provider details. .
        /// </summary>
        /// <exception cref="com.mydatamyconsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">Provider Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataProvider)</returns>
        public async System.Threading.Tasks.Task<com.mydatamyconsent.Client.ApiResponse<DataProvider>> V1DataProvidersProviderIdGetWithHttpInfoAsync(string providerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'providerId' is set
            if (providerId == null)
                throw new com.mydatamyconsent.Client.ApiException(400, "Missing required parameter 'providerId' when calling DataProviderDiscoveryApi->V1DataProvidersProviderIdGet");


            com.mydatamyconsent.Client.RequestOptions localVarRequestOptions = new com.mydatamyconsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };


            var localVarContentType = com.mydatamyconsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.mydatamyconsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("providerId", com.mydatamyconsent.Client.ClientUtils.ParameterToString(providerId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DataProvider>("/v1/data-providers/{providerId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DataProvidersProviderIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
