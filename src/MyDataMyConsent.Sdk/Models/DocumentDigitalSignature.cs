/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = MyDataMyConsent.Sdk.Client.OpenAPIDateConverter;

namespace MyDataMyConsent.Sdk.Models
{
    /// <summary>
    /// Document digital signature.
    /// </summary>
    [DataContract(Name = "DocumentDigitalSignature")]
    public partial class DocumentDigitalSignature : IEquatable<DocumentDigitalSignature>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentDigitalSignature" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DocumentDigitalSignature() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentDigitalSignature" /> class.
        /// </summary>
        /// <param name="name">Name. (required).</param>
        /// <param name="issuedBy">Signature issued by. (required).</param>
        /// <param name="issuerName">Signature issuer name. (required).</param>
        /// <param name="validFromUtc">Signature valid from datatime in UTC timezone. (required).</param>
        /// <param name="validToUtc">Signature valid to datatime in UTC timezone. (required).</param>
        public DocumentDigitalSignature(string name = default(string), string issuedBy = default(string), string issuerName = default(string), DateTime validFromUtc = default(DateTime), DateTime validToUtc = default(DateTime))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for DocumentDigitalSignature and cannot be null");
            }
            this.Name = name;
            // to ensure "issuedBy" is required (not null)
            if (issuedBy == null)
            {
                throw new ArgumentNullException("issuedBy is a required property for DocumentDigitalSignature and cannot be null");
            }
            this.IssuedBy = issuedBy;
            // to ensure "issuerName" is required (not null)
            if (issuerName == null)
            {
                throw new ArgumentNullException("issuerName is a required property for DocumentDigitalSignature and cannot be null");
            }
            this.IssuerName = issuerName;
            this.ValidFromUtc = validFromUtc;
            this.ValidToUtc = validToUtc;
        }

        /// <summary>
        /// Name.
        /// </summary>
        /// <value>Name.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Signature issued by.
        /// </summary>
        /// <value>Signature issued by.</value>
        [DataMember(Name = "issuedBy", IsRequired = true, EmitDefaultValue = false)]
        public string IssuedBy { get; set; }

        /// <summary>
        /// Signature issuer name.
        /// </summary>
        /// <value>Signature issuer name.</value>
        [DataMember(Name = "issuerName", IsRequired = true, EmitDefaultValue = false)]
        public string IssuerName { get; set; }

        /// <summary>
        /// Signature valid from datatime in UTC timezone.
        /// </summary>
        /// <value>Signature valid from datatime in UTC timezone.</value>
        [DataMember(Name = "validFromUtc", IsRequired = true, EmitDefaultValue = false)]
        public DateTime ValidFromUtc { get; set; }

        /// <summary>
        /// Signature valid to datatime in UTC timezone.
        /// </summary>
        /// <value>Signature valid to datatime in UTC timezone.</value>
        [DataMember(Name = "validToUtc", IsRequired = true, EmitDefaultValue = false)]
        public DateTime ValidToUtc { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DocumentDigitalSignature {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IssuedBy: ").Append(IssuedBy).Append("\n");
            sb.Append("  IssuerName: ").Append(IssuerName).Append("\n");
            sb.Append("  ValidFromUtc: ").Append(ValidFromUtc).Append("\n");
            sb.Append("  ValidToUtc: ").Append(ValidToUtc).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentDigitalSignature);
        }

        /// <summary>
        /// Returns true if DocumentDigitalSignature instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentDigitalSignature to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentDigitalSignature input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.IssuedBy == input.IssuedBy ||
                    (this.IssuedBy != null &&
                    this.IssuedBy.Equals(input.IssuedBy))
                ) && 
                (
                    this.IssuerName == input.IssuerName ||
                    (this.IssuerName != null &&
                    this.IssuerName.Equals(input.IssuerName))
                ) && 
                (
                    this.ValidFromUtc == input.ValidFromUtc ||
                    (this.ValidFromUtc != null &&
                    this.ValidFromUtc.Equals(input.ValidFromUtc))
                ) && 
                (
                    this.ValidToUtc == input.ValidToUtc ||
                    (this.ValidToUtc != null &&
                    this.ValidToUtc.Equals(input.ValidToUtc))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.IssuedBy != null)
                {
                    hashCode = (hashCode * 59) + this.IssuedBy.GetHashCode();
                }
                if (this.IssuerName != null)
                {
                    hashCode = (hashCode * 59) + this.IssuerName.GetHashCode();
                }
                if (this.ValidFromUtc != null)
                {
                    hashCode = (hashCode * 59) + this.ValidFromUtc.GetHashCode();
                }
                if (this.ValidToUtc != null)
                {
                    hashCode = (hashCode * 59) + this.ValidToUtc.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
