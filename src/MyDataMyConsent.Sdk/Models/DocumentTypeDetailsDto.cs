/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = MyDataMyConsent.Sdk.Client.OpenAPIDateConverter;

namespace MyDataMyConsent.Sdk.Models
{
    /// <summary>
    /// DocumentTypeDetailsDto
    /// </summary>
    [DataContract(Name = "DocumentTypeDetailsDto")]
    public partial class DocumentTypeDetailsDto : IEquatable<DocumentTypeDetailsDto>
    {

        /// <summary>
        /// Gets or Sets CategoryType
        /// </summary>
        [DataMember(Name = "categoryType", IsRequired = true, EmitDefaultValue = false)]
        public DocumentCategoryType CategoryType { get; set; }

        /// <summary>
        /// Gets or Sets SubCategoryType
        /// </summary>
        [DataMember(Name = "subCategoryType", IsRequired = true, EmitDefaultValue = false)]
        public DocumentSubCategoryType SubCategoryType { get; set; }

        /// <summary>
        /// Gets or Sets SupportedEntityType
        /// </summary>
        [DataMember(Name = "supportedEntityType", IsRequired = true, EmitDefaultValue = false)]
        public SupportedEntityType SupportedEntityType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentTypeDetailsDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DocumentTypeDetailsDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentTypeDetailsDto" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="organizationId">organizationId (required).</param>
        /// <param name="categoryType">categoryType (required).</param>
        /// <param name="subCategoryType">subCategoryType (required).</param>
        /// <param name="documentTypeCategoryId">documentTypeCategoryId (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="slug">slug (required).</param>
        /// <param name="description">description.</param>
        /// <param name="logoUrl">logoUrl (required).</param>
        /// <param name="countryIso2">countryIso2 (required).</param>
        /// <param name="countryId">countryId (required).</param>
        /// <param name="searchServiceId">searchServiceId.</param>
        /// <param name="repositoryServiceId">repositoryServiceId.</param>
        /// <param name="supportedEntityType">supportedEntityType (required).</param>
        /// <param name="addedBy">addedBy (required).</param>
        /// <param name="payableAmount">payableAmount.</param>
        /// <param name="approvedAtUtc">approvedAtUtc.</param>
        public DocumentTypeDetailsDto(Guid id = default(Guid), Guid organizationId = default(Guid), DocumentCategoryType categoryType = default(DocumentCategoryType), DocumentSubCategoryType subCategoryType = default(DocumentSubCategoryType), Guid documentTypeCategoryId = default(Guid), string name = default(string), string slug = default(string), string? description = default(string?), string logoUrl = default(string), string countryIso2 = default(string), Guid countryId = default(Guid), Guid? searchServiceId = default(Guid?), Guid? repositoryServiceId = default(Guid?), SupportedEntityType supportedEntityType = default(SupportedEntityType), string addedBy = default(string), double? payableAmount = default(double?), DateTime? approvedAtUtc = default(DateTime?))
        {
            this.Id = id;
            this.OrganizationId = organizationId;
            this.CategoryType = categoryType;
            this.SubCategoryType = subCategoryType;
            this.DocumentTypeCategoryId = documentTypeCategoryId;
            this.Name = name;
            this.Slug = slug;
            this.LogoUrl = logoUrl;
            this.CountryIso2 = countryIso2;
            this.CountryId = countryId;
            this.SupportedEntityType = supportedEntityType;
            this.AddedBy = addedBy;
            this.Description = description;
            this.SearchServiceId = searchServiceId;
            this.RepositoryServiceId = repositoryServiceId;
            this.PayableAmount = payableAmount;
            this.ApprovedAtUtc = approvedAtUtc;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationId
        /// </summary>
        [DataMember(Name = "organizationId", IsRequired = true, EmitDefaultValue = false)]
        public Guid OrganizationId { get; set; }

        /// <summary>
        /// Gets or Sets DocumentTypeCategoryId
        /// </summary>
        [DataMember(Name = "documentTypeCategoryId", IsRequired = true, EmitDefaultValue = false)]
        public Guid DocumentTypeCategoryId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Slug
        /// </summary>
        [DataMember(Name = "slug", IsRequired = true, EmitDefaultValue = false)]
        public string Slug { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string? Description { get; set; }

        /// <summary>
        /// Gets or Sets LogoUrl
        /// </summary>
        [DataMember(Name = "logoUrl", IsRequired = true, EmitDefaultValue = false)]
        public string LogoUrl { get; set; }

        /// <summary>
        /// Gets or Sets CountryIso2
        /// </summary>
        [DataMember(Name = "countryIso2", IsRequired = true, EmitDefaultValue = false)]
        public string CountryIso2 { get; set; }

        /// <summary>
        /// Gets or Sets CountryId
        /// </summary>
        [DataMember(Name = "countryId", IsRequired = true, EmitDefaultValue = false)]
        public Guid CountryId { get; set; }

        /// <summary>
        /// Gets or Sets SearchServiceId
        /// </summary>
        [DataMember(Name = "searchServiceId", EmitDefaultValue = true)]
        public Guid? SearchServiceId { get; set; }

        /// <summary>
        /// Gets or Sets RepositoryServiceId
        /// </summary>
        [DataMember(Name = "repositoryServiceId", EmitDefaultValue = true)]
        public Guid? RepositoryServiceId { get; set; }

        /// <summary>
        /// Gets or Sets AddedBy
        /// </summary>
        [DataMember(Name = "addedBy", IsRequired = true, EmitDefaultValue = false)]
        public string AddedBy { get; set; }

        /// <summary>
        /// Gets or Sets PayableAmount
        /// </summary>
        [DataMember(Name = "payableAmount", EmitDefaultValue = true)]
        public double? PayableAmount { get; set; }

        /// <summary>
        /// Gets or Sets ApprovedAtUtc
        /// </summary>
        [DataMember(Name = "approvedAtUtc", EmitDefaultValue = true)]
        public DateTime? ApprovedAtUtc { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DocumentTypeDetailsDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  CategoryType: ").Append(CategoryType).Append("\n");
            sb.Append("  SubCategoryType: ").Append(SubCategoryType).Append("\n");
            sb.Append("  DocumentTypeCategoryId: ").Append(DocumentTypeCategoryId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Slug: ").Append(Slug).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  LogoUrl: ").Append(LogoUrl).Append("\n");
            sb.Append("  CountryIso2: ").Append(CountryIso2).Append("\n");
            sb.Append("  CountryId: ").Append(CountryId).Append("\n");
            sb.Append("  SearchServiceId: ").Append(SearchServiceId).Append("\n");
            sb.Append("  RepositoryServiceId: ").Append(RepositoryServiceId).Append("\n");
            sb.Append("  SupportedEntityType: ").Append(SupportedEntityType).Append("\n");
            sb.Append("  AddedBy: ").Append(AddedBy).Append("\n");
            sb.Append("  PayableAmount: ").Append(PayableAmount).Append("\n");
            sb.Append("  ApprovedAtUtc: ").Append(ApprovedAtUtc).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentTypeDetailsDto);
        }

        /// <summary>
        /// Returns true if DocumentTypeDetailsDto instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentTypeDetailsDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentTypeDetailsDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.OrganizationId == input.OrganizationId ||
                    (this.OrganizationId != null &&
                    this.OrganizationId.Equals(input.OrganizationId))
                ) && 
                (
                    this.CategoryType == input.CategoryType ||
                    this.CategoryType.Equals(input.CategoryType)
                ) && 
                (
                    this.SubCategoryType == input.SubCategoryType ||
                    this.SubCategoryType.Equals(input.SubCategoryType)
                ) && 
                (
                    this.DocumentTypeCategoryId == input.DocumentTypeCategoryId ||
                    (this.DocumentTypeCategoryId != null &&
                    this.DocumentTypeCategoryId.Equals(input.DocumentTypeCategoryId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Slug == input.Slug ||
                    (this.Slug != null &&
                    this.Slug.Equals(input.Slug))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.LogoUrl == input.LogoUrl ||
                    (this.LogoUrl != null &&
                    this.LogoUrl.Equals(input.LogoUrl))
                ) && 
                (
                    this.CountryIso2 == input.CountryIso2 ||
                    (this.CountryIso2 != null &&
                    this.CountryIso2.Equals(input.CountryIso2))
                ) && 
                (
                    this.CountryId == input.CountryId ||
                    (this.CountryId != null &&
                    this.CountryId.Equals(input.CountryId))
                ) && 
                (
                    this.SearchServiceId == input.SearchServiceId ||
                    (this.SearchServiceId != null &&
                    this.SearchServiceId.Equals(input.SearchServiceId))
                ) && 
                (
                    this.RepositoryServiceId == input.RepositoryServiceId ||
                    (this.RepositoryServiceId != null &&
                    this.RepositoryServiceId.Equals(input.RepositoryServiceId))
                ) && 
                (
                    this.SupportedEntityType == input.SupportedEntityType ||
                    this.SupportedEntityType.Equals(input.SupportedEntityType)
                ) && 
                (
                    this.AddedBy == input.AddedBy ||
                    (this.AddedBy != null &&
                    this.AddedBy.Equals(input.AddedBy))
                ) && 
                (
                    this.PayableAmount == input.PayableAmount ||
                    (this.PayableAmount != null &&
                    this.PayableAmount.Equals(input.PayableAmount))
                ) && 
                (
                    this.ApprovedAtUtc == input.ApprovedAtUtc ||
                    (this.ApprovedAtUtc != null &&
                    this.ApprovedAtUtc.Equals(input.ApprovedAtUtc))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.OrganizationId != null)
                {
                    hashCode = (hashCode * 59) + this.OrganizationId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CategoryType.GetHashCode();
                hashCode = (hashCode * 59) + this.SubCategoryType.GetHashCode();
                if (this.DocumentTypeCategoryId != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentTypeCategoryId.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Slug != null)
                {
                    hashCode = (hashCode * 59) + this.Slug.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.LogoUrl != null)
                {
                    hashCode = (hashCode * 59) + this.LogoUrl.GetHashCode();
                }
                if (this.CountryIso2 != null)
                {
                    hashCode = (hashCode * 59) + this.CountryIso2.GetHashCode();
                }
                if (this.CountryId != null)
                {
                    hashCode = (hashCode * 59) + this.CountryId.GetHashCode();
                }
                if (this.SearchServiceId != null)
                {
                    hashCode = (hashCode * 59) + this.SearchServiceId.GetHashCode();
                }
                if (this.RepositoryServiceId != null)
                {
                    hashCode = (hashCode * 59) + this.RepositoryServiceId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SupportedEntityType.GetHashCode();
                if (this.AddedBy != null)
                {
                    hashCode = (hashCode * 59) + this.AddedBy.GetHashCode();
                }
                if (this.PayableAmount != null)
                {
                    hashCode = (hashCode * 59) + this.PayableAmount.GetHashCode();
                }
                if (this.ApprovedAtUtc != null)
                {
                    hashCode = (hashCode * 59) + this.ApprovedAtUtc.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
