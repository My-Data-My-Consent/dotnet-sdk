/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = MyDataMyConsent.Sdk.Client.OpenAPIDateConverter;

namespace MyDataMyConsent.Sdk.Models
{
    /// <summary>
    /// DataConsentDetailsDto
    /// </summary>
    [DataContract(Name = "DataConsentDetailsDto")]
    public partial class DataConsentDetailsDto : IEquatable<DataConsentDetailsDto>
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public DataConsentStatus? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DataConsentDetailsDto" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="status">status.</param>
        /// <param name="approvedAtUtc">approvedAtUtc.</param>
        /// <param name="rejectedAtUtc">rejectedAtUtc.</param>
        /// <param name="expiresAtUtc">expiresAtUtc.</param>
        /// <param name="requestedAtUtc">requestedAtUtc.</param>
        /// <param name="requester">requester.</param>
        /// <param name="consentDetails">consentDetails.</param>
        /// <param name="identifiers">identifiers.</param>
        /// <param name="approvedDocuments">approvedDocuments.</param>
        /// <param name="approvedFinancials">approvedFinancials.</param>
        public DataConsentDetailsDto(Guid id = default(Guid), DataConsentStatus? status = default(DataConsentStatus?), DateTime? approvedAtUtc = default(DateTime?), DateTime? rejectedAtUtc = default(DateTime?), DateTime expiresAtUtc = default(DateTime), DateTime requestedAtUtc = default(DateTime), DataConsentRequesterDto requester = default(DataConsentRequesterDto), GetConsentTemplateDetailsDto consentDetails = default(GetConsentTemplateDetailsDto), List<DataConsentIdentifier> identifiers = default(List<DataConsentIdentifier>), List<DataConsentRequestedDocument> approvedDocuments = default(List<DataConsentRequestedDocument>), List<DataConsentRequestedFinancialAccount> approvedFinancials = default(List<DataConsentRequestedFinancialAccount>))
        {
            this.Id = id;
            this.Status = status;
            this.ApprovedAtUtc = approvedAtUtc;
            this.RejectedAtUtc = rejectedAtUtc;
            this.ExpiresAtUtc = expiresAtUtc;
            this.RequestedAtUtc = requestedAtUtc;
            this.Requester = requester;
            this.ConsentDetails = consentDetails;
            this.Identifiers = identifiers;
            this.ApprovedDocuments = approvedDocuments;
            this.ApprovedFinancials = approvedFinancials;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets ApprovedAtUtc
        /// </summary>
        [DataMember(Name = "approvedAtUtc", EmitDefaultValue = true)]
        public DateTime? ApprovedAtUtc { get; set; }

        /// <summary>
        /// Gets or Sets RejectedAtUtc
        /// </summary>
        [DataMember(Name = "rejectedAtUtc", EmitDefaultValue = true)]
        public DateTime? RejectedAtUtc { get; set; }

        /// <summary>
        /// Gets or Sets ExpiresAtUtc
        /// </summary>
        [DataMember(Name = "expiresAtUtc", EmitDefaultValue = false)]
        public DateTime ExpiresAtUtc { get; set; }

        /// <summary>
        /// Gets or Sets RequestedAtUtc
        /// </summary>
        [DataMember(Name = "requestedAtUtc", EmitDefaultValue = false)]
        public DateTime RequestedAtUtc { get; set; }

        /// <summary>
        /// Gets or Sets Requester
        /// </summary>
        [DataMember(Name = "requester", EmitDefaultValue = false)]
        public DataConsentRequesterDto Requester { get; set; }

        /// <summary>
        /// Gets or Sets ConsentDetails
        /// </summary>
        [DataMember(Name = "consentDetails", EmitDefaultValue = false)]
        public GetConsentTemplateDetailsDto ConsentDetails { get; set; }

        /// <summary>
        /// Gets or Sets Identifiers
        /// </summary>
        [DataMember(Name = "identifiers", EmitDefaultValue = true)]
        public List<DataConsentIdentifier> Identifiers { get; set; }

        /// <summary>
        /// Gets or Sets ApprovedDocuments
        /// </summary>
        [DataMember(Name = "approvedDocuments", EmitDefaultValue = true)]
        public List<DataConsentRequestedDocument> ApprovedDocuments { get; set; }

        /// <summary>
        /// Gets or Sets ApprovedFinancials
        /// </summary>
        [DataMember(Name = "approvedFinancials", EmitDefaultValue = true)]
        public List<DataConsentRequestedFinancialAccount> ApprovedFinancials { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DataConsentDetailsDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ApprovedAtUtc: ").Append(ApprovedAtUtc).Append("\n");
            sb.Append("  RejectedAtUtc: ").Append(RejectedAtUtc).Append("\n");
            sb.Append("  ExpiresAtUtc: ").Append(ExpiresAtUtc).Append("\n");
            sb.Append("  RequestedAtUtc: ").Append(RequestedAtUtc).Append("\n");
            sb.Append("  Requester: ").Append(Requester).Append("\n");
            sb.Append("  ConsentDetails: ").Append(ConsentDetails).Append("\n");
            sb.Append("  Identifiers: ").Append(Identifiers).Append("\n");
            sb.Append("  ApprovedDocuments: ").Append(ApprovedDocuments).Append("\n");
            sb.Append("  ApprovedFinancials: ").Append(ApprovedFinancials).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DataConsentDetailsDto);
        }

        /// <summary>
        /// Returns true if DataConsentDetailsDto instances are equal
        /// </summary>
        /// <param name="input">Instance of DataConsentDetailsDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataConsentDetailsDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.ApprovedAtUtc == input.ApprovedAtUtc ||
                    (this.ApprovedAtUtc != null &&
                    this.ApprovedAtUtc.Equals(input.ApprovedAtUtc))
                ) && 
                (
                    this.RejectedAtUtc == input.RejectedAtUtc ||
                    (this.RejectedAtUtc != null &&
                    this.RejectedAtUtc.Equals(input.RejectedAtUtc))
                ) && 
                (
                    this.ExpiresAtUtc == input.ExpiresAtUtc ||
                    (this.ExpiresAtUtc != null &&
                    this.ExpiresAtUtc.Equals(input.ExpiresAtUtc))
                ) && 
                (
                    this.RequestedAtUtc == input.RequestedAtUtc ||
                    (this.RequestedAtUtc != null &&
                    this.RequestedAtUtc.Equals(input.RequestedAtUtc))
                ) && 
                (
                    this.Requester == input.Requester ||
                    (this.Requester != null &&
                    this.Requester.Equals(input.Requester))
                ) && 
                (
                    this.ConsentDetails == input.ConsentDetails ||
                    (this.ConsentDetails != null &&
                    this.ConsentDetails.Equals(input.ConsentDetails))
                ) && 
                (
                    this.Identifiers == input.Identifiers ||
                    this.Identifiers != null &&
                    input.Identifiers != null &&
                    this.Identifiers.SequenceEqual(input.Identifiers)
                ) && 
                (
                    this.ApprovedDocuments == input.ApprovedDocuments ||
                    this.ApprovedDocuments != null &&
                    input.ApprovedDocuments != null &&
                    this.ApprovedDocuments.SequenceEqual(input.ApprovedDocuments)
                ) && 
                (
                    this.ApprovedFinancials == input.ApprovedFinancials ||
                    this.ApprovedFinancials != null &&
                    input.ApprovedFinancials != null &&
                    this.ApprovedFinancials.SequenceEqual(input.ApprovedFinancials)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.ApprovedAtUtc != null)
                {
                    hashCode = (hashCode * 59) + this.ApprovedAtUtc.GetHashCode();
                }
                if (this.RejectedAtUtc != null)
                {
                    hashCode = (hashCode * 59) + this.RejectedAtUtc.GetHashCode();
                }
                if (this.ExpiresAtUtc != null)
                {
                    hashCode = (hashCode * 59) + this.ExpiresAtUtc.GetHashCode();
                }
                if (this.RequestedAtUtc != null)
                {
                    hashCode = (hashCode * 59) + this.RequestedAtUtc.GetHashCode();
                }
                if (this.Requester != null)
                {
                    hashCode = (hashCode * 59) + this.Requester.GetHashCode();
                }
                if (this.ConsentDetails != null)
                {
                    hashCode = (hashCode * 59) + this.ConsentDetails.GetHashCode();
                }
                if (this.Identifiers != null)
                {
                    hashCode = (hashCode * 59) + this.Identifiers.GetHashCode();
                }
                if (this.ApprovedDocuments != null)
                {
                    hashCode = (hashCode * 59) + this.ApprovedDocuments.GetHashCode();
                }
                if (this.ApprovedFinancials != null)
                {
                    hashCode = (hashCode * 59) + this.ApprovedFinancials.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
