/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = MyDataMyConsent.Sdk.Client.OpenAPIDateConverter;

namespace MyDataMyConsent.Sdk.Models
{
    /// <summary>
    /// DataConsentDocumentDetailsDto
    /// </summary>
    [DataContract(Name = "DataConsentDocumentDetailsDto")]
    public partial class DataConsentDocumentDetailsDto : IEquatable<DataConsentDocumentDetailsDto>
    {

        /// <summary>
        /// Gets or Sets Requirement
        /// </summary>
        [DataMember(Name = "requirement", IsRequired = true, EmitDefaultValue = false)]
        public DocumentsRequired Requirement { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DataConsentDocumentDetailsDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DataConsentDocumentDetailsDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DataConsentDocumentDetailsDto" /> class.
        /// </summary>
        /// <param name="fieldTitle">fieldTitle (required).</param>
        /// <param name="fieldSlug">fieldSlug (required).</param>
        /// <param name="supportedDocumentTypeCategoryDetails">supportedDocumentTypeCategoryDetails (required).</param>
        /// <param name="requirement">requirement (required).</param>
        public DataConsentDocumentDetailsDto(string fieldTitle = default(string), string fieldSlug = default(string), List<SupportedDocumentTypeCategoryDetailsDto> supportedDocumentTypeCategoryDetails = default(List<SupportedDocumentTypeCategoryDetailsDto>), DocumentsRequired requirement = default(DocumentsRequired))
        {
            this.FieldTitle = fieldTitle;
            this.FieldSlug = fieldSlug;
            // to ensure "supportedDocumentTypeCategoryDetails" is required (not null)
            if (supportedDocumentTypeCategoryDetails == null) {
                throw new ArgumentNullException("supportedDocumentTypeCategoryDetails is a required property for DataConsentDocumentDetailsDto and cannot be null");
            }
            this.SupportedDocumentTypeCategoryDetails = supportedDocumentTypeCategoryDetails;
            this.Requirement = requirement;
        }

        /// <summary>
        /// Gets or Sets FieldTitle
        /// </summary>
        [DataMember(Name = "fieldTitle", IsRequired = true, EmitDefaultValue = false)]
        public string FieldTitle { get; set; }

        /// <summary>
        /// Gets or Sets FieldSlug
        /// </summary>
        [DataMember(Name = "fieldSlug", IsRequired = true, EmitDefaultValue = false)]
        public string FieldSlug { get; set; }

        /// <summary>
        /// Gets or Sets SupportedDocumentTypeCategoryDetails
        /// </summary>
        [DataMember(Name = "supportedDocumentTypeCategoryDetails", IsRequired = true, EmitDefaultValue = false)]
        public List<SupportedDocumentTypeCategoryDetailsDto> SupportedDocumentTypeCategoryDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DataConsentDocumentDetailsDto {\n");
            sb.Append("  FieldTitle: ").Append(FieldTitle).Append("\n");
            sb.Append("  FieldSlug: ").Append(FieldSlug).Append("\n");
            sb.Append("  SupportedDocumentTypeCategoryDetails: ").Append(SupportedDocumentTypeCategoryDetails).Append("\n");
            sb.Append("  Requirement: ").Append(Requirement).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DataConsentDocumentDetailsDto);
        }

        /// <summary>
        /// Returns true if DataConsentDocumentDetailsDto instances are equal
        /// </summary>
        /// <param name="input">Instance of DataConsentDocumentDetailsDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataConsentDocumentDetailsDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FieldTitle == input.FieldTitle ||
                    (this.FieldTitle != null &&
                    this.FieldTitle.Equals(input.FieldTitle))
                ) && 
                (
                    this.FieldSlug == input.FieldSlug ||
                    (this.FieldSlug != null &&
                    this.FieldSlug.Equals(input.FieldSlug))
                ) && 
                (
                    this.SupportedDocumentTypeCategoryDetails == input.SupportedDocumentTypeCategoryDetails ||
                    this.SupportedDocumentTypeCategoryDetails != null &&
                    input.SupportedDocumentTypeCategoryDetails != null &&
                    this.SupportedDocumentTypeCategoryDetails.SequenceEqual(input.SupportedDocumentTypeCategoryDetails)
                ) && 
                (
                    this.Requirement == input.Requirement ||
                    this.Requirement.Equals(input.Requirement)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FieldTitle != null)
                {
                    hashCode = (hashCode * 59) + this.FieldTitle.GetHashCode();
                }
                if (this.FieldSlug != null)
                {
                    hashCode = (hashCode * 59) + this.FieldSlug.GetHashCode();
                }
                if (this.SupportedDocumentTypeCategoryDetails != null)
                {
                    hashCode = (hashCode * 59) + this.SupportedDocumentTypeCategoryDetails.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Requirement.GetHashCode();
                return hashCode;
            }
        }

    }

}
