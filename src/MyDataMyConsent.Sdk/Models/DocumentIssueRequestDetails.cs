/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = MyDataMyConsent.Sdk.Client.OpenAPIDateConverter;

namespace MyDataMyConsent.Sdk.Models
{
    /// <summary>
    /// Document issue request details.
    /// </summary>
    [DataContract(Name = "DocumentIssueRequestDetails")]
    public partial class DocumentIssueRequestDetails : IEquatable<DocumentIssueRequestDetails>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentIssueRequestDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DocumentIssueRequestDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentIssueRequestDetails" /> class.
        /// </summary>
        /// <param name="documentTypeId">documentTypeId (required).</param>
        /// <param name="documentTypeName">documentTypeName (required).</param>
        /// <param name="documentIdentifier">documentIdentifier (required).</param>
        /// <param name="description">description (required).</param>
        /// <param name="receiver">receiver (required).</param>
        /// <param name="expiresAtUtc">expiresAtUtc.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="createdAtUtc">createdAtUtc (required).</param>
        public DocumentIssueRequestDetails(Guid documentTypeId = default(Guid), string documentTypeName = default(string), string documentIdentifier = default(string), string description = default(string), Object receiver = default(Object), DateTime? expiresAtUtc = default(DateTime?), Object metadata = default(Object), DateTime createdAtUtc = default(DateTime))
        {
            this.DocumentTypeId = documentTypeId;
            this.DocumentTypeName = documentTypeName;
            this.DocumentIdentifier = documentIdentifier;
            this.Description = description;
            // to ensure "receiver" is required (not null)
            if (receiver == null) {
                throw new ArgumentNullException("receiver is a required property for DocumentIssueRequestDetails and cannot be null");
            }
            this.Receiver = receiver;
            this.CreatedAtUtc = createdAtUtc;
            this.ExpiresAtUtc = expiresAtUtc;
            this.Metadata = metadata;
        }

        /// <summary>
        /// Gets or Sets DocumentTypeId
        /// </summary>
        [DataMember(Name = "documentTypeId", IsRequired = true, EmitDefaultValue = false)]
        public Guid DocumentTypeId { get; set; }

        /// <summary>
        /// Gets or Sets DocumentTypeName
        /// </summary>
        [DataMember(Name = "documentTypeName", IsRequired = true, EmitDefaultValue = false)]
        public string DocumentTypeName { get; set; }

        /// <summary>
        /// Gets or Sets DocumentIdentifier
        /// </summary>
        [DataMember(Name = "documentIdentifier", IsRequired = true, EmitDefaultValue = false)]
        public string DocumentIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Receiver
        /// </summary>
        [DataMember(Name = "receiver", IsRequired = true, EmitDefaultValue = true)]
        public Object Receiver { get; set; }

        /// <summary>
        /// Gets or Sets ExpiresAtUtc
        /// </summary>
        [DataMember(Name = "expiresAtUtc", EmitDefaultValue = true)]
        public DateTime? ExpiresAtUtc { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", EmitDefaultValue = true)]
        public Object Metadata { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAtUtc
        /// </summary>
        [DataMember(Name = "createdAtUtc", IsRequired = true, EmitDefaultValue = false)]
        public DateTime CreatedAtUtc { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DocumentIssueRequestDetails {\n");
            sb.Append("  DocumentTypeId: ").Append(DocumentTypeId).Append("\n");
            sb.Append("  DocumentTypeName: ").Append(DocumentTypeName).Append("\n");
            sb.Append("  DocumentIdentifier: ").Append(DocumentIdentifier).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Receiver: ").Append(Receiver).Append("\n");
            sb.Append("  ExpiresAtUtc: ").Append(ExpiresAtUtc).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  CreatedAtUtc: ").Append(CreatedAtUtc).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentIssueRequestDetails);
        }

        /// <summary>
        /// Returns true if DocumentIssueRequestDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentIssueRequestDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentIssueRequestDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DocumentTypeId == input.DocumentTypeId ||
                    (this.DocumentTypeId != null &&
                    this.DocumentTypeId.Equals(input.DocumentTypeId))
                ) && 
                (
                    this.DocumentTypeName == input.DocumentTypeName ||
                    (this.DocumentTypeName != null &&
                    this.DocumentTypeName.Equals(input.DocumentTypeName))
                ) && 
                (
                    this.DocumentIdentifier == input.DocumentIdentifier ||
                    (this.DocumentIdentifier != null &&
                    this.DocumentIdentifier.Equals(input.DocumentIdentifier))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Receiver == input.Receiver ||
                    (this.Receiver != null &&
                    this.Receiver.Equals(input.Receiver))
                ) && 
                (
                    this.ExpiresAtUtc == input.ExpiresAtUtc ||
                    (this.ExpiresAtUtc != null &&
                    this.ExpiresAtUtc.Equals(input.ExpiresAtUtc))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.CreatedAtUtc == input.CreatedAtUtc ||
                    (this.CreatedAtUtc != null &&
                    this.CreatedAtUtc.Equals(input.CreatedAtUtc))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DocumentTypeId != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentTypeId.GetHashCode();
                }
                if (this.DocumentTypeName != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentTypeName.GetHashCode();
                }
                if (this.DocumentIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentIdentifier.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Receiver != null)
                {
                    hashCode = (hashCode * 59) + this.Receiver.GetHashCode();
                }
                if (this.ExpiresAtUtc != null)
                {
                    hashCode = (hashCode * 59) + this.ExpiresAtUtc.GetHashCode();
                }
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                if (this.CreatedAtUtc != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAtUtc.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
