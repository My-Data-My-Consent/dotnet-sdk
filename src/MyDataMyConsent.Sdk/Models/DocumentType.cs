/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = MyDataMyConsent.Sdk.Client.OpenAPIDateConverter;

namespace MyDataMyConsent.Sdk.Models
{
    /// <summary>
    /// Issuable Document Type details.
    /// </summary>
    [DataContract(Name = "DocumentType")]
    public partial class DocumentType : IEquatable<DocumentType>
    {

        /// <summary>
        /// Gets or Sets CategoryType
        /// </summary>
        [DataMember(Name = "categoryType", IsRequired = true, EmitDefaultValue = false)]
        public DocumentCategoryType CategoryType { get; set; }

        /// <summary>
        /// Gets or Sets SubCategoryType
        /// </summary>
        [DataMember(Name = "subCategoryType", IsRequired = true, EmitDefaultValue = false)]
        public DocumentSubCategoryType SubCategoryType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentType" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DocumentType() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentType" /> class.
        /// </summary>
        /// <param name="id">Document Type Identifier. (required).</param>
        /// <param name="categoryType">categoryType (required).</param>
        /// <param name="subCategoryType">subCategoryType (required).</param>
        /// <param name="name">Document Type Name. eg: Driving License. (required).</param>
        /// <param name="slug">Document Type Unique Slug. eg: \&quot;in.gov.gj.transport.dl\&quot;. (required).</param>
        /// <param name="description">Document Type description. eg: Gujarat State Driving License..</param>
        /// <param name="logoUrl">Logo URL of document type. (required).</param>
        /// <param name="searchServiceName">Document search repository service name..</param>
        /// <param name="repositoryServiceName">Document repository service name..</param>
        /// <param name="supportedEntityTypes">Supported entity types. eg: Individual, Organization. (required).</param>
        /// <param name="addedBy">Name of the document type creator. (required).</param>
        /// <param name="payableAmount">Payable amount if document is chargeable. eg: 10.25. (required).</param>
        /// <param name="payableAmountCurrency">Payable amount currency. eg: INR, USD etc.,..</param>
        /// <param name="approvedAtUtc">DateTime of approval in UTC timezone..</param>
        public DocumentType(Guid id = default(Guid), DocumentCategoryType categoryType = default(DocumentCategoryType), DocumentSubCategoryType subCategoryType = default(DocumentSubCategoryType), string name = default(string), string slug = default(string), string? description = default(string?), string logoUrl = default(string), string? searchServiceName = default(string?), string? repositoryServiceName = default(string?), List<SupportedEntityType> supportedEntityTypes = default(List<SupportedEntityType>), string addedBy = default(string), double payableAmount = default(double), string? payableAmountCurrency = default(string?), DateTime? approvedAtUtc = default(DateTime?))
        {
            this.Id = id;
            this.CategoryType = categoryType;
            this.SubCategoryType = subCategoryType;
            this.Name = name;
            this.Slug = slug;
            this.LogoUrl = logoUrl;
            // to ensure "supportedEntityTypes" is required (not null)
            if (supportedEntityTypes == null) {
                throw new ArgumentNullException("supportedEntityTypes is a required property for DocumentType and cannot be null");
            }
            this.SupportedEntityTypes = supportedEntityTypes;
            this.AddedBy = addedBy;
            this.PayableAmount = payableAmount;
            this.Description = description;
            this.SearchServiceName = searchServiceName;
            this.RepositoryServiceName = repositoryServiceName;
            this.PayableAmountCurrency = payableAmountCurrency;
            this.ApprovedAtUtc = approvedAtUtc;
        }

        /// <summary>
        /// Document Type Identifier.
        /// </summary>
        /// <value>Document Type Identifier.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Document Type Name. eg: Driving License.
        /// </summary>
        /// <value>Document Type Name. eg: Driving License.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Document Type Unique Slug. eg: \&quot;in.gov.gj.transport.dl\&quot;.
        /// </summary>
        /// <value>Document Type Unique Slug. eg: \&quot;in.gov.gj.transport.dl\&quot;.</value>
        [DataMember(Name = "slug", IsRequired = true, EmitDefaultValue = false)]
        public string Slug { get; set; }

        /// <summary>
        /// Document Type description. eg: Gujarat State Driving License.
        /// </summary>
        /// <value>Document Type description. eg: Gujarat State Driving License.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string? Description { get; set; }

        /// <summary>
        /// Logo URL of document type.
        /// </summary>
        /// <value>Logo URL of document type.</value>
        [DataMember(Name = "logoUrl", IsRequired = true, EmitDefaultValue = false)]
        public string LogoUrl { get; set; }

        /// <summary>
        /// Document search repository service name.
        /// </summary>
        /// <value>Document search repository service name.</value>
        [DataMember(Name = "searchServiceName", EmitDefaultValue = true)]
        public string? SearchServiceName { get; set; }

        /// <summary>
        /// Document repository service name.
        /// </summary>
        /// <value>Document repository service name.</value>
        [DataMember(Name = "repositoryServiceName", EmitDefaultValue = true)]
        public string? RepositoryServiceName { get; set; }

        /// <summary>
        /// Supported entity types. eg: Individual, Organization.
        /// </summary>
        /// <value>Supported entity types. eg: Individual, Organization.</value>
        [DataMember(Name = "supportedEntityTypes", IsRequired = true, EmitDefaultValue = false)]
        public List<SupportedEntityType> SupportedEntityTypes { get; set; }

        /// <summary>
        /// Name of the document type creator.
        /// </summary>
        /// <value>Name of the document type creator.</value>
        [DataMember(Name = "addedBy", IsRequired = true, EmitDefaultValue = false)]
        public string AddedBy { get; set; }

        /// <summary>
        /// Payable amount if document is chargeable. eg: 10.25.
        /// </summary>
        /// <value>Payable amount if document is chargeable. eg: 10.25.</value>
        [DataMember(Name = "payableAmount", IsRequired = true, EmitDefaultValue = false)]
        public double PayableAmount { get; set; }

        /// <summary>
        /// Payable amount currency. eg: INR, USD etc.,.
        /// </summary>
        /// <value>Payable amount currency. eg: INR, USD etc.,.</value>
        [DataMember(Name = "payableAmountCurrency", EmitDefaultValue = true)]
        public string? PayableAmountCurrency { get; set; }

        /// <summary>
        /// DateTime of approval in UTC timezone.
        /// </summary>
        /// <value>DateTime of approval in UTC timezone.</value>
        [DataMember(Name = "approvedAtUtc", EmitDefaultValue = true)]
        public DateTime? ApprovedAtUtc { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DocumentType {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CategoryType: ").Append(CategoryType).Append("\n");
            sb.Append("  SubCategoryType: ").Append(SubCategoryType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Slug: ").Append(Slug).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  LogoUrl: ").Append(LogoUrl).Append("\n");
            sb.Append("  SearchServiceName: ").Append(SearchServiceName).Append("\n");
            sb.Append("  RepositoryServiceName: ").Append(RepositoryServiceName).Append("\n");
            sb.Append("  SupportedEntityTypes: ").Append(SupportedEntityTypes).Append("\n");
            sb.Append("  AddedBy: ").Append(AddedBy).Append("\n");
            sb.Append("  PayableAmount: ").Append(PayableAmount).Append("\n");
            sb.Append("  PayableAmountCurrency: ").Append(PayableAmountCurrency).Append("\n");
            sb.Append("  ApprovedAtUtc: ").Append(ApprovedAtUtc).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentType);
        }

        /// <summary>
        /// Returns true if DocumentType instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentType input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CategoryType == input.CategoryType ||
                    this.CategoryType.Equals(input.CategoryType)
                ) && 
                (
                    this.SubCategoryType == input.SubCategoryType ||
                    this.SubCategoryType.Equals(input.SubCategoryType)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Slug == input.Slug ||
                    (this.Slug != null &&
                    this.Slug.Equals(input.Slug))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.LogoUrl == input.LogoUrl ||
                    (this.LogoUrl != null &&
                    this.LogoUrl.Equals(input.LogoUrl))
                ) && 
                (
                    this.SearchServiceName == input.SearchServiceName ||
                    (this.SearchServiceName != null &&
                    this.SearchServiceName.Equals(input.SearchServiceName))
                ) && 
                (
                    this.RepositoryServiceName == input.RepositoryServiceName ||
                    (this.RepositoryServiceName != null &&
                    this.RepositoryServiceName.Equals(input.RepositoryServiceName))
                ) && 
                (
                    this.SupportedEntityTypes == input.SupportedEntityTypes ||
                    this.SupportedEntityTypes != null &&
                    input.SupportedEntityTypes != null &&
                    this.SupportedEntityTypes.SequenceEqual(input.SupportedEntityTypes)
                ) && 
                (
                    this.AddedBy == input.AddedBy ||
                    (this.AddedBy != null &&
                    this.AddedBy.Equals(input.AddedBy))
                ) && 
                (
                    this.PayableAmount == input.PayableAmount ||
                    this.PayableAmount.Equals(input.PayableAmount)
                ) && 
                (
                    this.PayableAmountCurrency == input.PayableAmountCurrency ||
                    (this.PayableAmountCurrency != null &&
                    this.PayableAmountCurrency.Equals(input.PayableAmountCurrency))
                ) && 
                (
                    this.ApprovedAtUtc == input.ApprovedAtUtc ||
                    (this.ApprovedAtUtc != null &&
                    this.ApprovedAtUtc.Equals(input.ApprovedAtUtc))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CategoryType.GetHashCode();
                hashCode = (hashCode * 59) + this.SubCategoryType.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Slug != null)
                {
                    hashCode = (hashCode * 59) + this.Slug.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.LogoUrl != null)
                {
                    hashCode = (hashCode * 59) + this.LogoUrl.GetHashCode();
                }
                if (this.SearchServiceName != null)
                {
                    hashCode = (hashCode * 59) + this.SearchServiceName.GetHashCode();
                }
                if (this.RepositoryServiceName != null)
                {
                    hashCode = (hashCode * 59) + this.RepositoryServiceName.GetHashCode();
                }
                if (this.SupportedEntityTypes != null)
                {
                    hashCode = (hashCode * 59) + this.SupportedEntityTypes.GetHashCode();
                }
                if (this.AddedBy != null)
                {
                    hashCode = (hashCode * 59) + this.AddedBy.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PayableAmount.GetHashCode();
                if (this.PayableAmountCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.PayableAmountCurrency.GetHashCode();
                }
                if (this.ApprovedAtUtc != null)
                {
                    hashCode = (hashCode * 59) + this.ApprovedAtUtc.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
