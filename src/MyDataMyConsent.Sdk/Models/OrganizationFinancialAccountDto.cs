/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = MyDataMyConsent.Sdk.Client.OpenAPIDateConverter;

namespace MyDataMyConsent.Sdk.Models
{
    /// <summary>
    /// OrganizationFinancialAccountDto
    /// </summary>
    [DataContract(Name = "OrganizationFinancialAccountDto")]
    public partial class OrganizationFinancialAccountDto : IEquatable<OrganizationFinancialAccountDto>
    {

        /// <summary>
        /// Gets or Sets BankAccountType
        /// </summary>
        [DataMember(Name = "bankAccountType", EmitDefaultValue = false)]
        public BankAccountType? BankAccountType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationFinancialAccountDto" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="organizationId">organizationId.</param>
        /// <param name="organizationName">organizationName.</param>
        /// <param name="beneficiaryName">beneficiaryName.</param>
        /// <param name="accountNumber">accountNumber.</param>
        /// <param name="routingNumber">routingNumber.</param>
        /// <param name="isPrimary">isPrimary.</param>
        /// <param name="isVerified">isVerified.</param>
        /// <param name="logoUrl">logoUrl.</param>
        /// <param name="bankName">bankName.</param>
        /// <param name="bankAccountType">bankAccountType.</param>
        /// <param name="bankAccountProofUrl">bankAccountProofUrl.</param>
        public OrganizationFinancialAccountDto(Guid id = default(Guid), Guid organizationId = default(Guid), string organizationName = default(string), string beneficiaryName = default(string), string accountNumber = default(string), string routingNumber = default(string), bool isPrimary = default(bool), bool isVerified = default(bool), string logoUrl = default(string), string bankName = default(string), BankAccountType? bankAccountType = default(BankAccountType?), string bankAccountProofUrl = default(string))
        {
            this.Id = id;
            this.OrganizationId = organizationId;
            this.OrganizationName = organizationName;
            this.BeneficiaryName = beneficiaryName;
            this.AccountNumber = accountNumber;
            this.RoutingNumber = routingNumber;
            this.IsPrimary = isPrimary;
            this.IsVerified = isVerified;
            this.LogoUrl = logoUrl;
            this.BankName = bankName;
            this.BankAccountType = bankAccountType;
            this.BankAccountProofUrl = bankAccountProofUrl;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationId
        /// </summary>
        [DataMember(Name = "organizationId", EmitDefaultValue = false)]
        public Guid OrganizationId { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationName
        /// </summary>
        [DataMember(Name = "organizationName", EmitDefaultValue = true)]
        public string OrganizationName { get; set; }

        /// <summary>
        /// Gets or Sets BeneficiaryName
        /// </summary>
        [DataMember(Name = "beneficiaryName", EmitDefaultValue = true)]
        public string BeneficiaryName { get; set; }

        /// <summary>
        /// Gets or Sets AccountNumber
        /// </summary>
        [DataMember(Name = "accountNumber", EmitDefaultValue = true)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets RoutingNumber
        /// </summary>
        [DataMember(Name = "routingNumber", EmitDefaultValue = true)]
        public string RoutingNumber { get; set; }

        /// <summary>
        /// Gets or Sets IsPrimary
        /// </summary>
        [DataMember(Name = "isPrimary", EmitDefaultValue = true)]
        public bool IsPrimary { get; set; }

        /// <summary>
        /// Gets or Sets IsVerified
        /// </summary>
        [DataMember(Name = "isVerified", EmitDefaultValue = true)]
        public bool IsVerified { get; set; }

        /// <summary>
        /// Gets or Sets LogoUrl
        /// </summary>
        [DataMember(Name = "logoUrl", EmitDefaultValue = true)]
        public string LogoUrl { get; set; }

        /// <summary>
        /// Gets or Sets BankName
        /// </summary>
        [DataMember(Name = "bankName", EmitDefaultValue = true)]
        public string BankName { get; set; }

        /// <summary>
        /// Gets or Sets BankAccountProofUrl
        /// </summary>
        [DataMember(Name = "bankAccountProofUrl", EmitDefaultValue = true)]
        public string BankAccountProofUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrganizationFinancialAccountDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  OrganizationName: ").Append(OrganizationName).Append("\n");
            sb.Append("  BeneficiaryName: ").Append(BeneficiaryName).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  RoutingNumber: ").Append(RoutingNumber).Append("\n");
            sb.Append("  IsPrimary: ").Append(IsPrimary).Append("\n");
            sb.Append("  IsVerified: ").Append(IsVerified).Append("\n");
            sb.Append("  LogoUrl: ").Append(LogoUrl).Append("\n");
            sb.Append("  BankName: ").Append(BankName).Append("\n");
            sb.Append("  BankAccountType: ").Append(BankAccountType).Append("\n");
            sb.Append("  BankAccountProofUrl: ").Append(BankAccountProofUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrganizationFinancialAccountDto);
        }

        /// <summary>
        /// Returns true if OrganizationFinancialAccountDto instances are equal
        /// </summary>
        /// <param name="input">Instance of OrganizationFinancialAccountDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrganizationFinancialAccountDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.OrganizationId == input.OrganizationId ||
                    (this.OrganizationId != null &&
                    this.OrganizationId.Equals(input.OrganizationId))
                ) && 
                (
                    this.OrganizationName == input.OrganizationName ||
                    (this.OrganizationName != null &&
                    this.OrganizationName.Equals(input.OrganizationName))
                ) && 
                (
                    this.BeneficiaryName == input.BeneficiaryName ||
                    (this.BeneficiaryName != null &&
                    this.BeneficiaryName.Equals(input.BeneficiaryName))
                ) && 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                ) && 
                (
                    this.RoutingNumber == input.RoutingNumber ||
                    (this.RoutingNumber != null &&
                    this.RoutingNumber.Equals(input.RoutingNumber))
                ) && 
                (
                    this.IsPrimary == input.IsPrimary ||
                    this.IsPrimary.Equals(input.IsPrimary)
                ) && 
                (
                    this.IsVerified == input.IsVerified ||
                    this.IsVerified.Equals(input.IsVerified)
                ) && 
                (
                    this.LogoUrl == input.LogoUrl ||
                    (this.LogoUrl != null &&
                    this.LogoUrl.Equals(input.LogoUrl))
                ) && 
                (
                    this.BankName == input.BankName ||
                    (this.BankName != null &&
                    this.BankName.Equals(input.BankName))
                ) && 
                (
                    this.BankAccountType == input.BankAccountType ||
                    this.BankAccountType.Equals(input.BankAccountType)
                ) && 
                (
                    this.BankAccountProofUrl == input.BankAccountProofUrl ||
                    (this.BankAccountProofUrl != null &&
                    this.BankAccountProofUrl.Equals(input.BankAccountProofUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.OrganizationId != null)
                {
                    hashCode = (hashCode * 59) + this.OrganizationId.GetHashCode();
                }
                if (this.OrganizationName != null)
                {
                    hashCode = (hashCode * 59) + this.OrganizationName.GetHashCode();
                }
                if (this.BeneficiaryName != null)
                {
                    hashCode = (hashCode * 59) + this.BeneficiaryName.GetHashCode();
                }
                if (this.AccountNumber != null)
                {
                    hashCode = (hashCode * 59) + this.AccountNumber.GetHashCode();
                }
                if (this.RoutingNumber != null)
                {
                    hashCode = (hashCode * 59) + this.RoutingNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsPrimary.GetHashCode();
                hashCode = (hashCode * 59) + this.IsVerified.GetHashCode();
                if (this.LogoUrl != null)
                {
                    hashCode = (hashCode * 59) + this.LogoUrl.GetHashCode();
                }
                if (this.BankName != null)
                {
                    hashCode = (hashCode * 59) + this.BankName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BankAccountType.GetHashCode();
                if (this.BankAccountProofUrl != null)
                {
                    hashCode = (hashCode * 59) + this.BankAccountProofUrl.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
