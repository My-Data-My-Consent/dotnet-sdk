/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = MyDataMyConsent.Sdk.Client.OpenAPIDateConverter;

namespace MyDataMyConsent.Sdk.Models
{
    /// <summary>
    /// DataProvider
    /// </summary>
    [DataContract(Name = "DataProvider")]
    public partial class DataProvider : IEquatable<DataProvider>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DataProvider" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DataProvider() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DataProvider" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="category">category (required).</param>
        /// <param name="logoUrl">logoUrl.</param>
        /// <param name="website">website.</param>
        /// <param name="supportEmail">supportEmail.</param>
        /// <param name="helpLineNumber">helpLineNumber.</param>
        /// <param name="privacyPolicy">privacyPolicy.</param>
        /// <param name="termOfService">termOfService.</param>
        /// <param name="dataProtectionOfficer">dataProtectionOfficer.</param>
        /// <param name="supportedDocumentTypes">supportedDocumentTypes (required).</param>
        /// <param name="supportedAccountTypes">supportedAccountTypes.</param>
        public DataProvider(string id = default(string), string name = default(string), string category = default(string), string? logoUrl = default(string?), string? website = default(string?), string? supportEmail = default(string?), string? helpLineNumber = default(string?), string? privacyPolicy = default(string?), string? termOfService = default(string?), DataProtectionOfficer dataProtectionOfficer = default(DataProtectionOfficer), List<string> supportedDocumentTypes = default(List<string>), List<string> supportedAccountTypes = default(List<string>))
        {
            this.Id = id;
            this.Name = name;
            this.Category = category;
            // to ensure "supportedDocumentTypes" is required (not null)
            if (supportedDocumentTypes == null) {
                throw new ArgumentNullException("supportedDocumentTypes is a required property for DataProvider and cannot be null");
            }
            this.SupportedDocumentTypes = supportedDocumentTypes;
            this.LogoUrl = logoUrl;
            this.Website = website;
            this.SupportEmail = supportEmail;
            this.HelpLineNumber = helpLineNumber;
            this.PrivacyPolicy = privacyPolicy;
            this.TermOfService = termOfService;
            this.DataProtectionOfficer = dataProtectionOfficer;
            this.SupportedAccountTypes = supportedAccountTypes;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name = "category", IsRequired = true, EmitDefaultValue = false)]
        public string Category { get; set; }

        /// <summary>
        /// Gets or Sets LogoUrl
        /// </summary>
        [DataMember(Name = "logoUrl", EmitDefaultValue = true)]
        public string? LogoUrl { get; set; }

        /// <summary>
        /// Gets or Sets Website
        /// </summary>
        [DataMember(Name = "website", EmitDefaultValue = true)]
        public string? Website { get; set; }

        /// <summary>
        /// Gets or Sets SupportEmail
        /// </summary>
        [DataMember(Name = "supportEmail", EmitDefaultValue = true)]
        public string? SupportEmail { get; set; }

        /// <summary>
        /// Gets or Sets HelpLineNumber
        /// </summary>
        [DataMember(Name = "helpLineNumber", EmitDefaultValue = true)]
        public string? HelpLineNumber { get; set; }

        /// <summary>
        /// Gets or Sets PrivacyPolicy
        /// </summary>
        [DataMember(Name = "privacyPolicy", EmitDefaultValue = true)]
        public string? PrivacyPolicy { get; set; }

        /// <summary>
        /// Gets or Sets TermOfService
        /// </summary>
        [DataMember(Name = "termOfService", EmitDefaultValue = true)]
        public string? TermOfService { get; set; }

        /// <summary>
        /// Gets or Sets DataProtectionOfficer
        /// </summary>
        [DataMember(Name = "dataProtectionOfficer", EmitDefaultValue = false)]
        public DataProtectionOfficer DataProtectionOfficer { get; set; }

        /// <summary>
        /// Gets or Sets SupportedDocumentTypes
        /// </summary>
        [DataMember(Name = "supportedDocumentTypes", IsRequired = true, EmitDefaultValue = false)]
        public List<string> SupportedDocumentTypes { get; set; }

        /// <summary>
        /// Gets or Sets SupportedAccountTypes
        /// </summary>
        [DataMember(Name = "supportedAccountTypes", EmitDefaultValue = true)]
        public List<string> SupportedAccountTypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DataProvider {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  LogoUrl: ").Append(LogoUrl).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("  SupportEmail: ").Append(SupportEmail).Append("\n");
            sb.Append("  HelpLineNumber: ").Append(HelpLineNumber).Append("\n");
            sb.Append("  PrivacyPolicy: ").Append(PrivacyPolicy).Append("\n");
            sb.Append("  TermOfService: ").Append(TermOfService).Append("\n");
            sb.Append("  DataProtectionOfficer: ").Append(DataProtectionOfficer).Append("\n");
            sb.Append("  SupportedDocumentTypes: ").Append(SupportedDocumentTypes).Append("\n");
            sb.Append("  SupportedAccountTypes: ").Append(SupportedAccountTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DataProvider);
        }

        /// <summary>
        /// Returns true if DataProvider instances are equal
        /// </summary>
        /// <param name="input">Instance of DataProvider to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataProvider input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.LogoUrl == input.LogoUrl ||
                    (this.LogoUrl != null &&
                    this.LogoUrl.Equals(input.LogoUrl))
                ) && 
                (
                    this.Website == input.Website ||
                    (this.Website != null &&
                    this.Website.Equals(input.Website))
                ) && 
                (
                    this.SupportEmail == input.SupportEmail ||
                    (this.SupportEmail != null &&
                    this.SupportEmail.Equals(input.SupportEmail))
                ) && 
                (
                    this.HelpLineNumber == input.HelpLineNumber ||
                    (this.HelpLineNumber != null &&
                    this.HelpLineNumber.Equals(input.HelpLineNumber))
                ) && 
                (
                    this.PrivacyPolicy == input.PrivacyPolicy ||
                    (this.PrivacyPolicy != null &&
                    this.PrivacyPolicy.Equals(input.PrivacyPolicy))
                ) && 
                (
                    this.TermOfService == input.TermOfService ||
                    (this.TermOfService != null &&
                    this.TermOfService.Equals(input.TermOfService))
                ) && 
                (
                    this.DataProtectionOfficer == input.DataProtectionOfficer ||
                    (this.DataProtectionOfficer != null &&
                    this.DataProtectionOfficer.Equals(input.DataProtectionOfficer))
                ) && 
                (
                    this.SupportedDocumentTypes == input.SupportedDocumentTypes ||
                    this.SupportedDocumentTypes != null &&
                    input.SupportedDocumentTypes != null &&
                    this.SupportedDocumentTypes.SequenceEqual(input.SupportedDocumentTypes)
                ) && 
                (
                    this.SupportedAccountTypes == input.SupportedAccountTypes ||
                    this.SupportedAccountTypes != null &&
                    input.SupportedAccountTypes != null &&
                    this.SupportedAccountTypes.SequenceEqual(input.SupportedAccountTypes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Category != null)
                {
                    hashCode = (hashCode * 59) + this.Category.GetHashCode();
                }
                if (this.LogoUrl != null)
                {
                    hashCode = (hashCode * 59) + this.LogoUrl.GetHashCode();
                }
                if (this.Website != null)
                {
                    hashCode = (hashCode * 59) + this.Website.GetHashCode();
                }
                if (this.SupportEmail != null)
                {
                    hashCode = (hashCode * 59) + this.SupportEmail.GetHashCode();
                }
                if (this.HelpLineNumber != null)
                {
                    hashCode = (hashCode * 59) + this.HelpLineNumber.GetHashCode();
                }
                if (this.PrivacyPolicy != null)
                {
                    hashCode = (hashCode * 59) + this.PrivacyPolicy.GetHashCode();
                }
                if (this.TermOfService != null)
                {
                    hashCode = (hashCode * 59) + this.TermOfService.GetHashCode();
                }
                if (this.DataProtectionOfficer != null)
                {
                    hashCode = (hashCode * 59) + this.DataProtectionOfficer.GetHashCode();
                }
                if (this.SupportedDocumentTypes != null)
                {
                    hashCode = (hashCode * 59) + this.SupportedDocumentTypes.GetHashCode();
                }
                if (this.SupportedAccountTypes != null)
                {
                    hashCode = (hashCode * 59) + this.SupportedAccountTypes.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
