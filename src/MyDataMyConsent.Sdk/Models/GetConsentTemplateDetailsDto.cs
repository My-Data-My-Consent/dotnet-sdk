/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = MyDataMyConsent.Sdk.Client.OpenAPIDateConverter;

namespace MyDataMyConsent.Sdk.Models
{
    /// <summary>
    /// GetConsentTemplateDetailsDto
    /// </summary>
    [DataContract(Name = "GetConsentTemplateDetailsDto")]
    public partial class GetConsentTemplateDetailsDto : IEquatable<GetConsentTemplateDetailsDto>
    {

        /// <summary>
        /// Gets or Sets FetchType
        /// </summary>
        [DataMember(Name = "fetchType", EmitDefaultValue = false)]
        public FetchTypes? FetchType { get; set; }

        /// <summary>
        /// Gets or Sets TemplateType
        /// </summary>
        [DataMember(Name = "templateType", EmitDefaultValue = false)]
        public ConsentTemplateTypes? TemplateType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetConsentTemplateDetailsDto" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="description">description.</param>
        /// <param name="consentPurpose">consentPurpose.</param>
        /// <param name="collectables">collectables.</param>
        /// <param name="fetchType">fetchType.</param>
        /// <param name="shortId">shortId.</param>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="createdAtUtc">createdAtUtc.</param>
        /// <param name="status">status.</param>
        /// <param name="templateType">templateType.</param>
        /// <param name="dataLife">dataLife.</param>
        /// <param name="requestLife">requestLife.</param>
        /// <param name="frequency">frequency.</param>
        /// <param name="identity">identity.</param>
        /// <param name="documents">documents.</param>
        /// <param name="financials">financials.</param>
        /// <param name="healthRecords">healthRecords.</param>
        /// <param name="approvedBy">approvedBy.</param>
        /// <param name="approvedAtUtc">approvedAtUtc.</param>
        public GetConsentTemplateDetailsDto(Guid id = default(Guid), string? name = default(string?), string? description = default(string?), string? consentPurpose = default(string?), List<CollectibleTypes> collectables = default(List<CollectibleTypes>), FetchTypes? fetchType = default(FetchTypes?), string? shortId = default(string?), string? createdBy = default(string?), DateTime createdAtUtc = default(DateTime), string? status = default(string?), ConsentTemplateTypes? templateType = default(ConsentTemplateTypes?), Life dataLife = default(Life), Life requestLife = default(Life), Life frequency = default(Life), List<IdentitySupportedFields> identity = default(List<IdentitySupportedFields>), List<Document> documents = default(List<Document>), List<Financial> financials = default(List<Financial>), List<Object> healthRecords = default(List<Object>), Guid? approvedBy = default(Guid?), DateTime? approvedAtUtc = default(DateTime?))
        {
            this.Id = id;
            this.Name = name;
            this.Description = description;
            this.ConsentPurpose = consentPurpose;
            this.Collectables = collectables;
            this.FetchType = fetchType;
            this.ShortId = shortId;
            this.CreatedBy = createdBy;
            this.CreatedAtUtc = createdAtUtc;
            this.Status = status;
            this.TemplateType = templateType;
            this.DataLife = dataLife;
            this.RequestLife = requestLife;
            this.Frequency = frequency;
            this.Identity = identity;
            this.Documents = documents;
            this.Financials = financials;
            this.HealthRecords = healthRecords;
            this.ApprovedBy = approvedBy;
            this.ApprovedAtUtc = approvedAtUtc;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string? Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string? Description { get; set; }

        /// <summary>
        /// Gets or Sets ConsentPurpose
        /// </summary>
        [DataMember(Name = "consentPurpose", EmitDefaultValue = true)]
        public string? ConsentPurpose { get; set; }

        /// <summary>
        /// Gets or Sets Collectables
        /// </summary>
        [DataMember(Name = "collectables", EmitDefaultValue = true)]
        public List<CollectibleTypes> Collectables { get; set; }

        /// <summary>
        /// Gets or Sets ShortId
        /// </summary>
        [DataMember(Name = "shortId", EmitDefaultValue = true)]
        public string? ShortId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "createdBy", EmitDefaultValue = true)]
        public string? CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAtUtc
        /// </summary>
        [DataMember(Name = "createdAtUtc", EmitDefaultValue = false)]
        public DateTime CreatedAtUtc { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = true)]
        public string? Status { get; set; }

        /// <summary>
        /// Gets or Sets DataLife
        /// </summary>
        [DataMember(Name = "dataLife", EmitDefaultValue = false)]
        public Life DataLife { get; set; }

        /// <summary>
        /// Gets or Sets RequestLife
        /// </summary>
        [DataMember(Name = "requestLife", EmitDefaultValue = false)]
        public Life RequestLife { get; set; }

        /// <summary>
        /// Gets or Sets Frequency
        /// </summary>
        [DataMember(Name = "frequency", EmitDefaultValue = false)]
        public Life Frequency { get; set; }

        /// <summary>
        /// Gets or Sets Identity
        /// </summary>
        [DataMember(Name = "identity", EmitDefaultValue = true)]
        public List<IdentitySupportedFields> Identity { get; set; }

        /// <summary>
        /// Gets or Sets Documents
        /// </summary>
        [DataMember(Name = "documents", EmitDefaultValue = true)]
        public List<Document> Documents { get; set; }

        /// <summary>
        /// Gets or Sets Financials
        /// </summary>
        [DataMember(Name = "financials", EmitDefaultValue = true)]
        public List<Financial> Financials { get; set; }

        /// <summary>
        /// Gets or Sets HealthRecords
        /// </summary>
        [DataMember(Name = "healthRecords", EmitDefaultValue = true)]
        public List<Object> HealthRecords { get; set; }

        /// <summary>
        /// Gets or Sets ApprovedBy
        /// </summary>
        [DataMember(Name = "approvedBy", EmitDefaultValue = true)]
        public Guid? ApprovedBy { get; set; }

        /// <summary>
        /// Gets or Sets ApprovedAtUtc
        /// </summary>
        [DataMember(Name = "approvedAtUtc", EmitDefaultValue = true)]
        public DateTime? ApprovedAtUtc { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetConsentTemplateDetailsDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ConsentPurpose: ").Append(ConsentPurpose).Append("\n");
            sb.Append("  Collectables: ").Append(Collectables).Append("\n");
            sb.Append("  FetchType: ").Append(FetchType).Append("\n");
            sb.Append("  ShortId: ").Append(ShortId).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedAtUtc: ").Append(CreatedAtUtc).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TemplateType: ").Append(TemplateType).Append("\n");
            sb.Append("  DataLife: ").Append(DataLife).Append("\n");
            sb.Append("  RequestLife: ").Append(RequestLife).Append("\n");
            sb.Append("  Frequency: ").Append(Frequency).Append("\n");
            sb.Append("  Identity: ").Append(Identity).Append("\n");
            sb.Append("  Documents: ").Append(Documents).Append("\n");
            sb.Append("  Financials: ").Append(Financials).Append("\n");
            sb.Append("  HealthRecords: ").Append(HealthRecords).Append("\n");
            sb.Append("  ApprovedBy: ").Append(ApprovedBy).Append("\n");
            sb.Append("  ApprovedAtUtc: ").Append(ApprovedAtUtc).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetConsentTemplateDetailsDto);
        }

        /// <summary>
        /// Returns true if GetConsentTemplateDetailsDto instances are equal
        /// </summary>
        /// <param name="input">Instance of GetConsentTemplateDetailsDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetConsentTemplateDetailsDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ConsentPurpose == input.ConsentPurpose ||
                    (this.ConsentPurpose != null &&
                    this.ConsentPurpose.Equals(input.ConsentPurpose))
                ) && 
                (
                    this.Collectables == input.Collectables ||
                    this.Collectables != null &&
                    input.Collectables != null &&
                    this.Collectables.SequenceEqual(input.Collectables)
                ) && 
                (
                    this.FetchType == input.FetchType ||
                    this.FetchType.Equals(input.FetchType)
                ) && 
                (
                    this.ShortId == input.ShortId ||
                    (this.ShortId != null &&
                    this.ShortId.Equals(input.ShortId))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.CreatedAtUtc == input.CreatedAtUtc ||
                    (this.CreatedAtUtc != null &&
                    this.CreatedAtUtc.Equals(input.CreatedAtUtc))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.TemplateType == input.TemplateType ||
                    this.TemplateType.Equals(input.TemplateType)
                ) && 
                (
                    this.DataLife == input.DataLife ||
                    (this.DataLife != null &&
                    this.DataLife.Equals(input.DataLife))
                ) && 
                (
                    this.RequestLife == input.RequestLife ||
                    (this.RequestLife != null &&
                    this.RequestLife.Equals(input.RequestLife))
                ) && 
                (
                    this.Frequency == input.Frequency ||
                    (this.Frequency != null &&
                    this.Frequency.Equals(input.Frequency))
                ) && 
                (
                    this.Identity == input.Identity ||
                    this.Identity != null &&
                    input.Identity != null &&
                    this.Identity.SequenceEqual(input.Identity)
                ) && 
                (
                    this.Documents == input.Documents ||
                    this.Documents != null &&
                    input.Documents != null &&
                    this.Documents.SequenceEqual(input.Documents)
                ) && 
                (
                    this.Financials == input.Financials ||
                    this.Financials != null &&
                    input.Financials != null &&
                    this.Financials.SequenceEqual(input.Financials)
                ) && 
                (
                    this.HealthRecords == input.HealthRecords ||
                    this.HealthRecords != null &&
                    input.HealthRecords != null &&
                    this.HealthRecords.SequenceEqual(input.HealthRecords)
                ) && 
                (
                    this.ApprovedBy == input.ApprovedBy ||
                    (this.ApprovedBy != null &&
                    this.ApprovedBy.Equals(input.ApprovedBy))
                ) && 
                (
                    this.ApprovedAtUtc == input.ApprovedAtUtc ||
                    (this.ApprovedAtUtc != null &&
                    this.ApprovedAtUtc.Equals(input.ApprovedAtUtc))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.ConsentPurpose != null)
                {
                    hashCode = (hashCode * 59) + this.ConsentPurpose.GetHashCode();
                }
                if (this.Collectables != null)
                {
                    hashCode = (hashCode * 59) + this.Collectables.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FetchType.GetHashCode();
                if (this.ShortId != null)
                {
                    hashCode = (hashCode * 59) + this.ShortId.GetHashCode();
                }
                if (this.CreatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                }
                if (this.CreatedAtUtc != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAtUtc.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TemplateType.GetHashCode();
                if (this.DataLife != null)
                {
                    hashCode = (hashCode * 59) + this.DataLife.GetHashCode();
                }
                if (this.RequestLife != null)
                {
                    hashCode = (hashCode * 59) + this.RequestLife.GetHashCode();
                }
                if (this.Frequency != null)
                {
                    hashCode = (hashCode * 59) + this.Frequency.GetHashCode();
                }
                if (this.Identity != null)
                {
                    hashCode = (hashCode * 59) + this.Identity.GetHashCode();
                }
                if (this.Documents != null)
                {
                    hashCode = (hashCode * 59) + this.Documents.GetHashCode();
                }
                if (this.Financials != null)
                {
                    hashCode = (hashCode * 59) + this.Financials.GetHashCode();
                }
                if (this.HealthRecords != null)
                {
                    hashCode = (hashCode * 59) + this.HealthRecords.GetHashCode();
                }
                if (this.ApprovedBy != null)
                {
                    hashCode = (hashCode * 59) + this.ApprovedBy.GetHashCode();
                }
                if (this.ApprovedAtUtc != null)
                {
                    hashCode = (hashCode * 59) + this.ApprovedAtUtc.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
