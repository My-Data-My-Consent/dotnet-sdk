/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = MyDataMyConsent.Sdk.Client.OpenAPIDateConverter;

namespace MyDataMyConsent.Sdk.Models
{
    /// <summary>
    /// PushUriRequest
    /// </summary>
    [DataContract(Name = "PushUriRequest")]
    public partial class PushUriRequest : IEquatable<PushUriRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PushUriRequest" /> class.
        /// </summary>
        /// <param name="uriDetails">uriDetails.</param>
        /// <param name="ns2">ns2.</param>
        /// <param name="ver">ver.</param>
        /// <param name="ts">ts.</param>
        /// <param name="txn">txn.</param>
        /// <param name="orgId">orgId.</param>
        /// <param name="keyhash">keyhash.</param>
        public PushUriRequest(UriDetails uriDetails = default(UriDetails), string ns2 = default(string), string ver = default(string), string ts = default(string), string txn = default(string), string orgId = default(string), string keyhash = default(string))
        {
            this.UriDetails = uriDetails;
            this.Ns2 = ns2;
            this.Ver = ver;
            this.Ts = ts;
            this.Txn = txn;
            this.OrgId = orgId;
            this.Keyhash = keyhash;
        }

        /// <summary>
        /// Gets or Sets UriDetails
        /// </summary>
        [DataMember(Name = "uriDetails", EmitDefaultValue = false)]
        public UriDetails UriDetails { get; set; }

        /// <summary>
        /// Gets or Sets Ns2
        /// </summary>
        [DataMember(Name = "ns2", EmitDefaultValue = true)]
        public string Ns2 { get; set; }

        /// <summary>
        /// Gets or Sets Ver
        /// </summary>
        [DataMember(Name = "ver", EmitDefaultValue = true)]
        public string Ver { get; set; }

        /// <summary>
        /// Gets or Sets Ts
        /// </summary>
        [DataMember(Name = "ts", EmitDefaultValue = true)]
        public string Ts { get; set; }

        /// <summary>
        /// Gets or Sets Txn
        /// </summary>
        [DataMember(Name = "txn", EmitDefaultValue = true)]
        public string Txn { get; set; }

        /// <summary>
        /// Gets or Sets OrgId
        /// </summary>
        [DataMember(Name = "orgId", EmitDefaultValue = true)]
        public string OrgId { get; set; }

        /// <summary>
        /// Gets or Sets Keyhash
        /// </summary>
        [DataMember(Name = "keyhash", EmitDefaultValue = true)]
        public string Keyhash { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PushUriRequest {\n");
            sb.Append("  UriDetails: ").Append(UriDetails).Append("\n");
            sb.Append("  Ns2: ").Append(Ns2).Append("\n");
            sb.Append("  Ver: ").Append(Ver).Append("\n");
            sb.Append("  Ts: ").Append(Ts).Append("\n");
            sb.Append("  Txn: ").Append(Txn).Append("\n");
            sb.Append("  OrgId: ").Append(OrgId).Append("\n");
            sb.Append("  Keyhash: ").Append(Keyhash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PushUriRequest);
        }

        /// <summary>
        /// Returns true if PushUriRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PushUriRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PushUriRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UriDetails == input.UriDetails ||
                    (this.UriDetails != null &&
                    this.UriDetails.Equals(input.UriDetails))
                ) && 
                (
                    this.Ns2 == input.Ns2 ||
                    (this.Ns2 != null &&
                    this.Ns2.Equals(input.Ns2))
                ) && 
                (
                    this.Ver == input.Ver ||
                    (this.Ver != null &&
                    this.Ver.Equals(input.Ver))
                ) && 
                (
                    this.Ts == input.Ts ||
                    (this.Ts != null &&
                    this.Ts.Equals(input.Ts))
                ) && 
                (
                    this.Txn == input.Txn ||
                    (this.Txn != null &&
                    this.Txn.Equals(input.Txn))
                ) && 
                (
                    this.OrgId == input.OrgId ||
                    (this.OrgId != null &&
                    this.OrgId.Equals(input.OrgId))
                ) && 
                (
                    this.Keyhash == input.Keyhash ||
                    (this.Keyhash != null &&
                    this.Keyhash.Equals(input.Keyhash))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UriDetails != null)
                {
                    hashCode = (hashCode * 59) + this.UriDetails.GetHashCode();
                }
                if (this.Ns2 != null)
                {
                    hashCode = (hashCode * 59) + this.Ns2.GetHashCode();
                }
                if (this.Ver != null)
                {
                    hashCode = (hashCode * 59) + this.Ver.GetHashCode();
                }
                if (this.Ts != null)
                {
                    hashCode = (hashCode * 59) + this.Ts.GetHashCode();
                }
                if (this.Txn != null)
                {
                    hashCode = (hashCode * 59) + this.Txn.GetHashCode();
                }
                if (this.OrgId != null)
                {
                    hashCode = (hashCode * 59) + this.OrgId.GetHashCode();
                }
                if (this.Keyhash != null)
                {
                    hashCode = (hashCode * 59) + this.Keyhash.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
