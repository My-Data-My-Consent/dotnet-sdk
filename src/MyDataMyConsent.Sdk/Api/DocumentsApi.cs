/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using MyDataMyConsent.Sdk.Client;
using MyDataMyConsent.Sdk.Models;

namespace MyDataMyConsent.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDocumentsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get issued document.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document id.</param>
        /// <returns>IssuedDocument</returns>
        IssuedDocument GetIssuedDocumentById(Guid documentId);

        /// <summary>
        /// Get issued document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document id.</param>
        /// <returns>ApiResponse of IssuedDocument</returns>
        ApiResponse<IssuedDocument> GetIssuedDocumentByIdWithHttpInfo(Guid documentId);
        /// <summary>
        /// Get paginated list of issued documents of given document type.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type id.</param>
        /// <param name="fromDateTime">From DateTime. (optional)</param>
        /// <param name="toDateTime">To DateTime. (optional)</param>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <returns>IssuedDocumentPaginatedList</returns>
        IssuedDocumentPaginatedList GetIssuedDocuments(Guid documentTypeId, DateTime? fromDateTime = default(DateTime?), DateTime? toDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?));

        /// <summary>
        /// Get paginated list of issued documents of given document type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type id.</param>
        /// <param name="fromDateTime">From DateTime. (optional)</param>
        /// <param name="toDateTime">To DateTime. (optional)</param>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <returns>ApiResponse of IssuedDocumentPaginatedList</returns>
        ApiResponse<IssuedDocumentPaginatedList> GetIssuedDocumentsWithHttpInfo(Guid documentTypeId, DateTime? fromDateTime = default(DateTime?), DateTime? toDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?));
        /// <summary>
        /// Get registered document types.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <returns>DocumentTypePaginatedList</returns>
        DocumentTypePaginatedList GetRegisteredDocumentTypes(int? pageNo = default(int?), int? pageSize = default(int?));

        /// <summary>
        /// Get registered document types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <returns>ApiResponse of DocumentTypePaginatedList</returns>
        ApiResponse<DocumentTypePaginatedList> GetRegisteredDocumentTypesWithHttpInfo(int? pageNo = default(int?), int? pageSize = default(int?));
        /// <summary>
        /// Issue a new document to an individual user.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentIssueRequest">Document issue request MyDataMyConsent.DeveloperApi.Models.DocumentIssueRequest.</param>
        /// <returns>DocumentIssueRequestDetails</returns>
        DocumentIssueRequestDetails IssueDocumentToIndividual(DocumentIssueRequest documentIssueRequest);

        /// <summary>
        /// Issue a new document to an individual user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentIssueRequest">Document issue request MyDataMyConsent.DeveloperApi.Models.DocumentIssueRequest.</param>
        /// <returns>ApiResponse of DocumentIssueRequestDetails</returns>
        ApiResponse<DocumentIssueRequestDetails> IssueDocumentToIndividualWithHttpInfo(DocumentIssueRequest documentIssueRequest);
        /// <summary>
        /// Issue a new document to an organization.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentIssueRequest">Document issue request MyDataMyConsent.DeveloperApi.Models.DocumentIssueRequest.</param>
        /// <returns>DocumentIssueRequestDetails</returns>
        DocumentIssueRequestDetails IssueDocumentToOrganization(DocumentIssueRequest documentIssueRequest);

        /// <summary>
        /// Issue a new document to an organization.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentIssueRequest">Document issue request MyDataMyConsent.DeveloperApi.Models.DocumentIssueRequest.</param>
        /// <returns>ApiResponse of DocumentIssueRequestDetails</returns>
        ApiResponse<DocumentIssueRequestDetails> IssueDocumentToOrganizationWithHttpInfo(DocumentIssueRequest documentIssueRequest);
        /// <summary>
        /// Upload a document for issuance request of individual.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequestId">Issue Request Id System.Guid.</param>
        /// <param name="formFile"></param>
        /// <returns>string</returns>
        string UploadDocumentForIndividual(Guid issueRequestId, System.IO.Stream formFile);

        /// <summary>
        /// Upload a document for issuance request of individual.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequestId">Issue Request Id System.Guid.</param>
        /// <param name="formFile"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> UploadDocumentForIndividualWithHttpInfo(Guid issueRequestId, System.IO.Stream formFile);
        /// <summary>
        /// Upload a document for issuance request of organization.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequestId">Issue Request Id System.Guid.</param>
        /// <param name="formFile"></param>
        /// <returns>string</returns>
        string UploadDocumentForOrganization(Guid issueRequestId, System.IO.Stream formFile);

        /// <summary>
        /// Upload a document for issuance request of organization.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequestId">Issue Request Id System.Guid.</param>
        /// <param name="formFile"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> UploadDocumentForOrganizationWithHttpInfo(Guid issueRequestId, System.IO.Stream formFile);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDocumentsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get issued document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IssuedDocument</returns>
        System.Threading.Tasks.Task<IssuedDocument> GetIssuedDocumentByIdAsync(Guid documentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get issued document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IssuedDocument)</returns>
        System.Threading.Tasks.Task<ApiResponse<IssuedDocument>> GetIssuedDocumentByIdWithHttpInfoAsync(Guid documentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get paginated list of issued documents of given document type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type id.</param>
        /// <param name="fromDateTime">From DateTime. (optional)</param>
        /// <param name="toDateTime">To DateTime. (optional)</param>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IssuedDocumentPaginatedList</returns>
        System.Threading.Tasks.Task<IssuedDocumentPaginatedList> GetIssuedDocumentsAsync(Guid documentTypeId, DateTime? fromDateTime = default(DateTime?), DateTime? toDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get paginated list of issued documents of given document type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type id.</param>
        /// <param name="fromDateTime">From DateTime. (optional)</param>
        /// <param name="toDateTime">To DateTime. (optional)</param>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IssuedDocumentPaginatedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<IssuedDocumentPaginatedList>> GetIssuedDocumentsWithHttpInfoAsync(Guid documentTypeId, DateTime? fromDateTime = default(DateTime?), DateTime? toDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get registered document types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DocumentTypePaginatedList</returns>
        System.Threading.Tasks.Task<DocumentTypePaginatedList> GetRegisteredDocumentTypesAsync(int? pageNo = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get registered document types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DocumentTypePaginatedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentTypePaginatedList>> GetRegisteredDocumentTypesWithHttpInfoAsync(int? pageNo = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Issue a new document to an individual user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentIssueRequest">Document issue request MyDataMyConsent.DeveloperApi.Models.DocumentIssueRequest.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DocumentIssueRequestDetails</returns>
        System.Threading.Tasks.Task<DocumentIssueRequestDetails> IssueDocumentToIndividualAsync(DocumentIssueRequest documentIssueRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Issue a new document to an individual user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentIssueRequest">Document issue request MyDataMyConsent.DeveloperApi.Models.DocumentIssueRequest.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DocumentIssueRequestDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentIssueRequestDetails>> IssueDocumentToIndividualWithHttpInfoAsync(DocumentIssueRequest documentIssueRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Issue a new document to an organization.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentIssueRequest">Document issue request MyDataMyConsent.DeveloperApi.Models.DocumentIssueRequest.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DocumentIssueRequestDetails</returns>
        System.Threading.Tasks.Task<DocumentIssueRequestDetails> IssueDocumentToOrganizationAsync(DocumentIssueRequest documentIssueRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Issue a new document to an organization.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentIssueRequest">Document issue request MyDataMyConsent.DeveloperApi.Models.DocumentIssueRequest.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DocumentIssueRequestDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentIssueRequestDetails>> IssueDocumentToOrganizationWithHttpInfoAsync(DocumentIssueRequest documentIssueRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Upload a document for issuance request of individual.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequestId">Issue Request Id System.Guid.</param>
        /// <param name="formFile"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> UploadDocumentForIndividualAsync(Guid issueRequestId, System.IO.Stream formFile, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Upload a document for issuance request of individual.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequestId">Issue Request Id System.Guid.</param>
        /// <param name="formFile"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> UploadDocumentForIndividualWithHttpInfoAsync(Guid issueRequestId, System.IO.Stream formFile, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Upload a document for issuance request of organization.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequestId">Issue Request Id System.Guid.</param>
        /// <param name="formFile"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> UploadDocumentForOrganizationAsync(Guid issueRequestId, System.IO.Stream formFile, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Upload a document for issuance request of organization.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequestId">Issue Request Id System.Guid.</param>
        /// <param name="formFile"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> UploadDocumentForOrganizationWithHttpInfoAsync(Guid issueRequestId, System.IO.Stream formFile, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDocumentsApi : IDocumentsApiSync, IDocumentsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DocumentsApi : IDocumentsApi
    {
        private MyDataMyConsent.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DocumentsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DocumentsApi(string basePath)
        {
            this.Configuration = MyDataMyConsent.Sdk.Client.Configuration.MergeConfigurations(
                MyDataMyConsent.Sdk.Client.GlobalConfiguration.Instance,
                new MyDataMyConsent.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new MyDataMyConsent.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MyDataMyConsent.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = MyDataMyConsent.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DocumentsApi(MyDataMyConsent.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = MyDataMyConsent.Sdk.Client.Configuration.MergeConfigurations(
                MyDataMyConsent.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new MyDataMyConsent.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MyDataMyConsent.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = MyDataMyConsent.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DocumentsApi(MyDataMyConsent.Sdk.Client.ISynchronousClient client, MyDataMyConsent.Sdk.Client.IAsynchronousClient asyncClient, MyDataMyConsent.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = MyDataMyConsent.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public MyDataMyConsent.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public MyDataMyConsent.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public MyDataMyConsent.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MyDataMyConsent.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get issued document. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document id.</param>
        /// <returns>IssuedDocument</returns>
        public IssuedDocument GetIssuedDocumentById(Guid documentId)
        {
            MyDataMyConsent.Sdk.Client.ApiResponse<IssuedDocument> localVarResponse = GetIssuedDocumentByIdWithHttpInfo(documentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get issued document. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document id.</param>
        /// <returns>ApiResponse of IssuedDocument</returns>
        public MyDataMyConsent.Sdk.Client.ApiResponse<IssuedDocument> GetIssuedDocumentByIdWithHttpInfo(Guid documentId)
        {
            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("documentId", MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToString(documentId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<IssuedDocument>("/v1/documents/issued/{documentId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIssuedDocumentById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get issued document. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IssuedDocument</returns>
        public async System.Threading.Tasks.Task<IssuedDocument> GetIssuedDocumentByIdAsync(Guid documentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Sdk.Client.ApiResponse<IssuedDocument> localVarResponse = await GetIssuedDocumentByIdWithHttpInfoAsync(documentId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get issued document. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IssuedDocument)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Sdk.Client.ApiResponse<IssuedDocument>> GetIssuedDocumentByIdWithHttpInfoAsync(Guid documentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("documentId", MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToString(documentId)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<IssuedDocument>("/v1/documents/issued/{documentId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIssuedDocumentById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get paginated list of issued documents of given document type. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type id.</param>
        /// <param name="fromDateTime">From DateTime. (optional)</param>
        /// <param name="toDateTime">To DateTime. (optional)</param>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <returns>IssuedDocumentPaginatedList</returns>
        public IssuedDocumentPaginatedList GetIssuedDocuments(Guid documentTypeId, DateTime? fromDateTime = default(DateTime?), DateTime? toDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?))
        {
            MyDataMyConsent.Sdk.Client.ApiResponse<IssuedDocumentPaginatedList> localVarResponse = GetIssuedDocumentsWithHttpInfo(documentTypeId, fromDateTime, toDateTime, pageNo, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get paginated list of issued documents of given document type. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type id.</param>
        /// <param name="fromDateTime">From DateTime. (optional)</param>
        /// <param name="toDateTime">To DateTime. (optional)</param>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <returns>ApiResponse of IssuedDocumentPaginatedList</returns>
        public MyDataMyConsent.Sdk.Client.ApiResponse<IssuedDocumentPaginatedList> GetIssuedDocumentsWithHttpInfo(Guid documentTypeId, DateTime? fromDateTime = default(DateTime?), DateTime? toDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?))
        {
            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("documentTypeId", MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToString(documentTypeId)); // path parameter
            if (fromDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "fromDateTime", fromDateTime));
            }
            if (toDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "toDateTime", toDateTime));
            }
            if (pageNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "pageNo", pageNo));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<IssuedDocumentPaginatedList>("/v1/documents/issued/{documentTypeId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIssuedDocuments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get paginated list of issued documents of given document type. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type id.</param>
        /// <param name="fromDateTime">From DateTime. (optional)</param>
        /// <param name="toDateTime">To DateTime. (optional)</param>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IssuedDocumentPaginatedList</returns>
        public async System.Threading.Tasks.Task<IssuedDocumentPaginatedList> GetIssuedDocumentsAsync(Guid documentTypeId, DateTime? fromDateTime = default(DateTime?), DateTime? toDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Sdk.Client.ApiResponse<IssuedDocumentPaginatedList> localVarResponse = await GetIssuedDocumentsWithHttpInfoAsync(documentTypeId, fromDateTime, toDateTime, pageNo, pageSize, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get paginated list of issued documents of given document type. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type id.</param>
        /// <param name="fromDateTime">From DateTime. (optional)</param>
        /// <param name="toDateTime">To DateTime. (optional)</param>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IssuedDocumentPaginatedList)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Sdk.Client.ApiResponse<IssuedDocumentPaginatedList>> GetIssuedDocumentsWithHttpInfoAsync(Guid documentTypeId, DateTime? fromDateTime = default(DateTime?), DateTime? toDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("documentTypeId", MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToString(documentTypeId)); // path parameter
            if (fromDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "fromDateTime", fromDateTime));
            }
            if (toDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "toDateTime", toDateTime));
            }
            if (pageNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "pageNo", pageNo));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<IssuedDocumentPaginatedList>("/v1/documents/issued/{documentTypeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIssuedDocuments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get registered document types. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <returns>DocumentTypePaginatedList</returns>
        public DocumentTypePaginatedList GetRegisteredDocumentTypes(int? pageNo = default(int?), int? pageSize = default(int?))
        {
            MyDataMyConsent.Sdk.Client.ApiResponse<DocumentTypePaginatedList> localVarResponse = GetRegisteredDocumentTypesWithHttpInfo(pageNo, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get registered document types. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <returns>ApiResponse of DocumentTypePaginatedList</returns>
        public MyDataMyConsent.Sdk.Client.ApiResponse<DocumentTypePaginatedList> GetRegisteredDocumentTypesWithHttpInfo(int? pageNo = default(int?), int? pageSize = default(int?))
        {
            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "pageNo", pageNo));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<DocumentTypePaginatedList>("/v1/documents/types", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRegisteredDocumentTypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get registered document types. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DocumentTypePaginatedList</returns>
        public async System.Threading.Tasks.Task<DocumentTypePaginatedList> GetRegisteredDocumentTypesAsync(int? pageNo = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Sdk.Client.ApiResponse<DocumentTypePaginatedList> localVarResponse = await GetRegisteredDocumentTypesWithHttpInfoAsync(pageNo, pageSize, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get registered document types. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DocumentTypePaginatedList)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Sdk.Client.ApiResponse<DocumentTypePaginatedList>> GetRegisteredDocumentTypesWithHttpInfoAsync(int? pageNo = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "pageNo", pageNo));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DocumentTypePaginatedList>("/v1/documents/types", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRegisteredDocumentTypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Issue a new document to an individual user. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentIssueRequest">Document issue request MyDataMyConsent.DeveloperApi.Models.DocumentIssueRequest.</param>
        /// <returns>DocumentIssueRequestDetails</returns>
        public DocumentIssueRequestDetails IssueDocumentToIndividual(DocumentIssueRequest documentIssueRequest)
        {
            MyDataMyConsent.Sdk.Client.ApiResponse<DocumentIssueRequestDetails> localVarResponse = IssueDocumentToIndividualWithHttpInfo(documentIssueRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Issue a new document to an individual user. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentIssueRequest">Document issue request MyDataMyConsent.DeveloperApi.Models.DocumentIssueRequest.</param>
        /// <returns>ApiResponse of DocumentIssueRequestDetails</returns>
        public MyDataMyConsent.Sdk.Client.ApiResponse<DocumentIssueRequestDetails> IssueDocumentToIndividualWithHttpInfo(DocumentIssueRequest documentIssueRequest)
        {
            // verify the required parameter 'documentIssueRequest' is set
            if (documentIssueRequest == null)
            {
                throw new MyDataMyConsent.Sdk.Client.ApiException(400, "Missing required parameter 'documentIssueRequest' when calling DocumentsApi->IssueDocumentToIndividual");
            }

            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = documentIssueRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<DocumentIssueRequestDetails>("/v1/documents/issue/individual", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IssueDocumentToIndividual", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Issue a new document to an individual user. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentIssueRequest">Document issue request MyDataMyConsent.DeveloperApi.Models.DocumentIssueRequest.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DocumentIssueRequestDetails</returns>
        public async System.Threading.Tasks.Task<DocumentIssueRequestDetails> IssueDocumentToIndividualAsync(DocumentIssueRequest documentIssueRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Sdk.Client.ApiResponse<DocumentIssueRequestDetails> localVarResponse = await IssueDocumentToIndividualWithHttpInfoAsync(documentIssueRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Issue a new document to an individual user. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentIssueRequest">Document issue request MyDataMyConsent.DeveloperApi.Models.DocumentIssueRequest.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DocumentIssueRequestDetails)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Sdk.Client.ApiResponse<DocumentIssueRequestDetails>> IssueDocumentToIndividualWithHttpInfoAsync(DocumentIssueRequest documentIssueRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'documentIssueRequest' is set
            if (documentIssueRequest == null)
            {
                throw new MyDataMyConsent.Sdk.Client.ApiException(400, "Missing required parameter 'documentIssueRequest' when calling DocumentsApi->IssueDocumentToIndividual");
            }


            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = documentIssueRequest;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DocumentIssueRequestDetails>("/v1/documents/issue/individual", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IssueDocumentToIndividual", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Issue a new document to an organization. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentIssueRequest">Document issue request MyDataMyConsent.DeveloperApi.Models.DocumentIssueRequest.</param>
        /// <returns>DocumentIssueRequestDetails</returns>
        public DocumentIssueRequestDetails IssueDocumentToOrganization(DocumentIssueRequest documentIssueRequest)
        {
            MyDataMyConsent.Sdk.Client.ApiResponse<DocumentIssueRequestDetails> localVarResponse = IssueDocumentToOrganizationWithHttpInfo(documentIssueRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Issue a new document to an organization. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentIssueRequest">Document issue request MyDataMyConsent.DeveloperApi.Models.DocumentIssueRequest.</param>
        /// <returns>ApiResponse of DocumentIssueRequestDetails</returns>
        public MyDataMyConsent.Sdk.Client.ApiResponse<DocumentIssueRequestDetails> IssueDocumentToOrganizationWithHttpInfo(DocumentIssueRequest documentIssueRequest)
        {
            // verify the required parameter 'documentIssueRequest' is set
            if (documentIssueRequest == null)
            {
                throw new MyDataMyConsent.Sdk.Client.ApiException(400, "Missing required parameter 'documentIssueRequest' when calling DocumentsApi->IssueDocumentToOrganization");
            }

            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = documentIssueRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<DocumentIssueRequestDetails>("/v1/documents/issue/organization", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IssueDocumentToOrganization", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Issue a new document to an organization. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentIssueRequest">Document issue request MyDataMyConsent.DeveloperApi.Models.DocumentIssueRequest.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DocumentIssueRequestDetails</returns>
        public async System.Threading.Tasks.Task<DocumentIssueRequestDetails> IssueDocumentToOrganizationAsync(DocumentIssueRequest documentIssueRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Sdk.Client.ApiResponse<DocumentIssueRequestDetails> localVarResponse = await IssueDocumentToOrganizationWithHttpInfoAsync(documentIssueRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Issue a new document to an organization. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentIssueRequest">Document issue request MyDataMyConsent.DeveloperApi.Models.DocumentIssueRequest.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DocumentIssueRequestDetails)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Sdk.Client.ApiResponse<DocumentIssueRequestDetails>> IssueDocumentToOrganizationWithHttpInfoAsync(DocumentIssueRequest documentIssueRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'documentIssueRequest' is set
            if (documentIssueRequest == null)
            {
                throw new MyDataMyConsent.Sdk.Client.ApiException(400, "Missing required parameter 'documentIssueRequest' when calling DocumentsApi->IssueDocumentToOrganization");
            }


            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = documentIssueRequest;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DocumentIssueRequestDetails>("/v1/documents/issue/organization", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IssueDocumentToOrganization", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload a document for issuance request of individual. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequestId">Issue Request Id System.Guid.</param>
        /// <param name="formFile"></param>
        /// <returns>string</returns>
        public string UploadDocumentForIndividual(Guid issueRequestId, System.IO.Stream formFile)
        {
            MyDataMyConsent.Sdk.Client.ApiResponse<string> localVarResponse = UploadDocumentForIndividualWithHttpInfo(issueRequestId, formFile);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload a document for issuance request of individual. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequestId">Issue Request Id System.Guid.</param>
        /// <param name="formFile"></param>
        /// <returns>ApiResponse of string</returns>
        public MyDataMyConsent.Sdk.Client.ApiResponse<string> UploadDocumentForIndividualWithHttpInfo(Guid issueRequestId, System.IO.Stream formFile)
        {
            // verify the required parameter 'formFile' is set
            if (formFile == null)
            {
                throw new MyDataMyConsent.Sdk.Client.ApiException(400, "Missing required parameter 'formFile' when calling DocumentsApi->UploadDocumentForIndividual");
            }

            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("issueRequestId", MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToString(issueRequestId)); // path parameter
            localVarRequestOptions.FileParameters.Add("formFile", formFile);


            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/v1/documents/issue/individual/upload/{issueRequestId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadDocumentForIndividual", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload a document for issuance request of individual. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequestId">Issue Request Id System.Guid.</param>
        /// <param name="formFile"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> UploadDocumentForIndividualAsync(Guid issueRequestId, System.IO.Stream formFile, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Sdk.Client.ApiResponse<string> localVarResponse = await UploadDocumentForIndividualWithHttpInfoAsync(issueRequestId, formFile, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload a document for issuance request of individual. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequestId">Issue Request Id System.Guid.</param>
        /// <param name="formFile"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Sdk.Client.ApiResponse<string>> UploadDocumentForIndividualWithHttpInfoAsync(Guid issueRequestId, System.IO.Stream formFile, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'formFile' is set
            if (formFile == null)
            {
                throw new MyDataMyConsent.Sdk.Client.ApiException(400, "Missing required parameter 'formFile' when calling DocumentsApi->UploadDocumentForIndividual");
            }


            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("issueRequestId", MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToString(issueRequestId)); // path parameter
            localVarRequestOptions.FileParameters.Add("formFile", formFile);


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/v1/documents/issue/individual/upload/{issueRequestId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadDocumentForIndividual", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload a document for issuance request of organization. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequestId">Issue Request Id System.Guid.</param>
        /// <param name="formFile"></param>
        /// <returns>string</returns>
        public string UploadDocumentForOrganization(Guid issueRequestId, System.IO.Stream formFile)
        {
            MyDataMyConsent.Sdk.Client.ApiResponse<string> localVarResponse = UploadDocumentForOrganizationWithHttpInfo(issueRequestId, formFile);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload a document for issuance request of organization. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequestId">Issue Request Id System.Guid.</param>
        /// <param name="formFile"></param>
        /// <returns>ApiResponse of string</returns>
        public MyDataMyConsent.Sdk.Client.ApiResponse<string> UploadDocumentForOrganizationWithHttpInfo(Guid issueRequestId, System.IO.Stream formFile)
        {
            // verify the required parameter 'formFile' is set
            if (formFile == null)
            {
                throw new MyDataMyConsent.Sdk.Client.ApiException(400, "Missing required parameter 'formFile' when calling DocumentsApi->UploadDocumentForOrganization");
            }

            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("issueRequestId", MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToString(issueRequestId)); // path parameter
            localVarRequestOptions.FileParameters.Add("formFile", formFile);


            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/v1/documents/issue/organization/upload/{issueRequestId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadDocumentForOrganization", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload a document for issuance request of organization. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequestId">Issue Request Id System.Guid.</param>
        /// <param name="formFile"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> UploadDocumentForOrganizationAsync(Guid issueRequestId, System.IO.Stream formFile, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Sdk.Client.ApiResponse<string> localVarResponse = await UploadDocumentForOrganizationWithHttpInfoAsync(issueRequestId, formFile, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload a document for issuance request of organization. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequestId">Issue Request Id System.Guid.</param>
        /// <param name="formFile"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Sdk.Client.ApiResponse<string>> UploadDocumentForOrganizationWithHttpInfoAsync(Guid issueRequestId, System.IO.Stream formFile, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'formFile' is set
            if (formFile == null)
            {
                throw new MyDataMyConsent.Sdk.Client.ApiException(400, "Missing required parameter 'formFile' when calling DocumentsApi->UploadDocumentForOrganization");
            }


            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("issueRequestId", MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToString(issueRequestId)); // path parameter
            localVarRequestOptions.FileParameters.Add("formFile", formFile);


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/v1/documents/issue/organization/upload/{issueRequestId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadDocumentForOrganization", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
