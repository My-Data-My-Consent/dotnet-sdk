/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using MyDataMyConsent.Sdk.Client;
using MyDataMyConsent.Sdk.Models;

namespace MyDataMyConsent.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataConsentRequestsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel the individual data consent request based on Id.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Individual consent request id.</param>
        /// <returns>IndividualDataConsentRequestResponse</returns>
        IndividualDataConsentRequestResponse CancelIndividualDataConsentRequest(Guid requestId);

        /// <summary>
        /// Cancel the individual data consent request based on Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Individual consent request id.</param>
        /// <returns>ApiResponse of IndividualDataConsentRequestResponse</returns>
        ApiResponse<IndividualDataConsentRequestResponse> CancelIndividualDataConsentRequestWithHttpInfo(Guid requestId);
        /// <summary>
        /// Cancel the Organization data consent request based on Id.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Organization consent request id.</param>
        /// <returns>OrganizationDataConsentRequestResponse</returns>
        OrganizationDataConsentRequestResponse CancelOrganizationDataConsentRequest(Guid requestId);

        /// <summary>
        /// Cancel the Organization data consent request based on Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Organization consent request id.</param>
        /// <returns>ApiResponse of OrganizationDataConsentRequestResponse</returns>
        ApiResponse<OrganizationDataConsentRequestResponse> CancelOrganizationDataConsentRequestWithHttpInfo(Guid requestId);
        /// <summary>
        /// Create a individual data consent request.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createIndividualDataConsentRequest">M:MyDataMyConsent.DeveloperApi.Controllers.DataConsentRequestsController.CreateIndividualDataConsentRequest(MyDataMyConsent.DeveloperApi.Models.CreateIndividualDataConsentRequest).</param>
        /// <returns>IndividualDataConsentRequestResponse</returns>
        IndividualDataConsentRequestResponse CreateIndividualDataConsentRequest(CreateIndividualDataConsentRequest createIndividualDataConsentRequest);

        /// <summary>
        /// Create a individual data consent request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createIndividualDataConsentRequest">M:MyDataMyConsent.DeveloperApi.Controllers.DataConsentRequestsController.CreateIndividualDataConsentRequest(MyDataMyConsent.DeveloperApi.Models.CreateIndividualDataConsentRequest).</param>
        /// <returns>ApiResponse of IndividualDataConsentRequestResponse</returns>
        ApiResponse<IndividualDataConsentRequestResponse> CreateIndividualDataConsentRequestWithHttpInfo(CreateIndividualDataConsentRequest createIndividualDataConsentRequest);
        /// <summary>
        /// Create a organization data consent request.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrganizationDataConsentRequest">M:MyDataMyConsent.DeveloperApi.Controllers.DataConsentRequestsController.CreateOrganizationDataConsentRequest(MyDataMyConsent.DeveloperApi.Models.CreateOrganizationDataConsentRequest).</param>
        /// <returns>OrganizationDataConsentRequestResponse</returns>
        OrganizationDataConsentRequestResponse CreateOrganizationDataConsentRequest(CreateOrganizationDataConsentRequest createOrganizationDataConsentRequest);

        /// <summary>
        /// Create a organization data consent request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrganizationDataConsentRequest">M:MyDataMyConsent.DeveloperApi.Controllers.DataConsentRequestsController.CreateOrganizationDataConsentRequest(MyDataMyConsent.DeveloperApi.Models.CreateOrganizationDataConsentRequest).</param>
        /// <returns>ApiResponse of OrganizationDataConsentRequestResponse</returns>
        ApiResponse<OrganizationDataConsentRequestResponse> CreateOrganizationDataConsentRequestWithHttpInfo(CreateOrganizationDataConsentRequest createOrganizationDataConsentRequest);
        /// <summary>
        /// Get all Consent Requests sent to Individuals.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Data consent status. (optional)</param>
        /// <param name="startDateTime">Start date time. (optional)</param>
        /// <param name="endDateTime">End date time. (optional)</param>
        /// <param name="pageNo">Page no. (optional, default to 1)</param>
        /// <param name="pageSize">Page size. (optional, default to 25)</param>
        /// <returns>UserDataConsentInfoDtoPaginatedList</returns>
        UserDataConsentInfoDtoPaginatedList GetAllConsentRequestsToIndividuals(DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDateTime = default(DateTime?), DateTime? endDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?));

        /// <summary>
        /// Get all Consent Requests sent to Individuals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Data consent status. (optional)</param>
        /// <param name="startDateTime">Start date time. (optional)</param>
        /// <param name="endDateTime">End date time. (optional)</param>
        /// <param name="pageNo">Page no. (optional, default to 1)</param>
        /// <param name="pageSize">Page size. (optional, default to 25)</param>
        /// <returns>ApiResponse of UserDataConsentInfoDtoPaginatedList</returns>
        ApiResponse<UserDataConsentInfoDtoPaginatedList> GetAllConsentRequestsToIndividualsWithHttpInfo(DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDateTime = default(DateTime?), DateTime? endDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?));
        /// <summary>
        /// Get All Consent Requests sent to Organizations.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Data consent status. (optional)</param>
        /// <param name="startDateTime">Start date time. (optional)</param>
        /// <param name="endDateTime">End date time. (optional)</param>
        /// <param name="pageNo">Page no. (optional, default to 1)</param>
        /// <param name="pageSize">Page size. (optional, default to 25)</param>
        /// <returns>OrganizationDataConsentInfoDtoPaginatedList</returns>
        OrganizationDataConsentInfoDtoPaginatedList GetAllConsentRequestsToOrganizations(DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDateTime = default(DateTime?), DateTime? endDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?));

        /// <summary>
        /// Get All Consent Requests sent to Organizations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Data consent status. (optional)</param>
        /// <param name="startDateTime">Start date time. (optional)</param>
        /// <param name="endDateTime">End date time. (optional)</param>
        /// <param name="pageNo">Page no. (optional, default to 1)</param>
        /// <param name="pageSize">Page size. (optional, default to 25)</param>
        /// <returns>ApiResponse of OrganizationDataConsentInfoDtoPaginatedList</returns>
        ApiResponse<OrganizationDataConsentInfoDtoPaginatedList> GetAllConsentRequestsToOrganizationsWithHttpInfo(DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDateTime = default(DateTime?), DateTime? endDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?));
        /// <summary>
        /// Get a Consent Request by ID.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Individual consent request id.</param>
        /// <returns>DataConsentDetailsDto</returns>
        DataConsentDetailsDto GetIndividualConsentRequestById(Guid requestId);

        /// <summary>
        /// Get a Consent Request by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Individual consent request id.</param>
        /// <returns>ApiResponse of DataConsentDetailsDto</returns>
        ApiResponse<DataConsentDetailsDto> GetIndividualConsentRequestByIdWithHttpInfo(Guid requestId);
        /// <summary>
        /// Get a OrganizationConsent Request by Id.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Organization consent request id.</param>
        /// <returns>DataConsentDetailsDto</returns>
        DataConsentDetailsDto GetOrganizationConsentRequestById(Guid requestId);

        /// <summary>
        /// Get a OrganizationConsent Request by Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Organization consent request id.</param>
        /// <returns>ApiResponse of DataConsentDetailsDto</returns>
        ApiResponse<DataConsentDetailsDto> GetOrganizationConsentRequestByIdWithHttpInfo(Guid requestId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataConsentRequestsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Cancel the individual data consent request based on Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Individual consent request id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IndividualDataConsentRequestResponse</returns>
        System.Threading.Tasks.Task<IndividualDataConsentRequestResponse> CancelIndividualDataConsentRequestAsync(Guid requestId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel the individual data consent request based on Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Individual consent request id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IndividualDataConsentRequestResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IndividualDataConsentRequestResponse>> CancelIndividualDataConsentRequestWithHttpInfoAsync(Guid requestId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Cancel the Organization data consent request based on Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Organization consent request id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganizationDataConsentRequestResponse</returns>
        System.Threading.Tasks.Task<OrganizationDataConsentRequestResponse> CancelOrganizationDataConsentRequestAsync(Guid requestId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel the Organization data consent request based on Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Organization consent request id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganizationDataConsentRequestResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationDataConsentRequestResponse>> CancelOrganizationDataConsentRequestWithHttpInfoAsync(Guid requestId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a individual data consent request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createIndividualDataConsentRequest">M:MyDataMyConsent.DeveloperApi.Controllers.DataConsentRequestsController.CreateIndividualDataConsentRequest(MyDataMyConsent.DeveloperApi.Models.CreateIndividualDataConsentRequest).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IndividualDataConsentRequestResponse</returns>
        System.Threading.Tasks.Task<IndividualDataConsentRequestResponse> CreateIndividualDataConsentRequestAsync(CreateIndividualDataConsentRequest createIndividualDataConsentRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a individual data consent request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createIndividualDataConsentRequest">M:MyDataMyConsent.DeveloperApi.Controllers.DataConsentRequestsController.CreateIndividualDataConsentRequest(MyDataMyConsent.DeveloperApi.Models.CreateIndividualDataConsentRequest).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IndividualDataConsentRequestResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IndividualDataConsentRequestResponse>> CreateIndividualDataConsentRequestWithHttpInfoAsync(CreateIndividualDataConsentRequest createIndividualDataConsentRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a organization data consent request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrganizationDataConsentRequest">M:MyDataMyConsent.DeveloperApi.Controllers.DataConsentRequestsController.CreateOrganizationDataConsentRequest(MyDataMyConsent.DeveloperApi.Models.CreateOrganizationDataConsentRequest).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganizationDataConsentRequestResponse</returns>
        System.Threading.Tasks.Task<OrganizationDataConsentRequestResponse> CreateOrganizationDataConsentRequestAsync(CreateOrganizationDataConsentRequest createOrganizationDataConsentRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a organization data consent request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrganizationDataConsentRequest">M:MyDataMyConsent.DeveloperApi.Controllers.DataConsentRequestsController.CreateOrganizationDataConsentRequest(MyDataMyConsent.DeveloperApi.Models.CreateOrganizationDataConsentRequest).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganizationDataConsentRequestResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationDataConsentRequestResponse>> CreateOrganizationDataConsentRequestWithHttpInfoAsync(CreateOrganizationDataConsentRequest createOrganizationDataConsentRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all Consent Requests sent to Individuals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Data consent status. (optional)</param>
        /// <param name="startDateTime">Start date time. (optional)</param>
        /// <param name="endDateTime">End date time. (optional)</param>
        /// <param name="pageNo">Page no. (optional, default to 1)</param>
        /// <param name="pageSize">Page size. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserDataConsentInfoDtoPaginatedList</returns>
        System.Threading.Tasks.Task<UserDataConsentInfoDtoPaginatedList> GetAllConsentRequestsToIndividualsAsync(DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDateTime = default(DateTime?), DateTime? endDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all Consent Requests sent to Individuals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Data consent status. (optional)</param>
        /// <param name="startDateTime">Start date time. (optional)</param>
        /// <param name="endDateTime">End date time. (optional)</param>
        /// <param name="pageNo">Page no. (optional, default to 1)</param>
        /// <param name="pageSize">Page size. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserDataConsentInfoDtoPaginatedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserDataConsentInfoDtoPaginatedList>> GetAllConsentRequestsToIndividualsWithHttpInfoAsync(DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDateTime = default(DateTime?), DateTime? endDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get All Consent Requests sent to Organizations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Data consent status. (optional)</param>
        /// <param name="startDateTime">Start date time. (optional)</param>
        /// <param name="endDateTime">End date time. (optional)</param>
        /// <param name="pageNo">Page no. (optional, default to 1)</param>
        /// <param name="pageSize">Page size. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganizationDataConsentInfoDtoPaginatedList</returns>
        System.Threading.Tasks.Task<OrganizationDataConsentInfoDtoPaginatedList> GetAllConsentRequestsToOrganizationsAsync(DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDateTime = default(DateTime?), DateTime? endDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get All Consent Requests sent to Organizations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Data consent status. (optional)</param>
        /// <param name="startDateTime">Start date time. (optional)</param>
        /// <param name="endDateTime">End date time. (optional)</param>
        /// <param name="pageNo">Page no. (optional, default to 1)</param>
        /// <param name="pageSize">Page size. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganizationDataConsentInfoDtoPaginatedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationDataConsentInfoDtoPaginatedList>> GetAllConsentRequestsToOrganizationsWithHttpInfoAsync(DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDateTime = default(DateTime?), DateTime? endDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a Consent Request by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Individual consent request id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataConsentDetailsDto</returns>
        System.Threading.Tasks.Task<DataConsentDetailsDto> GetIndividualConsentRequestByIdAsync(Guid requestId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a Consent Request by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Individual consent request id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataConsentDetailsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataConsentDetailsDto>> GetIndividualConsentRequestByIdWithHttpInfoAsync(Guid requestId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a OrganizationConsent Request by Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Organization consent request id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataConsentDetailsDto</returns>
        System.Threading.Tasks.Task<DataConsentDetailsDto> GetOrganizationConsentRequestByIdAsync(Guid requestId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a OrganizationConsent Request by Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Organization consent request id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataConsentDetailsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataConsentDetailsDto>> GetOrganizationConsentRequestByIdWithHttpInfoAsync(Guid requestId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataConsentRequestsApi : IDataConsentRequestsApiSync, IDataConsentRequestsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DataConsentRequestsApi : IDataConsentRequestsApi
    {
        private MyDataMyConsent.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DataConsentRequestsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataConsentRequestsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataConsentRequestsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataConsentRequestsApi(string basePath)
        {
            this.Configuration = MyDataMyConsent.Sdk.Client.Configuration.MergeConfigurations(
                MyDataMyConsent.Sdk.Client.GlobalConfiguration.Instance,
                new MyDataMyConsent.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new MyDataMyConsent.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MyDataMyConsent.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = MyDataMyConsent.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataConsentRequestsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DataConsentRequestsApi(MyDataMyConsent.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = MyDataMyConsent.Sdk.Client.Configuration.MergeConfigurations(
                MyDataMyConsent.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new MyDataMyConsent.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MyDataMyConsent.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = MyDataMyConsent.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataConsentRequestsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DataConsentRequestsApi(MyDataMyConsent.Sdk.Client.ISynchronousClient client, MyDataMyConsent.Sdk.Client.IAsynchronousClient asyncClient, MyDataMyConsent.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = MyDataMyConsent.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public MyDataMyConsent.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public MyDataMyConsent.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public MyDataMyConsent.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MyDataMyConsent.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Cancel the individual data consent request based on Id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Individual consent request id.</param>
        /// <returns>IndividualDataConsentRequestResponse</returns>
        public IndividualDataConsentRequestResponse CancelIndividualDataConsentRequest(Guid requestId)
        {
            MyDataMyConsent.Sdk.Client.ApiResponse<IndividualDataConsentRequestResponse> localVarResponse = CancelIndividualDataConsentRequestWithHttpInfo(requestId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel the individual data consent request based on Id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Individual consent request id.</param>
        /// <returns>ApiResponse of IndividualDataConsentRequestResponse</returns>
        public MyDataMyConsent.Sdk.Client.ApiResponse<IndividualDataConsentRequestResponse> CancelIndividualDataConsentRequestWithHttpInfo(Guid requestId)
        {
            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToString(requestId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Put<IndividualDataConsentRequestResponse>("/v1/consent-requests/individual/{requestId}/cancel", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelIndividualDataConsentRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel the individual data consent request based on Id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Individual consent request id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IndividualDataConsentRequestResponse</returns>
        public async System.Threading.Tasks.Task<IndividualDataConsentRequestResponse> CancelIndividualDataConsentRequestAsync(Guid requestId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Sdk.Client.ApiResponse<IndividualDataConsentRequestResponse> localVarResponse = await CancelIndividualDataConsentRequestWithHttpInfoAsync(requestId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel the individual data consent request based on Id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Individual consent request id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IndividualDataConsentRequestResponse)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Sdk.Client.ApiResponse<IndividualDataConsentRequestResponse>> CancelIndividualDataConsentRequestWithHttpInfoAsync(Guid requestId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToString(requestId)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<IndividualDataConsentRequestResponse>("/v1/consent-requests/individual/{requestId}/cancel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelIndividualDataConsentRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel the Organization data consent request based on Id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Organization consent request id.</param>
        /// <returns>OrganizationDataConsentRequestResponse</returns>
        public OrganizationDataConsentRequestResponse CancelOrganizationDataConsentRequest(Guid requestId)
        {
            MyDataMyConsent.Sdk.Client.ApiResponse<OrganizationDataConsentRequestResponse> localVarResponse = CancelOrganizationDataConsentRequestWithHttpInfo(requestId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel the Organization data consent request based on Id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Organization consent request id.</param>
        /// <returns>ApiResponse of OrganizationDataConsentRequestResponse</returns>
        public MyDataMyConsent.Sdk.Client.ApiResponse<OrganizationDataConsentRequestResponse> CancelOrganizationDataConsentRequestWithHttpInfo(Guid requestId)
        {
            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToString(requestId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Put<OrganizationDataConsentRequestResponse>("/v1/consent-requests/organization/{requestId}/cancel", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelOrganizationDataConsentRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel the Organization data consent request based on Id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Organization consent request id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganizationDataConsentRequestResponse</returns>
        public async System.Threading.Tasks.Task<OrganizationDataConsentRequestResponse> CancelOrganizationDataConsentRequestAsync(Guid requestId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Sdk.Client.ApiResponse<OrganizationDataConsentRequestResponse> localVarResponse = await CancelOrganizationDataConsentRequestWithHttpInfoAsync(requestId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel the Organization data consent request based on Id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Organization consent request id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganizationDataConsentRequestResponse)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Sdk.Client.ApiResponse<OrganizationDataConsentRequestResponse>> CancelOrganizationDataConsentRequestWithHttpInfoAsync(Guid requestId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToString(requestId)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<OrganizationDataConsentRequestResponse>("/v1/consent-requests/organization/{requestId}/cancel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelOrganizationDataConsentRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a individual data consent request. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createIndividualDataConsentRequest">M:MyDataMyConsent.DeveloperApi.Controllers.DataConsentRequestsController.CreateIndividualDataConsentRequest(MyDataMyConsent.DeveloperApi.Models.CreateIndividualDataConsentRequest).</param>
        /// <returns>IndividualDataConsentRequestResponse</returns>
        public IndividualDataConsentRequestResponse CreateIndividualDataConsentRequest(CreateIndividualDataConsentRequest createIndividualDataConsentRequest)
        {
            MyDataMyConsent.Sdk.Client.ApiResponse<IndividualDataConsentRequestResponse> localVarResponse = CreateIndividualDataConsentRequestWithHttpInfo(createIndividualDataConsentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a individual data consent request. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createIndividualDataConsentRequest">M:MyDataMyConsent.DeveloperApi.Controllers.DataConsentRequestsController.CreateIndividualDataConsentRequest(MyDataMyConsent.DeveloperApi.Models.CreateIndividualDataConsentRequest).</param>
        /// <returns>ApiResponse of IndividualDataConsentRequestResponse</returns>
        public MyDataMyConsent.Sdk.Client.ApiResponse<IndividualDataConsentRequestResponse> CreateIndividualDataConsentRequestWithHttpInfo(CreateIndividualDataConsentRequest createIndividualDataConsentRequest)
        {
            // verify the required parameter 'createIndividualDataConsentRequest' is set
            if (createIndividualDataConsentRequest == null)
            {
                throw new MyDataMyConsent.Sdk.Client.ApiException(400, "Missing required parameter 'createIndividualDataConsentRequest' when calling DataConsentRequestsApi->CreateIndividualDataConsentRequest");
            }

            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createIndividualDataConsentRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<IndividualDataConsentRequestResponse>("/v1/consent-requests/individual", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateIndividualDataConsentRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a individual data consent request. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createIndividualDataConsentRequest">M:MyDataMyConsent.DeveloperApi.Controllers.DataConsentRequestsController.CreateIndividualDataConsentRequest(MyDataMyConsent.DeveloperApi.Models.CreateIndividualDataConsentRequest).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IndividualDataConsentRequestResponse</returns>
        public async System.Threading.Tasks.Task<IndividualDataConsentRequestResponse> CreateIndividualDataConsentRequestAsync(CreateIndividualDataConsentRequest createIndividualDataConsentRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Sdk.Client.ApiResponse<IndividualDataConsentRequestResponse> localVarResponse = await CreateIndividualDataConsentRequestWithHttpInfoAsync(createIndividualDataConsentRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a individual data consent request. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createIndividualDataConsentRequest">M:MyDataMyConsent.DeveloperApi.Controllers.DataConsentRequestsController.CreateIndividualDataConsentRequest(MyDataMyConsent.DeveloperApi.Models.CreateIndividualDataConsentRequest).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IndividualDataConsentRequestResponse)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Sdk.Client.ApiResponse<IndividualDataConsentRequestResponse>> CreateIndividualDataConsentRequestWithHttpInfoAsync(CreateIndividualDataConsentRequest createIndividualDataConsentRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createIndividualDataConsentRequest' is set
            if (createIndividualDataConsentRequest == null)
            {
                throw new MyDataMyConsent.Sdk.Client.ApiException(400, "Missing required parameter 'createIndividualDataConsentRequest' when calling DataConsentRequestsApi->CreateIndividualDataConsentRequest");
            }


            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createIndividualDataConsentRequest;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IndividualDataConsentRequestResponse>("/v1/consent-requests/individual", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateIndividualDataConsentRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a organization data consent request. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrganizationDataConsentRequest">M:MyDataMyConsent.DeveloperApi.Controllers.DataConsentRequestsController.CreateOrganizationDataConsentRequest(MyDataMyConsent.DeveloperApi.Models.CreateOrganizationDataConsentRequest).</param>
        /// <returns>OrganizationDataConsentRequestResponse</returns>
        public OrganizationDataConsentRequestResponse CreateOrganizationDataConsentRequest(CreateOrganizationDataConsentRequest createOrganizationDataConsentRequest)
        {
            MyDataMyConsent.Sdk.Client.ApiResponse<OrganizationDataConsentRequestResponse> localVarResponse = CreateOrganizationDataConsentRequestWithHttpInfo(createOrganizationDataConsentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a organization data consent request. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrganizationDataConsentRequest">M:MyDataMyConsent.DeveloperApi.Controllers.DataConsentRequestsController.CreateOrganizationDataConsentRequest(MyDataMyConsent.DeveloperApi.Models.CreateOrganizationDataConsentRequest).</param>
        /// <returns>ApiResponse of OrganizationDataConsentRequestResponse</returns>
        public MyDataMyConsent.Sdk.Client.ApiResponse<OrganizationDataConsentRequestResponse> CreateOrganizationDataConsentRequestWithHttpInfo(CreateOrganizationDataConsentRequest createOrganizationDataConsentRequest)
        {
            // verify the required parameter 'createOrganizationDataConsentRequest' is set
            if (createOrganizationDataConsentRequest == null)
            {
                throw new MyDataMyConsent.Sdk.Client.ApiException(400, "Missing required parameter 'createOrganizationDataConsentRequest' when calling DataConsentRequestsApi->CreateOrganizationDataConsentRequest");
            }

            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createOrganizationDataConsentRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<OrganizationDataConsentRequestResponse>("/v1/consent-requests/organization", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrganizationDataConsentRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a organization data consent request. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrganizationDataConsentRequest">M:MyDataMyConsent.DeveloperApi.Controllers.DataConsentRequestsController.CreateOrganizationDataConsentRequest(MyDataMyConsent.DeveloperApi.Models.CreateOrganizationDataConsentRequest).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganizationDataConsentRequestResponse</returns>
        public async System.Threading.Tasks.Task<OrganizationDataConsentRequestResponse> CreateOrganizationDataConsentRequestAsync(CreateOrganizationDataConsentRequest createOrganizationDataConsentRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Sdk.Client.ApiResponse<OrganizationDataConsentRequestResponse> localVarResponse = await CreateOrganizationDataConsentRequestWithHttpInfoAsync(createOrganizationDataConsentRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a organization data consent request. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrganizationDataConsentRequest">M:MyDataMyConsent.DeveloperApi.Controllers.DataConsentRequestsController.CreateOrganizationDataConsentRequest(MyDataMyConsent.DeveloperApi.Models.CreateOrganizationDataConsentRequest).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganizationDataConsentRequestResponse)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Sdk.Client.ApiResponse<OrganizationDataConsentRequestResponse>> CreateOrganizationDataConsentRequestWithHttpInfoAsync(CreateOrganizationDataConsentRequest createOrganizationDataConsentRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createOrganizationDataConsentRequest' is set
            if (createOrganizationDataConsentRequest == null)
            {
                throw new MyDataMyConsent.Sdk.Client.ApiException(400, "Missing required parameter 'createOrganizationDataConsentRequest' when calling DataConsentRequestsApi->CreateOrganizationDataConsentRequest");
            }


            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createOrganizationDataConsentRequest;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OrganizationDataConsentRequestResponse>("/v1/consent-requests/organization", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrganizationDataConsentRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all Consent Requests sent to Individuals. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Data consent status. (optional)</param>
        /// <param name="startDateTime">Start date time. (optional)</param>
        /// <param name="endDateTime">End date time. (optional)</param>
        /// <param name="pageNo">Page no. (optional, default to 1)</param>
        /// <param name="pageSize">Page size. (optional, default to 25)</param>
        /// <returns>UserDataConsentInfoDtoPaginatedList</returns>
        public UserDataConsentInfoDtoPaginatedList GetAllConsentRequestsToIndividuals(DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDateTime = default(DateTime?), DateTime? endDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?))
        {
            MyDataMyConsent.Sdk.Client.ApiResponse<UserDataConsentInfoDtoPaginatedList> localVarResponse = GetAllConsentRequestsToIndividualsWithHttpInfo(status, startDateTime, endDateTime, pageNo, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all Consent Requests sent to Individuals. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Data consent status. (optional)</param>
        /// <param name="startDateTime">Start date time. (optional)</param>
        /// <param name="endDateTime">End date time. (optional)</param>
        /// <param name="pageNo">Page no. (optional, default to 1)</param>
        /// <param name="pageSize">Page size. (optional, default to 25)</param>
        /// <returns>ApiResponse of UserDataConsentInfoDtoPaginatedList</returns>
        public MyDataMyConsent.Sdk.Client.ApiResponse<UserDataConsentInfoDtoPaginatedList> GetAllConsentRequestsToIndividualsWithHttpInfo(DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDateTime = default(DateTime?), DateTime? endDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?))
        {
            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (startDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "startDateTime", startDateTime));
            }
            if (endDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "endDateTime", endDateTime));
            }
            if (pageNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "pageNo", pageNo));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<UserDataConsentInfoDtoPaginatedList>("/v1/consent-requests/individuals", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllConsentRequestsToIndividuals", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all Consent Requests sent to Individuals. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Data consent status. (optional)</param>
        /// <param name="startDateTime">Start date time. (optional)</param>
        /// <param name="endDateTime">End date time. (optional)</param>
        /// <param name="pageNo">Page no. (optional, default to 1)</param>
        /// <param name="pageSize">Page size. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserDataConsentInfoDtoPaginatedList</returns>
        public async System.Threading.Tasks.Task<UserDataConsentInfoDtoPaginatedList> GetAllConsentRequestsToIndividualsAsync(DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDateTime = default(DateTime?), DateTime? endDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Sdk.Client.ApiResponse<UserDataConsentInfoDtoPaginatedList> localVarResponse = await GetAllConsentRequestsToIndividualsWithHttpInfoAsync(status, startDateTime, endDateTime, pageNo, pageSize, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all Consent Requests sent to Individuals. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Data consent status. (optional)</param>
        /// <param name="startDateTime">Start date time. (optional)</param>
        /// <param name="endDateTime">End date time. (optional)</param>
        /// <param name="pageNo">Page no. (optional, default to 1)</param>
        /// <param name="pageSize">Page size. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserDataConsentInfoDtoPaginatedList)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Sdk.Client.ApiResponse<UserDataConsentInfoDtoPaginatedList>> GetAllConsentRequestsToIndividualsWithHttpInfoAsync(DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDateTime = default(DateTime?), DateTime? endDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (startDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "startDateTime", startDateTime));
            }
            if (endDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "endDateTime", endDateTime));
            }
            if (pageNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "pageNo", pageNo));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserDataConsentInfoDtoPaginatedList>("/v1/consent-requests/individuals", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllConsentRequestsToIndividuals", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get All Consent Requests sent to Organizations. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Data consent status. (optional)</param>
        /// <param name="startDateTime">Start date time. (optional)</param>
        /// <param name="endDateTime">End date time. (optional)</param>
        /// <param name="pageNo">Page no. (optional, default to 1)</param>
        /// <param name="pageSize">Page size. (optional, default to 25)</param>
        /// <returns>OrganizationDataConsentInfoDtoPaginatedList</returns>
        public OrganizationDataConsentInfoDtoPaginatedList GetAllConsentRequestsToOrganizations(DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDateTime = default(DateTime?), DateTime? endDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?))
        {
            MyDataMyConsent.Sdk.Client.ApiResponse<OrganizationDataConsentInfoDtoPaginatedList> localVarResponse = GetAllConsentRequestsToOrganizationsWithHttpInfo(status, startDateTime, endDateTime, pageNo, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Consent Requests sent to Organizations. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Data consent status. (optional)</param>
        /// <param name="startDateTime">Start date time. (optional)</param>
        /// <param name="endDateTime">End date time. (optional)</param>
        /// <param name="pageNo">Page no. (optional, default to 1)</param>
        /// <param name="pageSize">Page size. (optional, default to 25)</param>
        /// <returns>ApiResponse of OrganizationDataConsentInfoDtoPaginatedList</returns>
        public MyDataMyConsent.Sdk.Client.ApiResponse<OrganizationDataConsentInfoDtoPaginatedList> GetAllConsentRequestsToOrganizationsWithHttpInfo(DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDateTime = default(DateTime?), DateTime? endDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?))
        {
            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (startDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "startDateTime", startDateTime));
            }
            if (endDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "endDateTime", endDateTime));
            }
            if (pageNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "pageNo", pageNo));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<OrganizationDataConsentInfoDtoPaginatedList>("/v1/consent-requests/organizations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllConsentRequestsToOrganizations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get All Consent Requests sent to Organizations. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Data consent status. (optional)</param>
        /// <param name="startDateTime">Start date time. (optional)</param>
        /// <param name="endDateTime">End date time. (optional)</param>
        /// <param name="pageNo">Page no. (optional, default to 1)</param>
        /// <param name="pageSize">Page size. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganizationDataConsentInfoDtoPaginatedList</returns>
        public async System.Threading.Tasks.Task<OrganizationDataConsentInfoDtoPaginatedList> GetAllConsentRequestsToOrganizationsAsync(DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDateTime = default(DateTime?), DateTime? endDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Sdk.Client.ApiResponse<OrganizationDataConsentInfoDtoPaginatedList> localVarResponse = await GetAllConsentRequestsToOrganizationsWithHttpInfoAsync(status, startDateTime, endDateTime, pageNo, pageSize, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Consent Requests sent to Organizations. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Data consent status. (optional)</param>
        /// <param name="startDateTime">Start date time. (optional)</param>
        /// <param name="endDateTime">End date time. (optional)</param>
        /// <param name="pageNo">Page no. (optional, default to 1)</param>
        /// <param name="pageSize">Page size. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganizationDataConsentInfoDtoPaginatedList)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Sdk.Client.ApiResponse<OrganizationDataConsentInfoDtoPaginatedList>> GetAllConsentRequestsToOrganizationsWithHttpInfoAsync(DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDateTime = default(DateTime?), DateTime? endDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (startDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "startDateTime", startDateTime));
            }
            if (endDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "endDateTime", endDateTime));
            }
            if (pageNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "pageNo", pageNo));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OrganizationDataConsentInfoDtoPaginatedList>("/v1/consent-requests/organizations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllConsentRequestsToOrganizations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Consent Request by ID. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Individual consent request id.</param>
        /// <returns>DataConsentDetailsDto</returns>
        public DataConsentDetailsDto GetIndividualConsentRequestById(Guid requestId)
        {
            MyDataMyConsent.Sdk.Client.ApiResponse<DataConsentDetailsDto> localVarResponse = GetIndividualConsentRequestByIdWithHttpInfo(requestId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Consent Request by ID. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Individual consent request id.</param>
        /// <returns>ApiResponse of DataConsentDetailsDto</returns>
        public MyDataMyConsent.Sdk.Client.ApiResponse<DataConsentDetailsDto> GetIndividualConsentRequestByIdWithHttpInfo(Guid requestId)
        {
            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToString(requestId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<DataConsentDetailsDto>("/v1/consent-requests/individuals/{requestId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIndividualConsentRequestById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Consent Request by ID. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Individual consent request id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataConsentDetailsDto</returns>
        public async System.Threading.Tasks.Task<DataConsentDetailsDto> GetIndividualConsentRequestByIdAsync(Guid requestId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Sdk.Client.ApiResponse<DataConsentDetailsDto> localVarResponse = await GetIndividualConsentRequestByIdWithHttpInfoAsync(requestId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Consent Request by ID. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Individual consent request id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataConsentDetailsDto)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Sdk.Client.ApiResponse<DataConsentDetailsDto>> GetIndividualConsentRequestByIdWithHttpInfoAsync(Guid requestId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToString(requestId)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DataConsentDetailsDto>("/v1/consent-requests/individuals/{requestId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIndividualConsentRequestById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a OrganizationConsent Request by Id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Organization consent request id.</param>
        /// <returns>DataConsentDetailsDto</returns>
        public DataConsentDetailsDto GetOrganizationConsentRequestById(Guid requestId)
        {
            MyDataMyConsent.Sdk.Client.ApiResponse<DataConsentDetailsDto> localVarResponse = GetOrganizationConsentRequestByIdWithHttpInfo(requestId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a OrganizationConsent Request by Id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Organization consent request id.</param>
        /// <returns>ApiResponse of DataConsentDetailsDto</returns>
        public MyDataMyConsent.Sdk.Client.ApiResponse<DataConsentDetailsDto> GetOrganizationConsentRequestByIdWithHttpInfo(Guid requestId)
        {
            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToString(requestId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<DataConsentDetailsDto>("/v1/consent-requests/organizations/{requestId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganizationConsentRequestById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a OrganizationConsent Request by Id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Organization consent request id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataConsentDetailsDto</returns>
        public async System.Threading.Tasks.Task<DataConsentDetailsDto> GetOrganizationConsentRequestByIdAsync(Guid requestId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Sdk.Client.ApiResponse<DataConsentDetailsDto> localVarResponse = await GetOrganizationConsentRequestByIdWithHttpInfoAsync(requestId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a OrganizationConsent Request by Id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Organization consent request id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataConsentDetailsDto)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Sdk.Client.ApiResponse<DataConsentDetailsDto>> GetOrganizationConsentRequestByIdWithHttpInfoAsync(Guid requestId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToString(requestId)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DataConsentDetailsDto>("/v1/consent-requests/organizations/{requestId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganizationConsentRequestById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
