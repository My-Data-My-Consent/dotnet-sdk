/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using MyDataMyConsent.Sdk.Client;
using MyDataMyConsent.Sdk.Models;

namespace MyDataMyConsent.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataConsentRequestsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel the individual data consent request by Id.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Individual consent request id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CancelIndividualDataConsentRequest(Guid requestId, int operationIndex = 0);

        /// <summary>
        /// Cancel the individual data consent request by Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Individual consent request id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CancelIndividualDataConsentRequestWithHttpInfo(Guid requestId, int operationIndex = 0);
        /// <summary>
        /// Cancel the organization data consent request by Id.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Organization consent request id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CancelOrganizationDataConsentRequest(Guid requestId, int operationIndex = 0);

        /// <summary>
        /// Cancel the organization data consent request by Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Organization consent request id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CancelOrganizationDataConsentRequestWithHttpInfo(Guid requestId, int operationIndex = 0);
        /// <summary>
        /// Create data consent request for an individual.
        /// </summary>
        /// <remarks>
        /// Create data consent request for an individual.
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataConsentRequest">The Individual data consent request payload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IndividualDataConsentRequestDetails</returns>
        IndividualDataConsentRequestDetails CreateIndividualDataConsentRequest(CreateDataConsentRequest createDataConsentRequest, int operationIndex = 0);

        /// <summary>
        /// Create data consent request for an individual.
        /// </summary>
        /// <remarks>
        /// Create data consent request for an individual.
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataConsentRequest">The Individual data consent request payload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IndividualDataConsentRequestDetails</returns>
        ApiResponse<IndividualDataConsentRequestDetails> CreateIndividualDataConsentRequestWithHttpInfo(CreateDataConsentRequest createDataConsentRequest, int operationIndex = 0);
        /// <summary>
        /// Create data consent request for an organization.
        /// </summary>
        /// <remarks>
        /// Create data consent request for an organization.
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataConsentRequest">The Organization data consent request payload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrganizationDataConsentRequestDetails</returns>
        OrganizationDataConsentRequestDetails CreateOrganizationDataConsentRequest(CreateDataConsentRequest createDataConsentRequest, int operationIndex = 0);

        /// <summary>
        /// Create data consent request for an organization.
        /// </summary>
        /// <remarks>
        /// Create data consent request for an organization.
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataConsentRequest">The Organization data consent request payload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrganizationDataConsentRequestDetails</returns>
        ApiResponse<OrganizationDataConsentRequestDetails> CreateOrganizationDataConsentRequestWithHttpInfo(CreateDataConsentRequest createDataConsentRequest, int operationIndex = 0);
        /// <summary>
        /// Get all Consent Requests sent to individuals.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Data consent status. (optional)</param>
        /// <param name="startDateTime">Start datetime in UTC timezone. (optional)</param>
        /// <param name="endDateTime">End datetime in UTC timezone. (optional)</param>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IndividualDataConsentRequestDetailsPaginatedList</returns>
        IndividualDataConsentRequestDetailsPaginatedList GetAllConsentRequestsToIndividuals(DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDateTime = default(DateTime?), DateTime? endDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get all Consent Requests sent to individuals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Data consent status. (optional)</param>
        /// <param name="startDateTime">Start datetime in UTC timezone. (optional)</param>
        /// <param name="endDateTime">End datetime in UTC timezone. (optional)</param>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IndividualDataConsentRequestDetailsPaginatedList</returns>
        ApiResponse<IndividualDataConsentRequestDetailsPaginatedList> GetAllConsentRequestsToIndividualsWithHttpInfo(DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDateTime = default(DateTime?), DateTime? endDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get all Consent Requests sent to organizations.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Data consent status. (optional)</param>
        /// <param name="startDateTime">Start datetime in UTC timezone. (optional)</param>
        /// <param name="endDateTime">End datetime in UTC timezone. (optional)</param>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrganizationDataConsentRequestDetailsPaginatedList</returns>
        OrganizationDataConsentRequestDetailsPaginatedList GetAllConsentRequestsToOrganizations(DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDateTime = default(DateTime?), DateTime? endDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get all Consent Requests sent to organizations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Data consent status. (optional)</param>
        /// <param name="startDateTime">Start datetime in UTC timezone. (optional)</param>
        /// <param name="endDateTime">End datetime in UTC timezone. (optional)</param>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrganizationDataConsentRequestDetailsPaginatedList</returns>
        ApiResponse<OrganizationDataConsentRequestDetailsPaginatedList> GetAllConsentRequestsToOrganizationsWithHttpInfo(DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDateTime = default(DateTime?), DateTime? endDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get individual data consent request by id.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Individual data consent request id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DataConsentRequest</returns>
        DataConsentRequest GetIndividualConsentRequestById(Guid requestId, int operationIndex = 0);

        /// <summary>
        /// Get individual data consent request by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Individual data consent request id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DataConsentRequest</returns>
        ApiResponse<DataConsentRequest> GetIndividualConsentRequestByIdWithHttpInfo(Guid requestId, int operationIndex = 0);
        /// <summary>
        /// Get a OrganizationConsent Request by Id.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Organization consent request id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DataConsentRequest</returns>
        DataConsentRequest GetOrganizationConsentRequestById(Guid requestId, int operationIndex = 0);

        /// <summary>
        /// Get a OrganizationConsent Request by Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Organization consent request id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DataConsentRequest</returns>
        ApiResponse<DataConsentRequest> GetOrganizationConsentRequestByIdWithHttpInfo(Guid requestId, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataConsentRequestsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Cancel the individual data consent request by Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Individual consent request id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CancelIndividualDataConsentRequestAsync(Guid requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel the individual data consent request by Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Individual consent request id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelIndividualDataConsentRequestWithHttpInfoAsync(Guid requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Cancel the organization data consent request by Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Organization consent request id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CancelOrganizationDataConsentRequestAsync(Guid requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel the organization data consent request by Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Organization consent request id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelOrganizationDataConsentRequestWithHttpInfoAsync(Guid requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create data consent request for an individual.
        /// </summary>
        /// <remarks>
        /// Create data consent request for an individual.
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataConsentRequest">The Individual data consent request payload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IndividualDataConsentRequestDetails</returns>
        System.Threading.Tasks.Task<IndividualDataConsentRequestDetails> CreateIndividualDataConsentRequestAsync(CreateDataConsentRequest createDataConsentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create data consent request for an individual.
        /// </summary>
        /// <remarks>
        /// Create data consent request for an individual.
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataConsentRequest">The Individual data consent request payload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IndividualDataConsentRequestDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<IndividualDataConsentRequestDetails>> CreateIndividualDataConsentRequestWithHttpInfoAsync(CreateDataConsentRequest createDataConsentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create data consent request for an organization.
        /// </summary>
        /// <remarks>
        /// Create data consent request for an organization.
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataConsentRequest">The Organization data consent request payload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganizationDataConsentRequestDetails</returns>
        System.Threading.Tasks.Task<OrganizationDataConsentRequestDetails> CreateOrganizationDataConsentRequestAsync(CreateDataConsentRequest createDataConsentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create data consent request for an organization.
        /// </summary>
        /// <remarks>
        /// Create data consent request for an organization.
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataConsentRequest">The Organization data consent request payload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganizationDataConsentRequestDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationDataConsentRequestDetails>> CreateOrganizationDataConsentRequestWithHttpInfoAsync(CreateDataConsentRequest createDataConsentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all Consent Requests sent to individuals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Data consent status. (optional)</param>
        /// <param name="startDateTime">Start datetime in UTC timezone. (optional)</param>
        /// <param name="endDateTime">End datetime in UTC timezone. (optional)</param>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IndividualDataConsentRequestDetailsPaginatedList</returns>
        System.Threading.Tasks.Task<IndividualDataConsentRequestDetailsPaginatedList> GetAllConsentRequestsToIndividualsAsync(DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDateTime = default(DateTime?), DateTime? endDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all Consent Requests sent to individuals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Data consent status. (optional)</param>
        /// <param name="startDateTime">Start datetime in UTC timezone. (optional)</param>
        /// <param name="endDateTime">End datetime in UTC timezone. (optional)</param>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IndividualDataConsentRequestDetailsPaginatedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<IndividualDataConsentRequestDetailsPaginatedList>> GetAllConsentRequestsToIndividualsWithHttpInfoAsync(DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDateTime = default(DateTime?), DateTime? endDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all Consent Requests sent to organizations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Data consent status. (optional)</param>
        /// <param name="startDateTime">Start datetime in UTC timezone. (optional)</param>
        /// <param name="endDateTime">End datetime in UTC timezone. (optional)</param>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganizationDataConsentRequestDetailsPaginatedList</returns>
        System.Threading.Tasks.Task<OrganizationDataConsentRequestDetailsPaginatedList> GetAllConsentRequestsToOrganizationsAsync(DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDateTime = default(DateTime?), DateTime? endDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all Consent Requests sent to organizations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Data consent status. (optional)</param>
        /// <param name="startDateTime">Start datetime in UTC timezone. (optional)</param>
        /// <param name="endDateTime">End datetime in UTC timezone. (optional)</param>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganizationDataConsentRequestDetailsPaginatedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationDataConsentRequestDetailsPaginatedList>> GetAllConsentRequestsToOrganizationsWithHttpInfoAsync(DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDateTime = default(DateTime?), DateTime? endDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get individual data consent request by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Individual data consent request id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataConsentRequest</returns>
        System.Threading.Tasks.Task<DataConsentRequest> GetIndividualConsentRequestByIdAsync(Guid requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get individual data consent request by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Individual data consent request id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataConsentRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataConsentRequest>> GetIndividualConsentRequestByIdWithHttpInfoAsync(Guid requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a OrganizationConsent Request by Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Organization consent request id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataConsentRequest</returns>
        System.Threading.Tasks.Task<DataConsentRequest> GetOrganizationConsentRequestByIdAsync(Guid requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a OrganizationConsent Request by Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Organization consent request id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataConsentRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataConsentRequest>> GetOrganizationConsentRequestByIdWithHttpInfoAsync(Guid requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataConsentRequestsApi : IDataConsentRequestsApiSync, IDataConsentRequestsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DataConsentRequestsApi : IDataConsentRequestsApi
    {
        private MyDataMyConsent.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DataConsentRequestsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataConsentRequestsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataConsentRequestsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataConsentRequestsApi(string basePath)
        {
            this.Configuration = MyDataMyConsent.Sdk.Client.Configuration.MergeConfigurations(
                MyDataMyConsent.Sdk.Client.GlobalConfiguration.Instance,
                new MyDataMyConsent.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new MyDataMyConsent.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MyDataMyConsent.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = MyDataMyConsent.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataConsentRequestsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DataConsentRequestsApi(MyDataMyConsent.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = MyDataMyConsent.Sdk.Client.Configuration.MergeConfigurations(
                MyDataMyConsent.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new MyDataMyConsent.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MyDataMyConsent.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = MyDataMyConsent.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataConsentRequestsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DataConsentRequestsApi(MyDataMyConsent.Sdk.Client.ISynchronousClient client, MyDataMyConsent.Sdk.Client.IAsynchronousClient asyncClient, MyDataMyConsent.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = MyDataMyConsent.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public MyDataMyConsent.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public MyDataMyConsent.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public MyDataMyConsent.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MyDataMyConsent.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Cancel the individual data consent request by Id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Individual consent request id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void CancelIndividualDataConsentRequest(Guid requestId, int operationIndex = 0)
        {
            CancelIndividualDataConsentRequestWithHttpInfo(requestId);
        }

        /// <summary>
        /// Cancel the individual data consent request by Id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Individual consent request id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public MyDataMyConsent.Sdk.Client.ApiResponse<Object> CancelIndividualDataConsentRequestWithHttpInfo(Guid requestId, int operationIndex = 0)
        {
            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToString(requestId)); // path parameter

            localVarRequestOptions.Operation = "DataConsentRequestsApi.CancelIndividualDataConsentRequest";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/v1/consent-requests/individual/{requestId}/cancel", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelIndividualDataConsentRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel the individual data consent request by Id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Individual consent request id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CancelIndividualDataConsentRequestAsync(Guid requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CancelIndividualDataConsentRequestWithHttpInfoAsync(requestId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Cancel the individual data consent request by Id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Individual consent request id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Sdk.Client.ApiResponse<Object>> CancelIndividualDataConsentRequestWithHttpInfoAsync(Guid requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToString(requestId)); // path parameter

            localVarRequestOptions.Operation = "DataConsentRequestsApi.CancelIndividualDataConsentRequest";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/v1/consent-requests/individual/{requestId}/cancel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelIndividualDataConsentRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel the organization data consent request by Id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Organization consent request id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void CancelOrganizationDataConsentRequest(Guid requestId, int operationIndex = 0)
        {
            CancelOrganizationDataConsentRequestWithHttpInfo(requestId);
        }

        /// <summary>
        /// Cancel the organization data consent request by Id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Organization consent request id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public MyDataMyConsent.Sdk.Client.ApiResponse<Object> CancelOrganizationDataConsentRequestWithHttpInfo(Guid requestId, int operationIndex = 0)
        {
            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToString(requestId)); // path parameter

            localVarRequestOptions.Operation = "DataConsentRequestsApi.CancelOrganizationDataConsentRequest";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/v1/consent-requests/organization/{requestId}/cancel", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelOrganizationDataConsentRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel the organization data consent request by Id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Organization consent request id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CancelOrganizationDataConsentRequestAsync(Guid requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CancelOrganizationDataConsentRequestWithHttpInfoAsync(requestId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Cancel the organization data consent request by Id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Organization consent request id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Sdk.Client.ApiResponse<Object>> CancelOrganizationDataConsentRequestWithHttpInfoAsync(Guid requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToString(requestId)); // path parameter

            localVarRequestOptions.Operation = "DataConsentRequestsApi.CancelOrganizationDataConsentRequest";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/v1/consent-requests/organization/{requestId}/cancel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelOrganizationDataConsentRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create data consent request for an individual. Create data consent request for an individual.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataConsentRequest">The Individual data consent request payload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IndividualDataConsentRequestDetails</returns>
        public IndividualDataConsentRequestDetails CreateIndividualDataConsentRequest(CreateDataConsentRequest createDataConsentRequest, int operationIndex = 0)
        {
            MyDataMyConsent.Sdk.Client.ApiResponse<IndividualDataConsentRequestDetails> localVarResponse = CreateIndividualDataConsentRequestWithHttpInfo(createDataConsentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create data consent request for an individual. Create data consent request for an individual.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataConsentRequest">The Individual data consent request payload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IndividualDataConsentRequestDetails</returns>
        public MyDataMyConsent.Sdk.Client.ApiResponse<IndividualDataConsentRequestDetails> CreateIndividualDataConsentRequestWithHttpInfo(CreateDataConsentRequest createDataConsentRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createDataConsentRequest' is set
            if (createDataConsentRequest == null)
            {
                throw new MyDataMyConsent.Sdk.Client.ApiException(400, "Missing required parameter 'createDataConsentRequest' when calling DataConsentRequestsApi->CreateIndividualDataConsentRequest");
            }

            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createDataConsentRequest;

            localVarRequestOptions.Operation = "DataConsentRequestsApi.CreateIndividualDataConsentRequest";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<IndividualDataConsentRequestDetails>("/v1/consent-requests/individual", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateIndividualDataConsentRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create data consent request for an individual. Create data consent request for an individual.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataConsentRequest">The Individual data consent request payload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IndividualDataConsentRequestDetails</returns>
        public async System.Threading.Tasks.Task<IndividualDataConsentRequestDetails> CreateIndividualDataConsentRequestAsync(CreateDataConsentRequest createDataConsentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Sdk.Client.ApiResponse<IndividualDataConsentRequestDetails> localVarResponse = await CreateIndividualDataConsentRequestWithHttpInfoAsync(createDataConsentRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create data consent request for an individual. Create data consent request for an individual.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataConsentRequest">The Individual data consent request payload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IndividualDataConsentRequestDetails)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Sdk.Client.ApiResponse<IndividualDataConsentRequestDetails>> CreateIndividualDataConsentRequestWithHttpInfoAsync(CreateDataConsentRequest createDataConsentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createDataConsentRequest' is set
            if (createDataConsentRequest == null)
            {
                throw new MyDataMyConsent.Sdk.Client.ApiException(400, "Missing required parameter 'createDataConsentRequest' when calling DataConsentRequestsApi->CreateIndividualDataConsentRequest");
            }


            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createDataConsentRequest;

            localVarRequestOptions.Operation = "DataConsentRequestsApi.CreateIndividualDataConsentRequest";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IndividualDataConsentRequestDetails>("/v1/consent-requests/individual", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateIndividualDataConsentRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create data consent request for an organization. Create data consent request for an organization.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataConsentRequest">The Organization data consent request payload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrganizationDataConsentRequestDetails</returns>
        public OrganizationDataConsentRequestDetails CreateOrganizationDataConsentRequest(CreateDataConsentRequest createDataConsentRequest, int operationIndex = 0)
        {
            MyDataMyConsent.Sdk.Client.ApiResponse<OrganizationDataConsentRequestDetails> localVarResponse = CreateOrganizationDataConsentRequestWithHttpInfo(createDataConsentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create data consent request for an organization. Create data consent request for an organization.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataConsentRequest">The Organization data consent request payload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrganizationDataConsentRequestDetails</returns>
        public MyDataMyConsent.Sdk.Client.ApiResponse<OrganizationDataConsentRequestDetails> CreateOrganizationDataConsentRequestWithHttpInfo(CreateDataConsentRequest createDataConsentRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createDataConsentRequest' is set
            if (createDataConsentRequest == null)
            {
                throw new MyDataMyConsent.Sdk.Client.ApiException(400, "Missing required parameter 'createDataConsentRequest' when calling DataConsentRequestsApi->CreateOrganizationDataConsentRequest");
            }

            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createDataConsentRequest;

            localVarRequestOptions.Operation = "DataConsentRequestsApi.CreateOrganizationDataConsentRequest";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<OrganizationDataConsentRequestDetails>("/v1/consent-requests/organization", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrganizationDataConsentRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create data consent request for an organization. Create data consent request for an organization.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataConsentRequest">The Organization data consent request payload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganizationDataConsentRequestDetails</returns>
        public async System.Threading.Tasks.Task<OrganizationDataConsentRequestDetails> CreateOrganizationDataConsentRequestAsync(CreateDataConsentRequest createDataConsentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Sdk.Client.ApiResponse<OrganizationDataConsentRequestDetails> localVarResponse = await CreateOrganizationDataConsentRequestWithHttpInfoAsync(createDataConsentRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create data consent request for an organization. Create data consent request for an organization.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataConsentRequest">The Organization data consent request payload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganizationDataConsentRequestDetails)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Sdk.Client.ApiResponse<OrganizationDataConsentRequestDetails>> CreateOrganizationDataConsentRequestWithHttpInfoAsync(CreateDataConsentRequest createDataConsentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createDataConsentRequest' is set
            if (createDataConsentRequest == null)
            {
                throw new MyDataMyConsent.Sdk.Client.ApiException(400, "Missing required parameter 'createDataConsentRequest' when calling DataConsentRequestsApi->CreateOrganizationDataConsentRequest");
            }


            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createDataConsentRequest;

            localVarRequestOptions.Operation = "DataConsentRequestsApi.CreateOrganizationDataConsentRequest";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OrganizationDataConsentRequestDetails>("/v1/consent-requests/organization", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrganizationDataConsentRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all Consent Requests sent to individuals. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Data consent status. (optional)</param>
        /// <param name="startDateTime">Start datetime in UTC timezone. (optional)</param>
        /// <param name="endDateTime">End datetime in UTC timezone. (optional)</param>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IndividualDataConsentRequestDetailsPaginatedList</returns>
        public IndividualDataConsentRequestDetailsPaginatedList GetAllConsentRequestsToIndividuals(DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDateTime = default(DateTime?), DateTime? endDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            MyDataMyConsent.Sdk.Client.ApiResponse<IndividualDataConsentRequestDetailsPaginatedList> localVarResponse = GetAllConsentRequestsToIndividualsWithHttpInfo(status, startDateTime, endDateTime, pageNo, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all Consent Requests sent to individuals. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Data consent status. (optional)</param>
        /// <param name="startDateTime">Start datetime in UTC timezone. (optional)</param>
        /// <param name="endDateTime">End datetime in UTC timezone. (optional)</param>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IndividualDataConsentRequestDetailsPaginatedList</returns>
        public MyDataMyConsent.Sdk.Client.ApiResponse<IndividualDataConsentRequestDetailsPaginatedList> GetAllConsentRequestsToIndividualsWithHttpInfo(DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDateTime = default(DateTime?), DateTime? endDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (startDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "startDateTime", startDateTime));
            }
            if (endDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "endDateTime", endDateTime));
            }
            if (pageNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "pageNo", pageNo));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            localVarRequestOptions.Operation = "DataConsentRequestsApi.GetAllConsentRequestsToIndividuals";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<IndividualDataConsentRequestDetailsPaginatedList>("/v1/consent-requests/individuals", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllConsentRequestsToIndividuals", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all Consent Requests sent to individuals. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Data consent status. (optional)</param>
        /// <param name="startDateTime">Start datetime in UTC timezone. (optional)</param>
        /// <param name="endDateTime">End datetime in UTC timezone. (optional)</param>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IndividualDataConsentRequestDetailsPaginatedList</returns>
        public async System.Threading.Tasks.Task<IndividualDataConsentRequestDetailsPaginatedList> GetAllConsentRequestsToIndividualsAsync(DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDateTime = default(DateTime?), DateTime? endDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Sdk.Client.ApiResponse<IndividualDataConsentRequestDetailsPaginatedList> localVarResponse = await GetAllConsentRequestsToIndividualsWithHttpInfoAsync(status, startDateTime, endDateTime, pageNo, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all Consent Requests sent to individuals. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Data consent status. (optional)</param>
        /// <param name="startDateTime">Start datetime in UTC timezone. (optional)</param>
        /// <param name="endDateTime">End datetime in UTC timezone. (optional)</param>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IndividualDataConsentRequestDetailsPaginatedList)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Sdk.Client.ApiResponse<IndividualDataConsentRequestDetailsPaginatedList>> GetAllConsentRequestsToIndividualsWithHttpInfoAsync(DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDateTime = default(DateTime?), DateTime? endDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (startDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "startDateTime", startDateTime));
            }
            if (endDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "endDateTime", endDateTime));
            }
            if (pageNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "pageNo", pageNo));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            localVarRequestOptions.Operation = "DataConsentRequestsApi.GetAllConsentRequestsToIndividuals";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<IndividualDataConsentRequestDetailsPaginatedList>("/v1/consent-requests/individuals", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllConsentRequestsToIndividuals", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all Consent Requests sent to organizations. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Data consent status. (optional)</param>
        /// <param name="startDateTime">Start datetime in UTC timezone. (optional)</param>
        /// <param name="endDateTime">End datetime in UTC timezone. (optional)</param>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrganizationDataConsentRequestDetailsPaginatedList</returns>
        public OrganizationDataConsentRequestDetailsPaginatedList GetAllConsentRequestsToOrganizations(DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDateTime = default(DateTime?), DateTime? endDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            MyDataMyConsent.Sdk.Client.ApiResponse<OrganizationDataConsentRequestDetailsPaginatedList> localVarResponse = GetAllConsentRequestsToOrganizationsWithHttpInfo(status, startDateTime, endDateTime, pageNo, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all Consent Requests sent to organizations. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Data consent status. (optional)</param>
        /// <param name="startDateTime">Start datetime in UTC timezone. (optional)</param>
        /// <param name="endDateTime">End datetime in UTC timezone. (optional)</param>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrganizationDataConsentRequestDetailsPaginatedList</returns>
        public MyDataMyConsent.Sdk.Client.ApiResponse<OrganizationDataConsentRequestDetailsPaginatedList> GetAllConsentRequestsToOrganizationsWithHttpInfo(DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDateTime = default(DateTime?), DateTime? endDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (startDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "startDateTime", startDateTime));
            }
            if (endDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "endDateTime", endDateTime));
            }
            if (pageNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "pageNo", pageNo));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            localVarRequestOptions.Operation = "DataConsentRequestsApi.GetAllConsentRequestsToOrganizations";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<OrganizationDataConsentRequestDetailsPaginatedList>("/v1/consent-requests/organizations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllConsentRequestsToOrganizations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all Consent Requests sent to organizations. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Data consent status. (optional)</param>
        /// <param name="startDateTime">Start datetime in UTC timezone. (optional)</param>
        /// <param name="endDateTime">End datetime in UTC timezone. (optional)</param>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganizationDataConsentRequestDetailsPaginatedList</returns>
        public async System.Threading.Tasks.Task<OrganizationDataConsentRequestDetailsPaginatedList> GetAllConsentRequestsToOrganizationsAsync(DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDateTime = default(DateTime?), DateTime? endDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Sdk.Client.ApiResponse<OrganizationDataConsentRequestDetailsPaginatedList> localVarResponse = await GetAllConsentRequestsToOrganizationsWithHttpInfoAsync(status, startDateTime, endDateTime, pageNo, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all Consent Requests sent to organizations. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Data consent status. (optional)</param>
        /// <param name="startDateTime">Start datetime in UTC timezone. (optional)</param>
        /// <param name="endDateTime">End datetime in UTC timezone. (optional)</param>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganizationDataConsentRequestDetailsPaginatedList)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Sdk.Client.ApiResponse<OrganizationDataConsentRequestDetailsPaginatedList>> GetAllConsentRequestsToOrganizationsWithHttpInfoAsync(DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDateTime = default(DateTime?), DateTime? endDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (startDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "startDateTime", startDateTime));
            }
            if (endDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "endDateTime", endDateTime));
            }
            if (pageNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "pageNo", pageNo));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            localVarRequestOptions.Operation = "DataConsentRequestsApi.GetAllConsentRequestsToOrganizations";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OrganizationDataConsentRequestDetailsPaginatedList>("/v1/consent-requests/organizations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllConsentRequestsToOrganizations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get individual data consent request by id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Individual data consent request id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DataConsentRequest</returns>
        public DataConsentRequest GetIndividualConsentRequestById(Guid requestId, int operationIndex = 0)
        {
            MyDataMyConsent.Sdk.Client.ApiResponse<DataConsentRequest> localVarResponse = GetIndividualConsentRequestByIdWithHttpInfo(requestId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get individual data consent request by id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Individual data consent request id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DataConsentRequest</returns>
        public MyDataMyConsent.Sdk.Client.ApiResponse<DataConsentRequest> GetIndividualConsentRequestByIdWithHttpInfo(Guid requestId, int operationIndex = 0)
        {
            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToString(requestId)); // path parameter

            localVarRequestOptions.Operation = "DataConsentRequestsApi.GetIndividualConsentRequestById";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<DataConsentRequest>("/v1/consent-requests/individuals/{requestId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIndividualConsentRequestById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get individual data consent request by id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Individual data consent request id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataConsentRequest</returns>
        public async System.Threading.Tasks.Task<DataConsentRequest> GetIndividualConsentRequestByIdAsync(Guid requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Sdk.Client.ApiResponse<DataConsentRequest> localVarResponse = await GetIndividualConsentRequestByIdWithHttpInfoAsync(requestId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get individual data consent request by id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Individual data consent request id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataConsentRequest)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Sdk.Client.ApiResponse<DataConsentRequest>> GetIndividualConsentRequestByIdWithHttpInfoAsync(Guid requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToString(requestId)); // path parameter

            localVarRequestOptions.Operation = "DataConsentRequestsApi.GetIndividualConsentRequestById";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DataConsentRequest>("/v1/consent-requests/individuals/{requestId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIndividualConsentRequestById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a OrganizationConsent Request by Id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Organization consent request id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DataConsentRequest</returns>
        public DataConsentRequest GetOrganizationConsentRequestById(Guid requestId, int operationIndex = 0)
        {
            MyDataMyConsent.Sdk.Client.ApiResponse<DataConsentRequest> localVarResponse = GetOrganizationConsentRequestByIdWithHttpInfo(requestId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a OrganizationConsent Request by Id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Organization consent request id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DataConsentRequest</returns>
        public MyDataMyConsent.Sdk.Client.ApiResponse<DataConsentRequest> GetOrganizationConsentRequestByIdWithHttpInfo(Guid requestId, int operationIndex = 0)
        {
            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToString(requestId)); // path parameter

            localVarRequestOptions.Operation = "DataConsentRequestsApi.GetOrganizationConsentRequestById";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<DataConsentRequest>("/v1/consent-requests/organizations/{requestId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganizationConsentRequestById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a OrganizationConsent Request by Id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Organization consent request id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataConsentRequest</returns>
        public async System.Threading.Tasks.Task<DataConsentRequest> GetOrganizationConsentRequestByIdAsync(Guid requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Sdk.Client.ApiResponse<DataConsentRequest> localVarResponse = await GetOrganizationConsentRequestByIdWithHttpInfoAsync(requestId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a OrganizationConsent Request by Id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Organization consent request id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataConsentRequest)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Sdk.Client.ApiResponse<DataConsentRequest>> GetOrganizationConsentRequestByIdWithHttpInfoAsync(Guid requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToString(requestId)); // path parameter

            localVarRequestOptions.Operation = "DataConsentRequestsApi.GetOrganizationConsentRequestById";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DataConsentRequest>("/v1/consent-requests/organizations/{requestId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganizationConsentRequestById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
