/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using MyDataMyConsent.Sdk.Client;
using MyDataMyConsent.Sdk.Models;

namespace MyDataMyConsent.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataProcessingAgreementsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a data processing agreement.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataProcessingAgreementRequestModel">Create data processing agreement MyDataMyConsent.Models.DataProcessingAgreements.CreateDataProcessingAgreementRequestModel. (optional)</param>
        /// <returns>DataProcessingAgreementDto</returns>
        DataProcessingAgreementDto CreateDataProcessingAgreement(CreateDataProcessingAgreementRequestModel createDataProcessingAgreementRequestModel = default(CreateDataProcessingAgreementRequestModel));

        /// <summary>
        /// Create a data processing agreement.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataProcessingAgreementRequestModel">Create data processing agreement MyDataMyConsent.Models.DataProcessingAgreements.CreateDataProcessingAgreementRequestModel. (optional)</param>
        /// <returns>ApiResponse of DataProcessingAgreementDto</returns>
        ApiResponse<DataProcessingAgreementDto> CreateDataProcessingAgreementWithHttpInfo(CreateDataProcessingAgreementRequestModel createDataProcessingAgreementRequestModel = default(CreateDataProcessingAgreementRequestModel));
        /// <summary>
        /// Delete a data processing agreement. This will not delete a published or a agreement in use with consents.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agreement id.</param>
        /// <returns></returns>
        void DeleteDataProcessingAgreementById(Guid id);

        /// <summary>
        /// Delete a data processing agreement. This will not delete a published or a agreement in use with consents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agreement id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteDataProcessingAgreementByIdWithHttpInfo(Guid id);
        /// <summary>
        /// Get data processing agreement by id.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agreement id.</param>
        /// <returns>DataProcessingAgreementDto</returns>
        DataProcessingAgreementDto GetDataProcessingAgreementById(Guid id);

        /// <summary>
        /// Get data processing agreement by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agreement id.</param>
        /// <returns>ApiResponse of DataProcessingAgreementDto</returns>
        ApiResponse<DataProcessingAgreementDto> GetDataProcessingAgreementByIdWithHttpInfo(Guid id);
        /// <summary>
        /// Get all data processing agreements.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <returns>DataProcessingAgreementDtoPaginatedList</returns>
        DataProcessingAgreementDtoPaginatedList GetDataProcessingAgreements(int? pageNo = default(int?), int? pageSize = default(int?));

        /// <summary>
        /// Get all data processing agreements.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <returns>ApiResponse of DataProcessingAgreementDtoPaginatedList</returns>
        ApiResponse<DataProcessingAgreementDtoPaginatedList> GetDataProcessingAgreementsWithHttpInfo(int? pageNo = default(int?), int? pageSize = default(int?));
        /// <summary>
        /// Terminate a data processing agreement.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agreement id.</param>
        /// <returns></returns>
        void TerminateDataProcessingAgreementById(Guid id);

        /// <summary>
        /// Terminate a data processing agreement.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agreement id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TerminateDataProcessingAgreementByIdWithHttpInfo(Guid id);
        /// <summary>
        /// Update a data processing agreement.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agreement id.</param>
        /// <param name="updateDataProcessingAgreementRequestModel">Updated data processing agreement MyDataMyConsent.Models.DataProcessingAgreements.UpdateDataProcessingAgreementRequestModel. (optional)</param>
        /// <returns>DataProcessingAgreementDto</returns>
        DataProcessingAgreementDto UpdateDataProcessingAgreement(Guid id, UpdateDataProcessingAgreementRequestModel updateDataProcessingAgreementRequestModel = default(UpdateDataProcessingAgreementRequestModel));

        /// <summary>
        /// Update a data processing agreement.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agreement id.</param>
        /// <param name="updateDataProcessingAgreementRequestModel">Updated data processing agreement MyDataMyConsent.Models.DataProcessingAgreements.UpdateDataProcessingAgreementRequestModel. (optional)</param>
        /// <returns>ApiResponse of DataProcessingAgreementDto</returns>
        ApiResponse<DataProcessingAgreementDto> UpdateDataProcessingAgreementWithHttpInfo(Guid id, UpdateDataProcessingAgreementRequestModel updateDataProcessingAgreementRequestModel = default(UpdateDataProcessingAgreementRequestModel));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataProcessingAgreementsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a data processing agreement.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataProcessingAgreementRequestModel">Create data processing agreement MyDataMyConsent.Models.DataProcessingAgreements.CreateDataProcessingAgreementRequestModel. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataProcessingAgreementDto</returns>
        System.Threading.Tasks.Task<DataProcessingAgreementDto> CreateDataProcessingAgreementAsync(CreateDataProcessingAgreementRequestModel createDataProcessingAgreementRequestModel = default(CreateDataProcessingAgreementRequestModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a data processing agreement.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataProcessingAgreementRequestModel">Create data processing agreement MyDataMyConsent.Models.DataProcessingAgreements.CreateDataProcessingAgreementRequestModel. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataProcessingAgreementDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataProcessingAgreementDto>> CreateDataProcessingAgreementWithHttpInfoAsync(CreateDataProcessingAgreementRequestModel createDataProcessingAgreementRequestModel = default(CreateDataProcessingAgreementRequestModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a data processing agreement. This will not delete a published or a agreement in use with consents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agreement id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteDataProcessingAgreementByIdAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a data processing agreement. This will not delete a published or a agreement in use with consents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agreement id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDataProcessingAgreementByIdWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get data processing agreement by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agreement id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataProcessingAgreementDto</returns>
        System.Threading.Tasks.Task<DataProcessingAgreementDto> GetDataProcessingAgreementByIdAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get data processing agreement by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agreement id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataProcessingAgreementDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataProcessingAgreementDto>> GetDataProcessingAgreementByIdWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all data processing agreements.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataProcessingAgreementDtoPaginatedList</returns>
        System.Threading.Tasks.Task<DataProcessingAgreementDtoPaginatedList> GetDataProcessingAgreementsAsync(int? pageNo = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all data processing agreements.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataProcessingAgreementDtoPaginatedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataProcessingAgreementDtoPaginatedList>> GetDataProcessingAgreementsWithHttpInfoAsync(int? pageNo = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Terminate a data processing agreement.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agreement id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TerminateDataProcessingAgreementByIdAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Terminate a data processing agreement.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agreement id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TerminateDataProcessingAgreementByIdWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a data processing agreement.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agreement id.</param>
        /// <param name="updateDataProcessingAgreementRequestModel">Updated data processing agreement MyDataMyConsent.Models.DataProcessingAgreements.UpdateDataProcessingAgreementRequestModel. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataProcessingAgreementDto</returns>
        System.Threading.Tasks.Task<DataProcessingAgreementDto> UpdateDataProcessingAgreementAsync(Guid id, UpdateDataProcessingAgreementRequestModel updateDataProcessingAgreementRequestModel = default(UpdateDataProcessingAgreementRequestModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a data processing agreement.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agreement id.</param>
        /// <param name="updateDataProcessingAgreementRequestModel">Updated data processing agreement MyDataMyConsent.Models.DataProcessingAgreements.UpdateDataProcessingAgreementRequestModel. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataProcessingAgreementDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataProcessingAgreementDto>> UpdateDataProcessingAgreementWithHttpInfoAsync(Guid id, UpdateDataProcessingAgreementRequestModel updateDataProcessingAgreementRequestModel = default(UpdateDataProcessingAgreementRequestModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataProcessingAgreementsApi : IDataProcessingAgreementsApiSync, IDataProcessingAgreementsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DataProcessingAgreementsApi : IDataProcessingAgreementsApi
    {
        private MyDataMyConsent.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DataProcessingAgreementsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataProcessingAgreementsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataProcessingAgreementsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataProcessingAgreementsApi(string basePath)
        {
            this.Configuration = MyDataMyConsent.Sdk.Client.Configuration.MergeConfigurations(
                MyDataMyConsent.Sdk.Client.GlobalConfiguration.Instance,
                new MyDataMyConsent.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new MyDataMyConsent.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MyDataMyConsent.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = MyDataMyConsent.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataProcessingAgreementsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DataProcessingAgreementsApi(MyDataMyConsent.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = MyDataMyConsent.Sdk.Client.Configuration.MergeConfigurations(
                MyDataMyConsent.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new MyDataMyConsent.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MyDataMyConsent.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = MyDataMyConsent.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataProcessingAgreementsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DataProcessingAgreementsApi(MyDataMyConsent.Sdk.Client.ISynchronousClient client, MyDataMyConsent.Sdk.Client.IAsynchronousClient asyncClient, MyDataMyConsent.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = MyDataMyConsent.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public MyDataMyConsent.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public MyDataMyConsent.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public MyDataMyConsent.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MyDataMyConsent.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a data processing agreement. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataProcessingAgreementRequestModel">Create data processing agreement MyDataMyConsent.Models.DataProcessingAgreements.CreateDataProcessingAgreementRequestModel. (optional)</param>
        /// <returns>DataProcessingAgreementDto</returns>
        public DataProcessingAgreementDto CreateDataProcessingAgreement(CreateDataProcessingAgreementRequestModel createDataProcessingAgreementRequestModel = default(CreateDataProcessingAgreementRequestModel))
        {
            MyDataMyConsent.Sdk.Client.ApiResponse<DataProcessingAgreementDto> localVarResponse = CreateDataProcessingAgreementWithHttpInfo(createDataProcessingAgreementRequestModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a data processing agreement. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataProcessingAgreementRequestModel">Create data processing agreement MyDataMyConsent.Models.DataProcessingAgreements.CreateDataProcessingAgreementRequestModel. (optional)</param>
        /// <returns>ApiResponse of DataProcessingAgreementDto</returns>
        public MyDataMyConsent.Sdk.Client.ApiResponse<DataProcessingAgreementDto> CreateDataProcessingAgreementWithHttpInfo(CreateDataProcessingAgreementRequestModel createDataProcessingAgreementRequestModel = default(CreateDataProcessingAgreementRequestModel))
        {
            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createDataProcessingAgreementRequestModel;


            // make the HTTP request
            var localVarResponse = this.Client.Post<DataProcessingAgreementDto>("/v1/data-agreements", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDataProcessingAgreement", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a data processing agreement. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataProcessingAgreementRequestModel">Create data processing agreement MyDataMyConsent.Models.DataProcessingAgreements.CreateDataProcessingAgreementRequestModel. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataProcessingAgreementDto</returns>
        public async System.Threading.Tasks.Task<DataProcessingAgreementDto> CreateDataProcessingAgreementAsync(CreateDataProcessingAgreementRequestModel createDataProcessingAgreementRequestModel = default(CreateDataProcessingAgreementRequestModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Sdk.Client.ApiResponse<DataProcessingAgreementDto> localVarResponse = await CreateDataProcessingAgreementWithHttpInfoAsync(createDataProcessingAgreementRequestModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a data processing agreement. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataProcessingAgreementRequestModel">Create data processing agreement MyDataMyConsent.Models.DataProcessingAgreements.CreateDataProcessingAgreementRequestModel. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataProcessingAgreementDto)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Sdk.Client.ApiResponse<DataProcessingAgreementDto>> CreateDataProcessingAgreementWithHttpInfoAsync(CreateDataProcessingAgreementRequestModel createDataProcessingAgreementRequestModel = default(CreateDataProcessingAgreementRequestModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createDataProcessingAgreementRequestModel;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DataProcessingAgreementDto>("/v1/data-agreements", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDataProcessingAgreement", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a data processing agreement. This will not delete a published or a agreement in use with consents. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agreement id.</param>
        /// <returns></returns>
        public void DeleteDataProcessingAgreementById(Guid id)
        {
            DeleteDataProcessingAgreementByIdWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a data processing agreement. This will not delete a published or a agreement in use with consents. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agreement id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public MyDataMyConsent.Sdk.Client.ApiResponse<Object> DeleteDataProcessingAgreementByIdWithHttpInfo(Guid id)
        {
            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/data-agreements/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDataProcessingAgreementById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a data processing agreement. This will not delete a published or a agreement in use with consents. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agreement id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteDataProcessingAgreementByIdAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteDataProcessingAgreementByIdWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a data processing agreement. This will not delete a published or a agreement in use with consents. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agreement id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Sdk.Client.ApiResponse<Object>> DeleteDataProcessingAgreementByIdWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/data-agreements/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDataProcessingAgreementById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get data processing agreement by id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agreement id.</param>
        /// <returns>DataProcessingAgreementDto</returns>
        public DataProcessingAgreementDto GetDataProcessingAgreementById(Guid id)
        {
            MyDataMyConsent.Sdk.Client.ApiResponse<DataProcessingAgreementDto> localVarResponse = GetDataProcessingAgreementByIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get data processing agreement by id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agreement id.</param>
        /// <returns>ApiResponse of DataProcessingAgreementDto</returns>
        public MyDataMyConsent.Sdk.Client.ApiResponse<DataProcessingAgreementDto> GetDataProcessingAgreementByIdWithHttpInfo(Guid id)
        {
            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<DataProcessingAgreementDto>("/v1/data-agreements/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDataProcessingAgreementById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get data processing agreement by id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agreement id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataProcessingAgreementDto</returns>
        public async System.Threading.Tasks.Task<DataProcessingAgreementDto> GetDataProcessingAgreementByIdAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Sdk.Client.ApiResponse<DataProcessingAgreementDto> localVarResponse = await GetDataProcessingAgreementByIdWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get data processing agreement by id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agreement id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataProcessingAgreementDto)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Sdk.Client.ApiResponse<DataProcessingAgreementDto>> GetDataProcessingAgreementByIdWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DataProcessingAgreementDto>("/v1/data-agreements/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDataProcessingAgreementById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all data processing agreements. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <returns>DataProcessingAgreementDtoPaginatedList</returns>
        public DataProcessingAgreementDtoPaginatedList GetDataProcessingAgreements(int? pageNo = default(int?), int? pageSize = default(int?))
        {
            MyDataMyConsent.Sdk.Client.ApiResponse<DataProcessingAgreementDtoPaginatedList> localVarResponse = GetDataProcessingAgreementsWithHttpInfo(pageNo, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all data processing agreements. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <returns>ApiResponse of DataProcessingAgreementDtoPaginatedList</returns>
        public MyDataMyConsent.Sdk.Client.ApiResponse<DataProcessingAgreementDtoPaginatedList> GetDataProcessingAgreementsWithHttpInfo(int? pageNo = default(int?), int? pageSize = default(int?))
        {
            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "pageNo", pageNo));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<DataProcessingAgreementDtoPaginatedList>("/v1/data-agreements", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDataProcessingAgreements", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all data processing agreements. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataProcessingAgreementDtoPaginatedList</returns>
        public async System.Threading.Tasks.Task<DataProcessingAgreementDtoPaginatedList> GetDataProcessingAgreementsAsync(int? pageNo = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Sdk.Client.ApiResponse<DataProcessingAgreementDtoPaginatedList> localVarResponse = await GetDataProcessingAgreementsWithHttpInfoAsync(pageNo, pageSize, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all data processing agreements. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataProcessingAgreementDtoPaginatedList)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Sdk.Client.ApiResponse<DataProcessingAgreementDtoPaginatedList>> GetDataProcessingAgreementsWithHttpInfoAsync(int? pageNo = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "pageNo", pageNo));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DataProcessingAgreementDtoPaginatedList>("/v1/data-agreements", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDataProcessingAgreements", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Terminate a data processing agreement. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agreement id.</param>
        /// <returns></returns>
        public void TerminateDataProcessingAgreementById(Guid id)
        {
            TerminateDataProcessingAgreementByIdWithHttpInfo(id);
        }

        /// <summary>
        /// Terminate a data processing agreement. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agreement id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public MyDataMyConsent.Sdk.Client.ApiResponse<Object> TerminateDataProcessingAgreementByIdWithHttpInfo(Guid id)
        {
            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/v1/data-agreements/{id}/terminate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TerminateDataProcessingAgreementById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Terminate a data processing agreement. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agreement id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TerminateDataProcessingAgreementByIdAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await TerminateDataProcessingAgreementByIdWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Terminate a data processing agreement. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agreement id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Sdk.Client.ApiResponse<Object>> TerminateDataProcessingAgreementByIdWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/v1/data-agreements/{id}/terminate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TerminateDataProcessingAgreementById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a data processing agreement. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agreement id.</param>
        /// <param name="updateDataProcessingAgreementRequestModel">Updated data processing agreement MyDataMyConsent.Models.DataProcessingAgreements.UpdateDataProcessingAgreementRequestModel. (optional)</param>
        /// <returns>DataProcessingAgreementDto</returns>
        public DataProcessingAgreementDto UpdateDataProcessingAgreement(Guid id, UpdateDataProcessingAgreementRequestModel updateDataProcessingAgreementRequestModel = default(UpdateDataProcessingAgreementRequestModel))
        {
            MyDataMyConsent.Sdk.Client.ApiResponse<DataProcessingAgreementDto> localVarResponse = UpdateDataProcessingAgreementWithHttpInfo(id, updateDataProcessingAgreementRequestModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a data processing agreement. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agreement id.</param>
        /// <param name="updateDataProcessingAgreementRequestModel">Updated data processing agreement MyDataMyConsent.Models.DataProcessingAgreements.UpdateDataProcessingAgreementRequestModel. (optional)</param>
        /// <returns>ApiResponse of DataProcessingAgreementDto</returns>
        public MyDataMyConsent.Sdk.Client.ApiResponse<DataProcessingAgreementDto> UpdateDataProcessingAgreementWithHttpInfo(Guid id, UpdateDataProcessingAgreementRequestModel updateDataProcessingAgreementRequestModel = default(UpdateDataProcessingAgreementRequestModel))
        {
            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = updateDataProcessingAgreementRequestModel;


            // make the HTTP request
            var localVarResponse = this.Client.Put<DataProcessingAgreementDto>("/v1/data-agreements/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDataProcessingAgreement", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a data processing agreement. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agreement id.</param>
        /// <param name="updateDataProcessingAgreementRequestModel">Updated data processing agreement MyDataMyConsent.Models.DataProcessingAgreements.UpdateDataProcessingAgreementRequestModel. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataProcessingAgreementDto</returns>
        public async System.Threading.Tasks.Task<DataProcessingAgreementDto> UpdateDataProcessingAgreementAsync(Guid id, UpdateDataProcessingAgreementRequestModel updateDataProcessingAgreementRequestModel = default(UpdateDataProcessingAgreementRequestModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Sdk.Client.ApiResponse<DataProcessingAgreementDto> localVarResponse = await UpdateDataProcessingAgreementWithHttpInfoAsync(id, updateDataProcessingAgreementRequestModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a data processing agreement. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agreement id.</param>
        /// <param name="updateDataProcessingAgreementRequestModel">Updated data processing agreement MyDataMyConsent.Models.DataProcessingAgreements.UpdateDataProcessingAgreementRequestModel. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataProcessingAgreementDto)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Sdk.Client.ApiResponse<DataProcessingAgreementDto>> UpdateDataProcessingAgreementWithHttpInfoAsync(Guid id, UpdateDataProcessingAgreementRequestModel updateDataProcessingAgreementRequestModel = default(UpdateDataProcessingAgreementRequestModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MyDataMyConsent.Sdk.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MyDataMyConsent.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = updateDataProcessingAgreementRequestModel;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<DataProcessingAgreementDto>("/v1/data-agreements/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDataProcessingAgreement", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
