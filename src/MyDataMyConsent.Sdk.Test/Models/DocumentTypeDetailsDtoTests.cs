/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using MyDataMyConsent.Sdk.Api;
using MyDataMyConsent.Sdk.Models;
using MyDataMyConsent.Sdk.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace MyDataMyConsent.Sdk.Test.Model
{
    /// <summary>
    ///  Class for testing DocumentTypeDetailsDto
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class DocumentTypeDetailsDtoTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for DocumentTypeDetailsDto
        //private DocumentTypeDetailsDto instance;

        public DocumentTypeDetailsDtoTests()
        {
            // TODO uncomment below to create an instance of DocumentTypeDetailsDto
            //instance = new DocumentTypeDetailsDto();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of DocumentTypeDetailsDto
        /// </summary>
        [Fact]
        public void DocumentTypeDetailsDtoInstanceTest()
        {
            // TODO uncomment below to test "IsType" DocumentTypeDetailsDto
            //Assert.IsType<DocumentTypeDetailsDto>(instance);
        }


        /// <summary>
        /// Test the property 'Id'
        /// </summary>
        [Fact]
        public void IdTest()
        {
            // TODO unit test for the property 'Id'
        }
        /// <summary>
        /// Test the property 'OrganizationId'
        /// </summary>
        [Fact]
        public void OrganizationIdTest()
        {
            // TODO unit test for the property 'OrganizationId'
        }
        /// <summary>
        /// Test the property 'CategoryType'
        /// </summary>
        [Fact]
        public void CategoryTypeTest()
        {
            // TODO unit test for the property 'CategoryType'
        }
        /// <summary>
        /// Test the property 'SubCategoryType'
        /// </summary>
        [Fact]
        public void SubCategoryTypeTest()
        {
            // TODO unit test for the property 'SubCategoryType'
        }
        /// <summary>
        /// Test the property 'DocumentTypeCategoryId'
        /// </summary>
        [Fact]
        public void DocumentTypeCategoryIdTest()
        {
            // TODO unit test for the property 'DocumentTypeCategoryId'
        }
        /// <summary>
        /// Test the property 'Name'
        /// </summary>
        [Fact]
        public void NameTest()
        {
            // TODO unit test for the property 'Name'
        }
        /// <summary>
        /// Test the property 'Slug'
        /// </summary>
        [Fact]
        public void SlugTest()
        {
            // TODO unit test for the property 'Slug'
        }
        /// <summary>
        /// Test the property 'Description'
        /// </summary>
        [Fact]
        public void DescriptionTest()
        {
            // TODO unit test for the property 'Description'
        }
        /// <summary>
        /// Test the property 'LogoUrl'
        /// </summary>
        [Fact]
        public void LogoUrlTest()
        {
            // TODO unit test for the property 'LogoUrl'
        }
        /// <summary>
        /// Test the property 'CountryIso2'
        /// </summary>
        [Fact]
        public void CountryIso2Test()
        {
            // TODO unit test for the property 'CountryIso2'
        }
        /// <summary>
        /// Test the property 'CountryId'
        /// </summary>
        [Fact]
        public void CountryIdTest()
        {
            // TODO unit test for the property 'CountryId'
        }
        /// <summary>
        /// Test the property 'SearchServiceId'
        /// </summary>
        [Fact]
        public void SearchServiceIdTest()
        {
            // TODO unit test for the property 'SearchServiceId'
        }
        /// <summary>
        /// Test the property 'RepositoryServiceId'
        /// </summary>
        [Fact]
        public void RepositoryServiceIdTest()
        {
            // TODO unit test for the property 'RepositoryServiceId'
        }
        /// <summary>
        /// Test the property 'SupportedEntityType'
        /// </summary>
        [Fact]
        public void SupportedEntityTypeTest()
        {
            // TODO unit test for the property 'SupportedEntityType'
        }
        /// <summary>
        /// Test the property 'AddedBy'
        /// </summary>
        [Fact]
        public void AddedByTest()
        {
            // TODO unit test for the property 'AddedBy'
        }
        /// <summary>
        /// Test the property 'PayableAmount'
        /// </summary>
        [Fact]
        public void PayableAmountTest()
        {
            // TODO unit test for the property 'PayableAmount'
        }
        /// <summary>
        /// Test the property 'ApprovedAtUtc'
        /// </summary>
        [Fact]
        public void ApprovedAtUtcTest()
        {
            // TODO unit test for the property 'ApprovedAtUtc'
        }

    }

}
