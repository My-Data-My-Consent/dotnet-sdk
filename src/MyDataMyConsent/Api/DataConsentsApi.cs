/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using MyDataMyConsent.Client;
using MyDataMyConsent.Models;

namespace MyDataMyConsent.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataConsentsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get individual consented financial account details based on account id.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <returns>FinancialAccount</returns>
        FinancialAccount V1ConsentsIndividualsConsentIdAccountsAccountIdGet(Guid consentId, Guid accountId);

        /// <summary>
        /// Get individual consented financial account details based on account id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <returns>ApiResponse of FinancialAccount</returns>
        ApiResponse<FinancialAccount> V1ConsentsIndividualsConsentIdAccountsAccountIdGetWithHttpInfo(Guid consentId, Guid accountId);
        /// <summary>
        /// Get consented financial account transactions of an individual based on accountId.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="filters"> (optional)</param>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="fromDate"> (optional)</param>
        /// <param name="toDate"> (optional)</param>
        /// <returns>UserAccountFinancialTransactionsDtoPaginatedList</returns>
        UserAccountFinancialTransactionsDtoPaginatedList V1ConsentsIndividualsConsentIdAccountsAccountIdTransactionsGet(Guid consentId, Guid accountId, string filters = default(string), int? pageNo = default(int?), int? pageSize = default(int?), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?));

        /// <summary>
        /// Get consented financial account transactions of an individual based on accountId.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="filters"> (optional)</param>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="fromDate"> (optional)</param>
        /// <param name="toDate"> (optional)</param>
        /// <returns>ApiResponse of UserAccountFinancialTransactionsDtoPaginatedList</returns>
        ApiResponse<UserAccountFinancialTransactionsDtoPaginatedList> V1ConsentsIndividualsConsentIdAccountsAccountIdTransactionsGetWithHttpInfo(Guid consentId, Guid accountId, string filters = default(string), int? pageNo = default(int?), int? pageSize = default(int?), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?));
        /// <summary>
        /// Get all individual financial accounts in a consent.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <returns>DataConsentFinancialsDto</returns>
        DataConsentFinancialsDto V1ConsentsIndividualsConsentIdAccountsGet(Guid consentId);

        /// <summary>
        /// Get all individual financial accounts in a consent.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <returns>ApiResponse of DataConsentFinancialsDto</returns>
        ApiResponse<DataConsentFinancialsDto> V1ConsentsIndividualsConsentIdAccountsGetWithHttpInfo(Guid consentId);
        /// <summary>
        /// Download a individuals consented document.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">consentId.</param>
        /// <param name="documentId">documentId.</param>
        /// <returns>UserDocumentDownloadDto</returns>
        UserDocumentDownloadDto V1ConsentsIndividualsConsentIdDocumentsDocumentIdDownloadGet(Guid consentId, Guid documentId);

        /// <summary>
        /// Download a individuals consented document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">consentId.</param>
        /// <param name="documentId">documentId.</param>
        /// <returns>ApiResponse of UserDocumentDownloadDto</returns>
        ApiResponse<UserDocumentDownloadDto> V1ConsentsIndividualsConsentIdDocumentsDocumentIdDownloadGetWithHttpInfo(Guid consentId, Guid documentId);
        /// <summary>
        /// Get individuals consent document based on document id.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId">Document Id.</param>
        /// <returns>UserDocumentDetailsDto</returns>
        UserDocumentDetailsDto V1ConsentsIndividualsConsentIdDocumentsDocumentIdGet(Guid consentId, Guid documentId);

        /// <summary>
        /// Get individuals consent document based on document id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId">Document Id.</param>
        /// <returns>ApiResponse of UserDocumentDetailsDto</returns>
        ApiResponse<UserDocumentDetailsDto> V1ConsentsIndividualsConsentIdDocumentsDocumentIdGetWithHttpInfo(Guid consentId, Guid documentId);
        /// <summary>
        /// Get the individual documents based on ConsentId.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <returns>DataConsentDocumentsDto</returns>
        DataConsentDocumentsDto V1ConsentsIndividualsConsentIdDocumentsGet(Guid consentId);

        /// <summary>
        /// Get the individual documents based on ConsentId.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <returns>ApiResponse of DataConsentDocumentsDto</returns>
        ApiResponse<DataConsentDocumentsDto> V1ConsentsIndividualsConsentIdDocumentsGetWithHttpInfo(Guid consentId);
        /// <summary>
        /// Get individuals consent details by consent id.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <returns>DataConsentDetailsDto</returns>
        DataConsentDetailsDto V1ConsentsIndividualsConsentIdGet(Guid consentId);

        /// <summary>
        /// Get individuals consent details by consent id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <returns>ApiResponse of DataConsentDetailsDto</returns>
        ApiResponse<DataConsentDetailsDto> V1ConsentsIndividualsConsentIdGetWithHttpInfo(Guid consentId);
        /// <summary>
        /// Get the list of Consents Sent to Individuals.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>UserDataConsentInfoDtoPaginatedList</returns>
        UserDataConsentInfoDtoPaginatedList V1ConsentsIndividualsGet(int? pageNo = default(int?), int? pageSize = default(int?), DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?));

        /// <summary>
        /// Get the list of Consents Sent to Individuals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApiResponse of UserDataConsentInfoDtoPaginatedList</returns>
        ApiResponse<UserDataConsentInfoDtoPaginatedList> V1ConsentsIndividualsGetWithHttpInfo(int? pageNo = default(int?), int? pageSize = default(int?), DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?));
        /// <summary>
        /// Get orgnization consented financial account details based on account id.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <returns>OrganizationFinancialAccountDto</returns>
        OrganizationFinancialAccountDto V1ConsentsOrganizationsConsentIdAccountsAccountIdGet(Guid consentId, Guid accountId);

        /// <summary>
        /// Get orgnization consented financial account details based on account id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <returns>ApiResponse of OrganizationFinancialAccountDto</returns>
        ApiResponse<OrganizationFinancialAccountDto> V1ConsentsOrganizationsConsentIdAccountsAccountIdGetWithHttpInfo(Guid consentId, Guid accountId);
        /// <summary>
        /// Get consented financial account transactions of an organization based on accountId.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="filters"> (optional)</param>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="fromDate"> (optional)</param>
        /// <param name="toDate"> (optional)</param>
        /// <returns>OrganizationFinancialTransactionsDtoPaginatedList</returns>
        OrganizationFinancialTransactionsDtoPaginatedList V1ConsentsOrganizationsConsentIdAccountsAccountIdTransactionsGet(Guid consentId, Guid accountId, string filters = default(string), int? pageNo = default(int?), int? pageSize = default(int?), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?));

        /// <summary>
        /// Get consented financial account transactions of an organization based on accountId.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="filters"> (optional)</param>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="fromDate"> (optional)</param>
        /// <param name="toDate"> (optional)</param>
        /// <returns>ApiResponse of OrganizationFinancialTransactionsDtoPaginatedList</returns>
        ApiResponse<OrganizationFinancialTransactionsDtoPaginatedList> V1ConsentsOrganizationsConsentIdAccountsAccountIdTransactionsGetWithHttpInfo(Guid consentId, Guid accountId, string filters = default(string), int? pageNo = default(int?), int? pageSize = default(int?), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?));
        /// <summary>
        /// Get all organizational financial accounts in a consent.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <returns>DataConsentFinancialsDto</returns>
        DataConsentFinancialsDto V1ConsentsOrganizationsConsentIdAccountsGet(Guid consentId);

        /// <summary>
        /// Get all organizational financial accounts in a consent.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <returns>ApiResponse of DataConsentFinancialsDto</returns>
        ApiResponse<DataConsentFinancialsDto> V1ConsentsOrganizationsConsentIdAccountsGetWithHttpInfo(Guid consentId);
        /// <summary>
        /// Download organizations consented document.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId"></param>
        /// <returns>OrganizationDocumentDownloadDto</returns>
        OrganizationDocumentDownloadDto V1ConsentsOrganizationsConsentIdDocumentsDocumentIdDownloadGet(Guid consentId, Guid documentId);

        /// <summary>
        /// Download organizations consented document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId"></param>
        /// <returns>ApiResponse of OrganizationDocumentDownloadDto</returns>
        ApiResponse<OrganizationDocumentDownloadDto> V1ConsentsOrganizationsConsentIdDocumentsDocumentIdDownloadGetWithHttpInfo(Guid consentId, Guid documentId);
        /// <summary>
        /// Get organizations consent document based on document id.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId"></param>
        /// <returns>OrganizationDocumentDetailsDto</returns>
        OrganizationDocumentDetailsDto V1ConsentsOrganizationsConsentIdDocumentsDocumentIdGet(Guid consentId, Guid documentId);

        /// <summary>
        /// Get organizations consent document based on document id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId"></param>
        /// <returns>ApiResponse of OrganizationDocumentDetailsDto</returns>
        ApiResponse<OrganizationDocumentDetailsDto> V1ConsentsOrganizationsConsentIdDocumentsDocumentIdGetWithHttpInfo(Guid consentId, Guid documentId);
        /// <summary>
        /// Get the organizations documents based on ConsentId.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <returns>DataConsentDocumentsDto</returns>
        DataConsentDocumentsDto V1ConsentsOrganizationsConsentIdDocumentsGet(Guid consentId);

        /// <summary>
        /// Get the organizations documents based on ConsentId.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <returns>ApiResponse of DataConsentDocumentsDto</returns>
        ApiResponse<DataConsentDocumentsDto> V1ConsentsOrganizationsConsentIdDocumentsGetWithHttpInfo(Guid consentId);
        /// <summary>
        /// Get organizations consent details by consent id.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <returns>DataConsentDetailsDto</returns>
        DataConsentDetailsDto V1ConsentsOrganizationsConsentIdGet(Guid consentId);

        /// <summary>
        /// Get organizations consent details by consent id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <returns>ApiResponse of DataConsentDetailsDto</returns>
        ApiResponse<DataConsentDetailsDto> V1ConsentsOrganizationsConsentIdGetWithHttpInfo(Guid consentId);
        /// <summary>
        /// Get the list of data consents sent for organizations.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>OrganizationDataConsentInfoDtoPaginatedList</returns>
        OrganizationDataConsentInfoDtoPaginatedList V1ConsentsOrganizationsGet(int? pageNo = default(int?), int? pageSize = default(int?), DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?));

        /// <summary>
        /// Get the list of data consents sent for organizations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApiResponse of OrganizationDataConsentInfoDtoPaginatedList</returns>
        ApiResponse<OrganizationDataConsentInfoDtoPaginatedList> V1ConsentsOrganizationsGetWithHttpInfo(int? pageNo = default(int?), int? pageSize = default(int?), DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataConsentsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get individual consented financial account details based on account id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FinancialAccount</returns>
        System.Threading.Tasks.Task<FinancialAccount> V1ConsentsIndividualsConsentIdAccountsAccountIdGetAsync(Guid consentId, Guid accountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get individual consented financial account details based on account id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FinancialAccount)</returns>
        System.Threading.Tasks.Task<ApiResponse<FinancialAccount>> V1ConsentsIndividualsConsentIdAccountsAccountIdGetWithHttpInfoAsync(Guid consentId, Guid accountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get consented financial account transactions of an individual based on accountId.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="filters"> (optional)</param>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="fromDate"> (optional)</param>
        /// <param name="toDate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserAccountFinancialTransactionsDtoPaginatedList</returns>
        System.Threading.Tasks.Task<UserAccountFinancialTransactionsDtoPaginatedList> V1ConsentsIndividualsConsentIdAccountsAccountIdTransactionsGetAsync(Guid consentId, Guid accountId, string filters = default(string), int? pageNo = default(int?), int? pageSize = default(int?), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get consented financial account transactions of an individual based on accountId.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="filters"> (optional)</param>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="fromDate"> (optional)</param>
        /// <param name="toDate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserAccountFinancialTransactionsDtoPaginatedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserAccountFinancialTransactionsDtoPaginatedList>> V1ConsentsIndividualsConsentIdAccountsAccountIdTransactionsGetWithHttpInfoAsync(Guid consentId, Guid accountId, string filters = default(string), int? pageNo = default(int?), int? pageSize = default(int?), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all individual financial accounts in a consent.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataConsentFinancialsDto</returns>
        System.Threading.Tasks.Task<DataConsentFinancialsDto> V1ConsentsIndividualsConsentIdAccountsGetAsync(Guid consentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all individual financial accounts in a consent.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataConsentFinancialsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataConsentFinancialsDto>> V1ConsentsIndividualsConsentIdAccountsGetWithHttpInfoAsync(Guid consentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Download a individuals consented document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">consentId.</param>
        /// <param name="documentId">documentId.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserDocumentDownloadDto</returns>
        System.Threading.Tasks.Task<UserDocumentDownloadDto> V1ConsentsIndividualsConsentIdDocumentsDocumentIdDownloadGetAsync(Guid consentId, Guid documentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Download a individuals consented document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">consentId.</param>
        /// <param name="documentId">documentId.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserDocumentDownloadDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserDocumentDownloadDto>> V1ConsentsIndividualsConsentIdDocumentsDocumentIdDownloadGetWithHttpInfoAsync(Guid consentId, Guid documentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get individuals consent document based on document id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId">Document Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserDocumentDetailsDto</returns>
        System.Threading.Tasks.Task<UserDocumentDetailsDto> V1ConsentsIndividualsConsentIdDocumentsDocumentIdGetAsync(Guid consentId, Guid documentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get individuals consent document based on document id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId">Document Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserDocumentDetailsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserDocumentDetailsDto>> V1ConsentsIndividualsConsentIdDocumentsDocumentIdGetWithHttpInfoAsync(Guid consentId, Guid documentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the individual documents based on ConsentId.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataConsentDocumentsDto</returns>
        System.Threading.Tasks.Task<DataConsentDocumentsDto> V1ConsentsIndividualsConsentIdDocumentsGetAsync(Guid consentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the individual documents based on ConsentId.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataConsentDocumentsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataConsentDocumentsDto>> V1ConsentsIndividualsConsentIdDocumentsGetWithHttpInfoAsync(Guid consentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get individuals consent details by consent id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataConsentDetailsDto</returns>
        System.Threading.Tasks.Task<DataConsentDetailsDto> V1ConsentsIndividualsConsentIdGetAsync(Guid consentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get individuals consent details by consent id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataConsentDetailsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataConsentDetailsDto>> V1ConsentsIndividualsConsentIdGetWithHttpInfoAsync(Guid consentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the list of Consents Sent to Individuals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserDataConsentInfoDtoPaginatedList</returns>
        System.Threading.Tasks.Task<UserDataConsentInfoDtoPaginatedList> V1ConsentsIndividualsGetAsync(int? pageNo = default(int?), int? pageSize = default(int?), DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the list of Consents Sent to Individuals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserDataConsentInfoDtoPaginatedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserDataConsentInfoDtoPaginatedList>> V1ConsentsIndividualsGetWithHttpInfoAsync(int? pageNo = default(int?), int? pageSize = default(int?), DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get orgnization consented financial account details based on account id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganizationFinancialAccountDto</returns>
        System.Threading.Tasks.Task<OrganizationFinancialAccountDto> V1ConsentsOrganizationsConsentIdAccountsAccountIdGetAsync(Guid consentId, Guid accountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get orgnization consented financial account details based on account id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganizationFinancialAccountDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationFinancialAccountDto>> V1ConsentsOrganizationsConsentIdAccountsAccountIdGetWithHttpInfoAsync(Guid consentId, Guid accountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get consented financial account transactions of an organization based on accountId.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="filters"> (optional)</param>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="fromDate"> (optional)</param>
        /// <param name="toDate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganizationFinancialTransactionsDtoPaginatedList</returns>
        System.Threading.Tasks.Task<OrganizationFinancialTransactionsDtoPaginatedList> V1ConsentsOrganizationsConsentIdAccountsAccountIdTransactionsGetAsync(Guid consentId, Guid accountId, string filters = default(string), int? pageNo = default(int?), int? pageSize = default(int?), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get consented financial account transactions of an organization based on accountId.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="filters"> (optional)</param>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="fromDate"> (optional)</param>
        /// <param name="toDate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganizationFinancialTransactionsDtoPaginatedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationFinancialTransactionsDtoPaginatedList>> V1ConsentsOrganizationsConsentIdAccountsAccountIdTransactionsGetWithHttpInfoAsync(Guid consentId, Guid accountId, string filters = default(string), int? pageNo = default(int?), int? pageSize = default(int?), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all organizational financial accounts in a consent.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataConsentFinancialsDto</returns>
        System.Threading.Tasks.Task<DataConsentFinancialsDto> V1ConsentsOrganizationsConsentIdAccountsGetAsync(Guid consentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all organizational financial accounts in a consent.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataConsentFinancialsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataConsentFinancialsDto>> V1ConsentsOrganizationsConsentIdAccountsGetWithHttpInfoAsync(Guid consentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Download organizations consented document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganizationDocumentDownloadDto</returns>
        System.Threading.Tasks.Task<OrganizationDocumentDownloadDto> V1ConsentsOrganizationsConsentIdDocumentsDocumentIdDownloadGetAsync(Guid consentId, Guid documentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Download organizations consented document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganizationDocumentDownloadDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationDocumentDownloadDto>> V1ConsentsOrganizationsConsentIdDocumentsDocumentIdDownloadGetWithHttpInfoAsync(Guid consentId, Guid documentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get organizations consent document based on document id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganizationDocumentDetailsDto</returns>
        System.Threading.Tasks.Task<OrganizationDocumentDetailsDto> V1ConsentsOrganizationsConsentIdDocumentsDocumentIdGetAsync(Guid consentId, Guid documentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get organizations consent document based on document id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganizationDocumentDetailsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationDocumentDetailsDto>> V1ConsentsOrganizationsConsentIdDocumentsDocumentIdGetWithHttpInfoAsync(Guid consentId, Guid documentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the organizations documents based on ConsentId.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataConsentDocumentsDto</returns>
        System.Threading.Tasks.Task<DataConsentDocumentsDto> V1ConsentsOrganizationsConsentIdDocumentsGetAsync(Guid consentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the organizations documents based on ConsentId.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataConsentDocumentsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataConsentDocumentsDto>> V1ConsentsOrganizationsConsentIdDocumentsGetWithHttpInfoAsync(Guid consentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get organizations consent details by consent id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataConsentDetailsDto</returns>
        System.Threading.Tasks.Task<DataConsentDetailsDto> V1ConsentsOrganizationsConsentIdGetAsync(Guid consentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get organizations consent details by consent id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataConsentDetailsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataConsentDetailsDto>> V1ConsentsOrganizationsConsentIdGetWithHttpInfoAsync(Guid consentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the list of data consents sent for organizations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganizationDataConsentInfoDtoPaginatedList</returns>
        System.Threading.Tasks.Task<OrganizationDataConsentInfoDtoPaginatedList> V1ConsentsOrganizationsGetAsync(int? pageNo = default(int?), int? pageSize = default(int?), DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the list of data consents sent for organizations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganizationDataConsentInfoDtoPaginatedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationDataConsentInfoDtoPaginatedList>> V1ConsentsOrganizationsGetWithHttpInfoAsync(int? pageNo = default(int?), int? pageSize = default(int?), DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataConsentsApi : IDataConsentsApiSync, IDataConsentsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DataConsentsApi : IDataConsentsApi
    {
        private MyDataMyConsent.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DataConsentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataConsentsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataConsentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataConsentsApi(string basePath)
        {
            this.Configuration = MyDataMyConsent.Client.Configuration.MergeConfigurations(
                MyDataMyConsent.Client.GlobalConfiguration.Instance,
                new MyDataMyConsent.Client.Configuration { BasePath = basePath }
            );
            this.Client = new MyDataMyConsent.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MyDataMyConsent.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = MyDataMyConsent.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataConsentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DataConsentsApi(MyDataMyConsent.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = MyDataMyConsent.Client.Configuration.MergeConfigurations(
                MyDataMyConsent.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new MyDataMyConsent.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MyDataMyConsent.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = MyDataMyConsent.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataConsentsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DataConsentsApi(MyDataMyConsent.Client.ISynchronousClient client, MyDataMyConsent.Client.IAsynchronousClient asyncClient, MyDataMyConsent.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = MyDataMyConsent.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public MyDataMyConsent.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public MyDataMyConsent.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public MyDataMyConsent.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MyDataMyConsent.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get individual consented financial account details based on account id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <returns>FinancialAccount</returns>
        public FinancialAccount V1ConsentsIndividualsConsentIdAccountsAccountIdGet(Guid consentId, Guid accountId)
        {
            MyDataMyConsent.Client.ApiResponse<FinancialAccount> localVarResponse = V1ConsentsIndividualsConsentIdAccountsAccountIdGetWithHttpInfo(consentId, accountId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get individual consented financial account details based on account id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <returns>ApiResponse of FinancialAccount</returns>
        public MyDataMyConsent.Client.ApiResponse<FinancialAccount> V1ConsentsIndividualsConsentIdAccountsAccountIdGetWithHttpInfo(Guid consentId, Guid accountId)
        {
            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consentId", MyDataMyConsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("accountId", MyDataMyConsent.Client.ClientUtils.ParameterToString(accountId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<FinancialAccount>("/v1/consents/individuals/{consentId}/accounts/{accountId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ConsentsIndividualsConsentIdAccountsAccountIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get individual consented financial account details based on account id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FinancialAccount</returns>
        public async System.Threading.Tasks.Task<FinancialAccount> V1ConsentsIndividualsConsentIdAccountsAccountIdGetAsync(Guid consentId, Guid accountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Client.ApiResponse<FinancialAccount> localVarResponse = await V1ConsentsIndividualsConsentIdAccountsAccountIdGetWithHttpInfoAsync(consentId, accountId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get individual consented financial account details based on account id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FinancialAccount)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Client.ApiResponse<FinancialAccount>> V1ConsentsIndividualsConsentIdAccountsAccountIdGetWithHttpInfoAsync(Guid consentId, Guid accountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consentId", MyDataMyConsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("accountId", MyDataMyConsent.Client.ClientUtils.ParameterToString(accountId)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FinancialAccount>("/v1/consents/individuals/{consentId}/accounts/{accountId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ConsentsIndividualsConsentIdAccountsAccountIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get consented financial account transactions of an individual based on accountId. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="filters"> (optional)</param>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="fromDate"> (optional)</param>
        /// <param name="toDate"> (optional)</param>
        /// <returns>UserAccountFinancialTransactionsDtoPaginatedList</returns>
        public UserAccountFinancialTransactionsDtoPaginatedList V1ConsentsIndividualsConsentIdAccountsAccountIdTransactionsGet(Guid consentId, Guid accountId, string filters = default(string), int? pageNo = default(int?), int? pageSize = default(int?), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?))
        {
            MyDataMyConsent.Client.ApiResponse<UserAccountFinancialTransactionsDtoPaginatedList> localVarResponse = V1ConsentsIndividualsConsentIdAccountsAccountIdTransactionsGetWithHttpInfo(consentId, accountId, filters, pageNo, pageSize, fromDate, toDate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get consented financial account transactions of an individual based on accountId. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="filters"> (optional)</param>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="fromDate"> (optional)</param>
        /// <param name="toDate"> (optional)</param>
        /// <returns>ApiResponse of UserAccountFinancialTransactionsDtoPaginatedList</returns>
        public MyDataMyConsent.Client.ApiResponse<UserAccountFinancialTransactionsDtoPaginatedList> V1ConsentsIndividualsConsentIdAccountsAccountIdTransactionsGetWithHttpInfo(Guid consentId, Guid accountId, string filters = default(string), int? pageNo = default(int?), int? pageSize = default(int?), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?))
        {
            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consentId", MyDataMyConsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("accountId", MyDataMyConsent.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            if (filters != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "filters", filters));
            }
            if (pageNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "pageNo", pageNo));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "fromDate", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "toDate", toDate));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<UserAccountFinancialTransactionsDtoPaginatedList>("/v1/consents/individuals/{consentId}/accounts/{accountId}/transactions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ConsentsIndividualsConsentIdAccountsAccountIdTransactionsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get consented financial account transactions of an individual based on accountId. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="filters"> (optional)</param>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="fromDate"> (optional)</param>
        /// <param name="toDate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserAccountFinancialTransactionsDtoPaginatedList</returns>
        public async System.Threading.Tasks.Task<UserAccountFinancialTransactionsDtoPaginatedList> V1ConsentsIndividualsConsentIdAccountsAccountIdTransactionsGetAsync(Guid consentId, Guid accountId, string filters = default(string), int? pageNo = default(int?), int? pageSize = default(int?), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Client.ApiResponse<UserAccountFinancialTransactionsDtoPaginatedList> localVarResponse = await V1ConsentsIndividualsConsentIdAccountsAccountIdTransactionsGetWithHttpInfoAsync(consentId, accountId, filters, pageNo, pageSize, fromDate, toDate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get consented financial account transactions of an individual based on accountId. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="filters"> (optional)</param>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="fromDate"> (optional)</param>
        /// <param name="toDate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserAccountFinancialTransactionsDtoPaginatedList)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Client.ApiResponse<UserAccountFinancialTransactionsDtoPaginatedList>> V1ConsentsIndividualsConsentIdAccountsAccountIdTransactionsGetWithHttpInfoAsync(Guid consentId, Guid accountId, string filters = default(string), int? pageNo = default(int?), int? pageSize = default(int?), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consentId", MyDataMyConsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("accountId", MyDataMyConsent.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            if (filters != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "filters", filters));
            }
            if (pageNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "pageNo", pageNo));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "fromDate", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "toDate", toDate));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserAccountFinancialTransactionsDtoPaginatedList>("/v1/consents/individuals/{consentId}/accounts/{accountId}/transactions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ConsentsIndividualsConsentIdAccountsAccountIdTransactionsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all individual financial accounts in a consent. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <returns>DataConsentFinancialsDto</returns>
        public DataConsentFinancialsDto V1ConsentsIndividualsConsentIdAccountsGet(Guid consentId)
        {
            MyDataMyConsent.Client.ApiResponse<DataConsentFinancialsDto> localVarResponse = V1ConsentsIndividualsConsentIdAccountsGetWithHttpInfo(consentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all individual financial accounts in a consent. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <returns>ApiResponse of DataConsentFinancialsDto</returns>
        public MyDataMyConsent.Client.ApiResponse<DataConsentFinancialsDto> V1ConsentsIndividualsConsentIdAccountsGetWithHttpInfo(Guid consentId)
        {
            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consentId", MyDataMyConsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<DataConsentFinancialsDto>("/v1/consents/individuals/{consentId}/accounts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ConsentsIndividualsConsentIdAccountsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all individual financial accounts in a consent. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataConsentFinancialsDto</returns>
        public async System.Threading.Tasks.Task<DataConsentFinancialsDto> V1ConsentsIndividualsConsentIdAccountsGetAsync(Guid consentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Client.ApiResponse<DataConsentFinancialsDto> localVarResponse = await V1ConsentsIndividualsConsentIdAccountsGetWithHttpInfoAsync(consentId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all individual financial accounts in a consent. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataConsentFinancialsDto)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Client.ApiResponse<DataConsentFinancialsDto>> V1ConsentsIndividualsConsentIdAccountsGetWithHttpInfoAsync(Guid consentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consentId", MyDataMyConsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DataConsentFinancialsDto>("/v1/consents/individuals/{consentId}/accounts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ConsentsIndividualsConsentIdAccountsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download a individuals consented document. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">consentId.</param>
        /// <param name="documentId">documentId.</param>
        /// <returns>UserDocumentDownloadDto</returns>
        public UserDocumentDownloadDto V1ConsentsIndividualsConsentIdDocumentsDocumentIdDownloadGet(Guid consentId, Guid documentId)
        {
            MyDataMyConsent.Client.ApiResponse<UserDocumentDownloadDto> localVarResponse = V1ConsentsIndividualsConsentIdDocumentsDocumentIdDownloadGetWithHttpInfo(consentId, documentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download a individuals consented document. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">consentId.</param>
        /// <param name="documentId">documentId.</param>
        /// <returns>ApiResponse of UserDocumentDownloadDto</returns>
        public MyDataMyConsent.Client.ApiResponse<UserDocumentDownloadDto> V1ConsentsIndividualsConsentIdDocumentsDocumentIdDownloadGetWithHttpInfo(Guid consentId, Guid documentId)
        {
            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consentId", MyDataMyConsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("documentId", MyDataMyConsent.Client.ClientUtils.ParameterToString(documentId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<UserDocumentDownloadDto>("/v1/consents/individuals/{consentId}/documents/{documentId}/download", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ConsentsIndividualsConsentIdDocumentsDocumentIdDownloadGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download a individuals consented document. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">consentId.</param>
        /// <param name="documentId">documentId.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserDocumentDownloadDto</returns>
        public async System.Threading.Tasks.Task<UserDocumentDownloadDto> V1ConsentsIndividualsConsentIdDocumentsDocumentIdDownloadGetAsync(Guid consentId, Guid documentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Client.ApiResponse<UserDocumentDownloadDto> localVarResponse = await V1ConsentsIndividualsConsentIdDocumentsDocumentIdDownloadGetWithHttpInfoAsync(consentId, documentId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download a individuals consented document. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">consentId.</param>
        /// <param name="documentId">documentId.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserDocumentDownloadDto)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Client.ApiResponse<UserDocumentDownloadDto>> V1ConsentsIndividualsConsentIdDocumentsDocumentIdDownloadGetWithHttpInfoAsync(Guid consentId, Guid documentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consentId", MyDataMyConsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("documentId", MyDataMyConsent.Client.ClientUtils.ParameterToString(documentId)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserDocumentDownloadDto>("/v1/consents/individuals/{consentId}/documents/{documentId}/download", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ConsentsIndividualsConsentIdDocumentsDocumentIdDownloadGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get individuals consent document based on document id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId">Document Id.</param>
        /// <returns>UserDocumentDetailsDto</returns>
        public UserDocumentDetailsDto V1ConsentsIndividualsConsentIdDocumentsDocumentIdGet(Guid consentId, Guid documentId)
        {
            MyDataMyConsent.Client.ApiResponse<UserDocumentDetailsDto> localVarResponse = V1ConsentsIndividualsConsentIdDocumentsDocumentIdGetWithHttpInfo(consentId, documentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get individuals consent document based on document id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId">Document Id.</param>
        /// <returns>ApiResponse of UserDocumentDetailsDto</returns>
        public MyDataMyConsent.Client.ApiResponse<UserDocumentDetailsDto> V1ConsentsIndividualsConsentIdDocumentsDocumentIdGetWithHttpInfo(Guid consentId, Guid documentId)
        {
            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consentId", MyDataMyConsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("documentId", MyDataMyConsent.Client.ClientUtils.ParameterToString(documentId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<UserDocumentDetailsDto>("/v1/consents/individuals/{consentId}/documents/{documentId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ConsentsIndividualsConsentIdDocumentsDocumentIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get individuals consent document based on document id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId">Document Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserDocumentDetailsDto</returns>
        public async System.Threading.Tasks.Task<UserDocumentDetailsDto> V1ConsentsIndividualsConsentIdDocumentsDocumentIdGetAsync(Guid consentId, Guid documentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Client.ApiResponse<UserDocumentDetailsDto> localVarResponse = await V1ConsentsIndividualsConsentIdDocumentsDocumentIdGetWithHttpInfoAsync(consentId, documentId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get individuals consent document based on document id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId">Document Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserDocumentDetailsDto)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Client.ApiResponse<UserDocumentDetailsDto>> V1ConsentsIndividualsConsentIdDocumentsDocumentIdGetWithHttpInfoAsync(Guid consentId, Guid documentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consentId", MyDataMyConsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("documentId", MyDataMyConsent.Client.ClientUtils.ParameterToString(documentId)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserDocumentDetailsDto>("/v1/consents/individuals/{consentId}/documents/{documentId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ConsentsIndividualsConsentIdDocumentsDocumentIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the individual documents based on ConsentId. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <returns>DataConsentDocumentsDto</returns>
        public DataConsentDocumentsDto V1ConsentsIndividualsConsentIdDocumentsGet(Guid consentId)
        {
            MyDataMyConsent.Client.ApiResponse<DataConsentDocumentsDto> localVarResponse = V1ConsentsIndividualsConsentIdDocumentsGetWithHttpInfo(consentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the individual documents based on ConsentId. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <returns>ApiResponse of DataConsentDocumentsDto</returns>
        public MyDataMyConsent.Client.ApiResponse<DataConsentDocumentsDto> V1ConsentsIndividualsConsentIdDocumentsGetWithHttpInfo(Guid consentId)
        {
            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consentId", MyDataMyConsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<DataConsentDocumentsDto>("/v1/consents/individuals/{consentId}/documents", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ConsentsIndividualsConsentIdDocumentsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the individual documents based on ConsentId. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataConsentDocumentsDto</returns>
        public async System.Threading.Tasks.Task<DataConsentDocumentsDto> V1ConsentsIndividualsConsentIdDocumentsGetAsync(Guid consentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Client.ApiResponse<DataConsentDocumentsDto> localVarResponse = await V1ConsentsIndividualsConsentIdDocumentsGetWithHttpInfoAsync(consentId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the individual documents based on ConsentId. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataConsentDocumentsDto)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Client.ApiResponse<DataConsentDocumentsDto>> V1ConsentsIndividualsConsentIdDocumentsGetWithHttpInfoAsync(Guid consentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consentId", MyDataMyConsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DataConsentDocumentsDto>("/v1/consents/individuals/{consentId}/documents", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ConsentsIndividualsConsentIdDocumentsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get individuals consent details by consent id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <returns>DataConsentDetailsDto</returns>
        public DataConsentDetailsDto V1ConsentsIndividualsConsentIdGet(Guid consentId)
        {
            MyDataMyConsent.Client.ApiResponse<DataConsentDetailsDto> localVarResponse = V1ConsentsIndividualsConsentIdGetWithHttpInfo(consentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get individuals consent details by consent id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <returns>ApiResponse of DataConsentDetailsDto</returns>
        public MyDataMyConsent.Client.ApiResponse<DataConsentDetailsDto> V1ConsentsIndividualsConsentIdGetWithHttpInfo(Guid consentId)
        {
            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consentId", MyDataMyConsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<DataConsentDetailsDto>("/v1/consents/individuals/{consentId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ConsentsIndividualsConsentIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get individuals consent details by consent id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataConsentDetailsDto</returns>
        public async System.Threading.Tasks.Task<DataConsentDetailsDto> V1ConsentsIndividualsConsentIdGetAsync(Guid consentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Client.ApiResponse<DataConsentDetailsDto> localVarResponse = await V1ConsentsIndividualsConsentIdGetWithHttpInfoAsync(consentId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get individuals consent details by consent id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataConsentDetailsDto)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Client.ApiResponse<DataConsentDetailsDto>> V1ConsentsIndividualsConsentIdGetWithHttpInfoAsync(Guid consentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consentId", MyDataMyConsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DataConsentDetailsDto>("/v1/consents/individuals/{consentId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ConsentsIndividualsConsentIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the list of Consents Sent to Individuals. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>UserDataConsentInfoDtoPaginatedList</returns>
        public UserDataConsentInfoDtoPaginatedList V1ConsentsIndividualsGet(int? pageNo = default(int?), int? pageSize = default(int?), DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?))
        {
            MyDataMyConsent.Client.ApiResponse<UserDataConsentInfoDtoPaginatedList> localVarResponse = V1ConsentsIndividualsGetWithHttpInfo(pageNo, pageSize, status, startDate, endDate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of Consents Sent to Individuals. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApiResponse of UserDataConsentInfoDtoPaginatedList</returns>
        public MyDataMyConsent.Client.ApiResponse<UserDataConsentInfoDtoPaginatedList> V1ConsentsIndividualsGetWithHttpInfo(int? pageNo = default(int?), int? pageSize = default(int?), DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?))
        {
            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "pageNo", pageNo));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<UserDataConsentInfoDtoPaginatedList>("/v1/consents/individuals", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ConsentsIndividualsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the list of Consents Sent to Individuals. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserDataConsentInfoDtoPaginatedList</returns>
        public async System.Threading.Tasks.Task<UserDataConsentInfoDtoPaginatedList> V1ConsentsIndividualsGetAsync(int? pageNo = default(int?), int? pageSize = default(int?), DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Client.ApiResponse<UserDataConsentInfoDtoPaginatedList> localVarResponse = await V1ConsentsIndividualsGetWithHttpInfoAsync(pageNo, pageSize, status, startDate, endDate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of Consents Sent to Individuals. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserDataConsentInfoDtoPaginatedList)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Client.ApiResponse<UserDataConsentInfoDtoPaginatedList>> V1ConsentsIndividualsGetWithHttpInfoAsync(int? pageNo = default(int?), int? pageSize = default(int?), DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "pageNo", pageNo));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserDataConsentInfoDtoPaginatedList>("/v1/consents/individuals", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ConsentsIndividualsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get orgnization consented financial account details based on account id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <returns>OrganizationFinancialAccountDto</returns>
        public OrganizationFinancialAccountDto V1ConsentsOrganizationsConsentIdAccountsAccountIdGet(Guid consentId, Guid accountId)
        {
            MyDataMyConsent.Client.ApiResponse<OrganizationFinancialAccountDto> localVarResponse = V1ConsentsOrganizationsConsentIdAccountsAccountIdGetWithHttpInfo(consentId, accountId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get orgnization consented financial account details based on account id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <returns>ApiResponse of OrganizationFinancialAccountDto</returns>
        public MyDataMyConsent.Client.ApiResponse<OrganizationFinancialAccountDto> V1ConsentsOrganizationsConsentIdAccountsAccountIdGetWithHttpInfo(Guid consentId, Guid accountId)
        {
            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consentId", MyDataMyConsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("accountId", MyDataMyConsent.Client.ClientUtils.ParameterToString(accountId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<OrganizationFinancialAccountDto>("/v1/consents/organizations/{consentId}/accounts/{accountId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ConsentsOrganizationsConsentIdAccountsAccountIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get orgnization consented financial account details based on account id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganizationFinancialAccountDto</returns>
        public async System.Threading.Tasks.Task<OrganizationFinancialAccountDto> V1ConsentsOrganizationsConsentIdAccountsAccountIdGetAsync(Guid consentId, Guid accountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Client.ApiResponse<OrganizationFinancialAccountDto> localVarResponse = await V1ConsentsOrganizationsConsentIdAccountsAccountIdGetWithHttpInfoAsync(consentId, accountId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get orgnization consented financial account details based on account id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganizationFinancialAccountDto)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Client.ApiResponse<OrganizationFinancialAccountDto>> V1ConsentsOrganizationsConsentIdAccountsAccountIdGetWithHttpInfoAsync(Guid consentId, Guid accountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consentId", MyDataMyConsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("accountId", MyDataMyConsent.Client.ClientUtils.ParameterToString(accountId)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OrganizationFinancialAccountDto>("/v1/consents/organizations/{consentId}/accounts/{accountId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ConsentsOrganizationsConsentIdAccountsAccountIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get consented financial account transactions of an organization based on accountId. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="filters"> (optional)</param>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="fromDate"> (optional)</param>
        /// <param name="toDate"> (optional)</param>
        /// <returns>OrganizationFinancialTransactionsDtoPaginatedList</returns>
        public OrganizationFinancialTransactionsDtoPaginatedList V1ConsentsOrganizationsConsentIdAccountsAccountIdTransactionsGet(Guid consentId, Guid accountId, string filters = default(string), int? pageNo = default(int?), int? pageSize = default(int?), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?))
        {
            MyDataMyConsent.Client.ApiResponse<OrganizationFinancialTransactionsDtoPaginatedList> localVarResponse = V1ConsentsOrganizationsConsentIdAccountsAccountIdTransactionsGetWithHttpInfo(consentId, accountId, filters, pageNo, pageSize, fromDate, toDate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get consented financial account transactions of an organization based on accountId. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="filters"> (optional)</param>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="fromDate"> (optional)</param>
        /// <param name="toDate"> (optional)</param>
        /// <returns>ApiResponse of OrganizationFinancialTransactionsDtoPaginatedList</returns>
        public MyDataMyConsent.Client.ApiResponse<OrganizationFinancialTransactionsDtoPaginatedList> V1ConsentsOrganizationsConsentIdAccountsAccountIdTransactionsGetWithHttpInfo(Guid consentId, Guid accountId, string filters = default(string), int? pageNo = default(int?), int? pageSize = default(int?), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?))
        {
            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consentId", MyDataMyConsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("accountId", MyDataMyConsent.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            if (filters != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "filters", filters));
            }
            if (pageNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "pageNo", pageNo));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "fromDate", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "toDate", toDate));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<OrganizationFinancialTransactionsDtoPaginatedList>("/v1/consents/organizations/{consentId}/accounts/{accountId}/transactions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ConsentsOrganizationsConsentIdAccountsAccountIdTransactionsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get consented financial account transactions of an organization based on accountId. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="filters"> (optional)</param>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="fromDate"> (optional)</param>
        /// <param name="toDate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganizationFinancialTransactionsDtoPaginatedList</returns>
        public async System.Threading.Tasks.Task<OrganizationFinancialTransactionsDtoPaginatedList> V1ConsentsOrganizationsConsentIdAccountsAccountIdTransactionsGetAsync(Guid consentId, Guid accountId, string filters = default(string), int? pageNo = default(int?), int? pageSize = default(int?), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Client.ApiResponse<OrganizationFinancialTransactionsDtoPaginatedList> localVarResponse = await V1ConsentsOrganizationsConsentIdAccountsAccountIdTransactionsGetWithHttpInfoAsync(consentId, accountId, filters, pageNo, pageSize, fromDate, toDate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get consented financial account transactions of an organization based on accountId. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="filters"> (optional)</param>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="fromDate"> (optional)</param>
        /// <param name="toDate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganizationFinancialTransactionsDtoPaginatedList)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Client.ApiResponse<OrganizationFinancialTransactionsDtoPaginatedList>> V1ConsentsOrganizationsConsentIdAccountsAccountIdTransactionsGetWithHttpInfoAsync(Guid consentId, Guid accountId, string filters = default(string), int? pageNo = default(int?), int? pageSize = default(int?), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consentId", MyDataMyConsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("accountId", MyDataMyConsent.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            if (filters != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "filters", filters));
            }
            if (pageNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "pageNo", pageNo));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "fromDate", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "toDate", toDate));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OrganizationFinancialTransactionsDtoPaginatedList>("/v1/consents/organizations/{consentId}/accounts/{accountId}/transactions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ConsentsOrganizationsConsentIdAccountsAccountIdTransactionsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all organizational financial accounts in a consent. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <returns>DataConsentFinancialsDto</returns>
        public DataConsentFinancialsDto V1ConsentsOrganizationsConsentIdAccountsGet(Guid consentId)
        {
            MyDataMyConsent.Client.ApiResponse<DataConsentFinancialsDto> localVarResponse = V1ConsentsOrganizationsConsentIdAccountsGetWithHttpInfo(consentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all organizational financial accounts in a consent. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <returns>ApiResponse of DataConsentFinancialsDto</returns>
        public MyDataMyConsent.Client.ApiResponse<DataConsentFinancialsDto> V1ConsentsOrganizationsConsentIdAccountsGetWithHttpInfo(Guid consentId)
        {
            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consentId", MyDataMyConsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<DataConsentFinancialsDto>("/v1/consents/organizations/{consentId}/accounts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ConsentsOrganizationsConsentIdAccountsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all organizational financial accounts in a consent. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataConsentFinancialsDto</returns>
        public async System.Threading.Tasks.Task<DataConsentFinancialsDto> V1ConsentsOrganizationsConsentIdAccountsGetAsync(Guid consentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Client.ApiResponse<DataConsentFinancialsDto> localVarResponse = await V1ConsentsOrganizationsConsentIdAccountsGetWithHttpInfoAsync(consentId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all organizational financial accounts in a consent. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataConsentFinancialsDto)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Client.ApiResponse<DataConsentFinancialsDto>> V1ConsentsOrganizationsConsentIdAccountsGetWithHttpInfoAsync(Guid consentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consentId", MyDataMyConsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DataConsentFinancialsDto>("/v1/consents/organizations/{consentId}/accounts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ConsentsOrganizationsConsentIdAccountsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download organizations consented document. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId"></param>
        /// <returns>OrganizationDocumentDownloadDto</returns>
        public OrganizationDocumentDownloadDto V1ConsentsOrganizationsConsentIdDocumentsDocumentIdDownloadGet(Guid consentId, Guid documentId)
        {
            MyDataMyConsent.Client.ApiResponse<OrganizationDocumentDownloadDto> localVarResponse = V1ConsentsOrganizationsConsentIdDocumentsDocumentIdDownloadGetWithHttpInfo(consentId, documentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download organizations consented document. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId"></param>
        /// <returns>ApiResponse of OrganizationDocumentDownloadDto</returns>
        public MyDataMyConsent.Client.ApiResponse<OrganizationDocumentDownloadDto> V1ConsentsOrganizationsConsentIdDocumentsDocumentIdDownloadGetWithHttpInfo(Guid consentId, Guid documentId)
        {
            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consentId", MyDataMyConsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("documentId", MyDataMyConsent.Client.ClientUtils.ParameterToString(documentId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<OrganizationDocumentDownloadDto>("/v1/consents/organizations/{consentId}/documents/{documentId}/download", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ConsentsOrganizationsConsentIdDocumentsDocumentIdDownloadGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download organizations consented document. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganizationDocumentDownloadDto</returns>
        public async System.Threading.Tasks.Task<OrganizationDocumentDownloadDto> V1ConsentsOrganizationsConsentIdDocumentsDocumentIdDownloadGetAsync(Guid consentId, Guid documentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Client.ApiResponse<OrganizationDocumentDownloadDto> localVarResponse = await V1ConsentsOrganizationsConsentIdDocumentsDocumentIdDownloadGetWithHttpInfoAsync(consentId, documentId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download organizations consented document. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganizationDocumentDownloadDto)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Client.ApiResponse<OrganizationDocumentDownloadDto>> V1ConsentsOrganizationsConsentIdDocumentsDocumentIdDownloadGetWithHttpInfoAsync(Guid consentId, Guid documentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consentId", MyDataMyConsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("documentId", MyDataMyConsent.Client.ClientUtils.ParameterToString(documentId)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OrganizationDocumentDownloadDto>("/v1/consents/organizations/{consentId}/documents/{documentId}/download", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ConsentsOrganizationsConsentIdDocumentsDocumentIdDownloadGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get organizations consent document based on document id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId"></param>
        /// <returns>OrganizationDocumentDetailsDto</returns>
        public OrganizationDocumentDetailsDto V1ConsentsOrganizationsConsentIdDocumentsDocumentIdGet(Guid consentId, Guid documentId)
        {
            MyDataMyConsent.Client.ApiResponse<OrganizationDocumentDetailsDto> localVarResponse = V1ConsentsOrganizationsConsentIdDocumentsDocumentIdGetWithHttpInfo(consentId, documentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get organizations consent document based on document id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId"></param>
        /// <returns>ApiResponse of OrganizationDocumentDetailsDto</returns>
        public MyDataMyConsent.Client.ApiResponse<OrganizationDocumentDetailsDto> V1ConsentsOrganizationsConsentIdDocumentsDocumentIdGetWithHttpInfo(Guid consentId, Guid documentId)
        {
            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consentId", MyDataMyConsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("documentId", MyDataMyConsent.Client.ClientUtils.ParameterToString(documentId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<OrganizationDocumentDetailsDto>("/v1/consents/organizations/{consentId}/documents/{documentId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ConsentsOrganizationsConsentIdDocumentsDocumentIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get organizations consent document based on document id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganizationDocumentDetailsDto</returns>
        public async System.Threading.Tasks.Task<OrganizationDocumentDetailsDto> V1ConsentsOrganizationsConsentIdDocumentsDocumentIdGetAsync(Guid consentId, Guid documentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Client.ApiResponse<OrganizationDocumentDetailsDto> localVarResponse = await V1ConsentsOrganizationsConsentIdDocumentsDocumentIdGetWithHttpInfoAsync(consentId, documentId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get organizations consent document based on document id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganizationDocumentDetailsDto)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Client.ApiResponse<OrganizationDocumentDetailsDto>> V1ConsentsOrganizationsConsentIdDocumentsDocumentIdGetWithHttpInfoAsync(Guid consentId, Guid documentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consentId", MyDataMyConsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("documentId", MyDataMyConsent.Client.ClientUtils.ParameterToString(documentId)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OrganizationDocumentDetailsDto>("/v1/consents/organizations/{consentId}/documents/{documentId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ConsentsOrganizationsConsentIdDocumentsDocumentIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the organizations documents based on ConsentId. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <returns>DataConsentDocumentsDto</returns>
        public DataConsentDocumentsDto V1ConsentsOrganizationsConsentIdDocumentsGet(Guid consentId)
        {
            MyDataMyConsent.Client.ApiResponse<DataConsentDocumentsDto> localVarResponse = V1ConsentsOrganizationsConsentIdDocumentsGetWithHttpInfo(consentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the organizations documents based on ConsentId. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <returns>ApiResponse of DataConsentDocumentsDto</returns>
        public MyDataMyConsent.Client.ApiResponse<DataConsentDocumentsDto> V1ConsentsOrganizationsConsentIdDocumentsGetWithHttpInfo(Guid consentId)
        {
            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consentId", MyDataMyConsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<DataConsentDocumentsDto>("/v1/consents/organizations/{consentId}/documents", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ConsentsOrganizationsConsentIdDocumentsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the organizations documents based on ConsentId. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataConsentDocumentsDto</returns>
        public async System.Threading.Tasks.Task<DataConsentDocumentsDto> V1ConsentsOrganizationsConsentIdDocumentsGetAsync(Guid consentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Client.ApiResponse<DataConsentDocumentsDto> localVarResponse = await V1ConsentsOrganizationsConsentIdDocumentsGetWithHttpInfoAsync(consentId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the organizations documents based on ConsentId. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataConsentDocumentsDto)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Client.ApiResponse<DataConsentDocumentsDto>> V1ConsentsOrganizationsConsentIdDocumentsGetWithHttpInfoAsync(Guid consentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consentId", MyDataMyConsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DataConsentDocumentsDto>("/v1/consents/organizations/{consentId}/documents", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ConsentsOrganizationsConsentIdDocumentsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get organizations consent details by consent id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <returns>DataConsentDetailsDto</returns>
        public DataConsentDetailsDto V1ConsentsOrganizationsConsentIdGet(Guid consentId)
        {
            MyDataMyConsent.Client.ApiResponse<DataConsentDetailsDto> localVarResponse = V1ConsentsOrganizationsConsentIdGetWithHttpInfo(consentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get organizations consent details by consent id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <returns>ApiResponse of DataConsentDetailsDto</returns>
        public MyDataMyConsent.Client.ApiResponse<DataConsentDetailsDto> V1ConsentsOrganizationsConsentIdGetWithHttpInfo(Guid consentId)
        {
            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consentId", MyDataMyConsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<DataConsentDetailsDto>("/v1/consents/organizations/{consentId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ConsentsOrganizationsConsentIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get organizations consent details by consent id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataConsentDetailsDto</returns>
        public async System.Threading.Tasks.Task<DataConsentDetailsDto> V1ConsentsOrganizationsConsentIdGetAsync(Guid consentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Client.ApiResponse<DataConsentDetailsDto> localVarResponse = await V1ConsentsOrganizationsConsentIdGetWithHttpInfoAsync(consentId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get organizations consent details by consent id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataConsentDetailsDto)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Client.ApiResponse<DataConsentDetailsDto>> V1ConsentsOrganizationsConsentIdGetWithHttpInfoAsync(Guid consentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consentId", MyDataMyConsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DataConsentDetailsDto>("/v1/consents/organizations/{consentId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ConsentsOrganizationsConsentIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the list of data consents sent for organizations. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>OrganizationDataConsentInfoDtoPaginatedList</returns>
        public OrganizationDataConsentInfoDtoPaginatedList V1ConsentsOrganizationsGet(int? pageNo = default(int?), int? pageSize = default(int?), DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?))
        {
            MyDataMyConsent.Client.ApiResponse<OrganizationDataConsentInfoDtoPaginatedList> localVarResponse = V1ConsentsOrganizationsGetWithHttpInfo(pageNo, pageSize, status, startDate, endDate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of data consents sent for organizations. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApiResponse of OrganizationDataConsentInfoDtoPaginatedList</returns>
        public MyDataMyConsent.Client.ApiResponse<OrganizationDataConsentInfoDtoPaginatedList> V1ConsentsOrganizationsGetWithHttpInfo(int? pageNo = default(int?), int? pageSize = default(int?), DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?))
        {
            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "pageNo", pageNo));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<OrganizationDataConsentInfoDtoPaginatedList>("/v1/consents/organizations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ConsentsOrganizationsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the list of data consents sent for organizations. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganizationDataConsentInfoDtoPaginatedList</returns>
        public async System.Threading.Tasks.Task<OrganizationDataConsentInfoDtoPaginatedList> V1ConsentsOrganizationsGetAsync(int? pageNo = default(int?), int? pageSize = default(int?), DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Client.ApiResponse<OrganizationDataConsentInfoDtoPaginatedList> localVarResponse = await V1ConsentsOrganizationsGetWithHttpInfoAsync(pageNo, pageSize, status, startDate, endDate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of data consents sent for organizations. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganizationDataConsentInfoDtoPaginatedList)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Client.ApiResponse<OrganizationDataConsentInfoDtoPaginatedList>> V1ConsentsOrganizationsGetWithHttpInfoAsync(int? pageNo = default(int?), int? pageSize = default(int?), DataConsentStatus? status = default(DataConsentStatus?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "pageNo", pageNo));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OrganizationDataConsentInfoDtoPaginatedList>("/v1/consents/organizations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ConsentsOrganizationsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
