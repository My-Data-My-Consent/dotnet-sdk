/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using MyDataMyConsent.Client;
using MyDataMyConsent.Client.Auth;
using MyDataMyConsent.Models;

namespace MyDataMyConsent.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIndividualsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Digilocker compatible endpoint to issue document.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushUriRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PushUriResponse</returns>
        PushUriResponse IssuerIssuedoc1XmlPost(PushUriRequest pushUriRequest, int operationIndex = 0);

        /// <summary>
        /// Digilocker compatible endpoint to issue document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushUriRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PushUriResponse</returns>
        ApiResponse<PushUriResponse> IssuerIssuedoc1XmlPostWithHttpInfo(PushUriRequest pushUriRequest, int operationIndex = 0);
        /// <summary>
        /// Get all consent requests sent to Individuals.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status"> (optional)</param>
        /// <param name="fromDateTime"> (optional)</param>
        /// <param name="toDateTime"> (optional)</param>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaginatedListOfIndividualConsentRequestDetailss</returns>
        PaginatedListOfIndividualConsentRequestDetailss V1IndividualsConsentRequestsGet(DataConsentStatus? status = default(DataConsentStatus?), DateTime? fromDateTime = default(DateTime?), DateTime? toDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get all consent requests sent to Individuals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status"> (optional)</param>
        /// <param name="fromDateTime"> (optional)</param>
        /// <param name="toDateTime"> (optional)</param>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaginatedListOfIndividualConsentRequestDetailss</returns>
        ApiResponse<PaginatedListOfIndividualConsentRequestDetailss> V1IndividualsConsentRequestsGetWithHttpInfo(DataConsentStatus? status = default(DataConsentStatus?), DateTime? fromDateTime = default(DateTime?), DateTime? toDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// Create individual consent request.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConsentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IndividualConsentRequestDetails</returns>
        IndividualConsentRequestDetails V1IndividualsConsentRequestsPost(CreateConsentRequest createConsentRequest, int operationIndex = 0);

        /// <summary>
        /// Create individual consent request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConsentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IndividualConsentRequestDetails</returns>
        ApiResponse<IndividualConsentRequestDetails> V1IndividualsConsentRequestsPostWithHttpInfo(CreateConsentRequest createConsentRequest, int operationIndex = 0);
        /// <summary>
        /// Cancel the Individual data request by id.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>bool</returns>
        bool V1IndividualsConsentRequestsRequestIdCancelPut(string requestId, int operationIndex = 0);

        /// <summary>
        /// Cancel the Individual data request by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of bool</returns>
        ApiResponse<bool> V1IndividualsConsentRequestsRequestIdCancelPutWithHttpInfo(string requestId, int operationIndex = 0);
        /// <summary>
        /// Get Individual data request by id.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConsentRequest</returns>
        ConsentRequest V1IndividualsConsentRequestsRequestIdGet(string requestId, int operationIndex = 0);

        /// <summary>
        /// Get Individual data request by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConsentRequest</returns>
        ApiResponse<ConsentRequest> V1IndividualsConsentRequestsRequestIdGetWithHttpInfo(string requestId, int operationIndex = 0);
        /// <summary>
        /// Get the paginated list of individual consent templates.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaginatedListOfConsentRequestTemplates</returns>
        PaginatedListOfConsentRequestTemplates V1IndividualsConsentTemplatesGet(int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get the paginated list of individual consent templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaginatedListOfConsentRequestTemplates</returns>
        ApiResponse<PaginatedListOfConsentRequestTemplates> V1IndividualsConsentTemplatesGetWithHttpInfo(int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get Individual consent template details by consent id.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IndividualConsentRequestTemplateDetails</returns>
        IndividualConsentRequestTemplateDetails V1IndividualsConsentTemplatesTemplateIdGet(string templateId, int operationIndex = 0);

        /// <summary>
        /// Get Individual consent template details by consent id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IndividualConsentRequestTemplateDetails</returns>
        ApiResponse<IndividualConsentRequestTemplateDetails> V1IndividualsConsentTemplatesTemplateIdGetWithHttpInfo(string templateId, int operationIndex = 0);
        /// <summary>
        /// Download Individual consented document by document id.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream V1IndividualsConsentsConsentIdDocumentsDocumentIdDownloadGet(string consentId, string documentId, int operationIndex = 0);

        /// <summary>
        /// Download Individual consented document by document id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> V1IndividualsConsentsConsentIdDocumentsDocumentIdDownloadGetWithHttpInfo(string consentId, string documentId, int operationIndex = 0);
        /// <summary>
        /// Get Individual consented document by document id.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConsentedDocument</returns>
        ConsentedDocument V1IndividualsConsentsConsentIdDocumentsDocumentIdGet(string consentId, string documentId, int operationIndex = 0);

        /// <summary>
        /// Get Individual consented document by document id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConsentedDocument</returns>
        ApiResponse<ConsentedDocument> V1IndividualsConsentsConsentIdDocumentsDocumentIdGetWithHttpInfo(string consentId, string documentId, int operationIndex = 0);
        /// <summary>
        /// Get Individual consented document by consent id.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ConsentedDocument&gt;</returns>
        List<ConsentedDocument> V1IndividualsConsentsConsentIdDocumentsGet(string consentId, int operationIndex = 0);

        /// <summary>
        /// Get Individual consented document by consent id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ConsentedDocument&gt;</returns>
        ApiResponse<List<ConsentedDocument>> V1IndividualsConsentsConsentIdDocumentsGetWithHttpInfo(string consentId, int operationIndex = 0);
        /// <summary>
        /// Get individual consented financial account details.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FinancialAccount</returns>
        FinancialAccount V1IndividualsConsentsConsentIdFinancialAccountsAccountIdGet(string consentId, string accountId, int operationIndex = 0);

        /// <summary>
        /// Get individual consented financial account details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FinancialAccount</returns>
        ApiResponse<FinancialAccount> V1IndividualsConsentsConsentIdFinancialAccountsAccountIdGetWithHttpInfo(string consentId, string accountId, int operationIndex = 0);
        /// <summary>
        /// Get individual consented financial account transactions.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="filters"> (optional)</param>
        /// <param name="fromDateTime"> (optional)</param>
        /// <param name="toDateTime"> (optional)</param>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaginatedListOfFinancialAccountTransactions</returns>
        PaginatedListOfFinancialAccountTransactions V1IndividualsConsentsConsentIdFinancialAccountsAccountIdTransactionsGet(string consentId, string accountId, string? filters = default(string?), string? fromDateTime = default(string?), string? toDateTime = default(string?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get individual consented financial account transactions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="filters"> (optional)</param>
        /// <param name="fromDateTime"> (optional)</param>
        /// <param name="toDateTime"> (optional)</param>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaginatedListOfFinancialAccountTransactions</returns>
        ApiResponse<PaginatedListOfFinancialAccountTransactions> V1IndividualsConsentsConsentIdFinancialAccountsAccountIdTransactionsGetWithHttpInfo(string consentId, string accountId, string? filters = default(string?), string? fromDateTime = default(string?), string? toDateTime = default(string?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get all individual consented financial accounts.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;FinancialAccount&gt;</returns>
        List<FinancialAccount> V1IndividualsConsentsConsentIdFinancialAccountsGet(string consentId, int operationIndex = 0);

        /// <summary>
        /// Get all individual consented financial accounts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;FinancialAccount&gt;</returns>
        ApiResponse<List<FinancialAccount>> V1IndividualsConsentsConsentIdFinancialAccountsGetWithHttpInfo(string consentId, int operationIndex = 0);
        /// <summary>
        /// Get Individuals consent details by consent id.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConsentDetails</returns>
        ConsentDetails V1IndividualsConsentsConsentIdGet(string consentId, int operationIndex = 0);

        /// <summary>
        /// Get Individuals consent details by consent id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConsentDetails</returns>
        ApiResponse<ConsentDetails> V1IndividualsConsentsConsentIdGetWithHttpInfo(string consentId, int operationIndex = 0);
        /// <summary>
        /// Get Individual consented document by consent id.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object V1IndividualsConsentsConsentIdHealthFhirBundleGet(string consentId, int operationIndex = 0);

        /// <summary>
        /// Get Individual consented document by consent id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> V1IndividualsConsentsConsentIdHealthFhirBundleGetWithHttpInfo(string consentId, int operationIndex = 0);
        /// <summary>
        /// Get the paginated list of Individual consents.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status"> (optional)</param>
        /// <param name="fromDateTime"> (optional)</param>
        /// <param name="toDateTime"> (optional)</param>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaginatedListOfConsents</returns>
        PaginatedListOfConsents V1IndividualsConsentsGet(DataConsentStatus? status = default(DataConsentStatus?), DateTime? fromDateTime = default(DateTime?), DateTime? toDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get the paginated list of Individual consents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status"> (optional)</param>
        /// <param name="fromDateTime"> (optional)</param>
        /// <param name="toDateTime"> (optional)</param>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaginatedListOfConsents</returns>
        ApiResponse<PaginatedListOfConsents> V1IndividualsConsentsGetWithHttpInfo(DataConsentStatus? status = default(DataConsentStatus?), DateTime? fromDateTime = default(DateTime?), DateTime? toDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// Upload a document for issuance request of individual.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequestId"></param>
        /// <param name="file"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UploadDocumentResponse</returns>
        UploadDocumentResponse V1IndividualsDocumentsIssueIssueRequestIdUploadPost(string issueRequestId, System.IO.Stream file, int operationIndex = 0);

        /// <summary>
        /// Upload a document for issuance request of individual.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequestId"></param>
        /// <param name="file"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UploadDocumentResponse</returns>
        ApiResponse<UploadDocumentResponse> V1IndividualsDocumentsIssueIssueRequestIdUploadPostWithHttpInfo(string issueRequestId, System.IO.Stream file, int operationIndex = 0);
        /// <summary>
        /// Issue a new document to an individual user.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentIssueRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DocumentIssueRequestDetails</returns>
        DocumentIssueRequestDetails V1IndividualsDocumentsIssuePost(DocumentIssueRequest documentIssueRequest, int operationIndex = 0);

        /// <summary>
        /// Issue a new document to an individual user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentIssueRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DocumentIssueRequestDetails</returns>
        ApiResponse<DocumentIssueRequestDetails> V1IndividualsDocumentsIssuePostWithHttpInfo(DocumentIssueRequest documentIssueRequest, int operationIndex = 0);
        /// <summary>
        /// Get issued document.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IssuedDocument</returns>
        IssuedDocument V1IndividualsDocumentsIssuedDocumentIdGet(string documentId, int operationIndex = 0);

        /// <summary>
        /// Get issued document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IssuedDocument</returns>
        ApiResponse<IssuedDocument> V1IndividualsDocumentsIssuedDocumentIdGetWithHttpInfo(string documentId, int operationIndex = 0);
        /// <summary>
        /// Get paginated list of issued documents of given document type.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId"></param>
        /// <param name="fromDateTime"> (optional)</param>
        /// <param name="toDateTime"> (optional)</param>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaginatedListOfIssuedDocuments</returns>
        PaginatedListOfIssuedDocuments V1IndividualsDocumentsIssuedGet(string documentTypeId, DateTime? fromDateTime = default(DateTime?), DateTime? toDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get paginated list of issued documents of given document type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId"></param>
        /// <param name="fromDateTime"> (optional)</param>
        /// <param name="toDateTime"> (optional)</param>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaginatedListOfIssuedDocuments</returns>
        ApiResponse<PaginatedListOfIssuedDocuments> V1IndividualsDocumentsIssuedGetWithHttpInfo(string documentTypeId, DateTime? fromDateTime = default(DateTime?), DateTime? toDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get paginated list of registered document types.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaginatedListOfDocumentTypes</returns>
        PaginatedListOfDocumentTypes V1IndividualsDocumentsTypesGet(int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get paginated list of registered document types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaginatedListOfDocumentTypes</returns>
        ApiResponse<PaginatedListOfDocumentTypes> V1IndividualsDocumentsTypesGetWithHttpInfo(int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIndividualsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Digilocker compatible endpoint to issue document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushUriRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PushUriResponse</returns>
        System.Threading.Tasks.Task<PushUriResponse> IssuerIssuedoc1XmlPostAsync(PushUriRequest pushUriRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Digilocker compatible endpoint to issue document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushUriRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PushUriResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PushUriResponse>> IssuerIssuedoc1XmlPostWithHttpInfoAsync(PushUriRequest pushUriRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all consent requests sent to Individuals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status"> (optional)</param>
        /// <param name="fromDateTime"> (optional)</param>
        /// <param name="toDateTime"> (optional)</param>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaginatedListOfIndividualConsentRequestDetailss</returns>
        System.Threading.Tasks.Task<PaginatedListOfIndividualConsentRequestDetailss> V1IndividualsConsentRequestsGetAsync(DataConsentStatus? status = default(DataConsentStatus?), DateTime? fromDateTime = default(DateTime?), DateTime? toDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all consent requests sent to Individuals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status"> (optional)</param>
        /// <param name="fromDateTime"> (optional)</param>
        /// <param name="toDateTime"> (optional)</param>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaginatedListOfIndividualConsentRequestDetailss)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaginatedListOfIndividualConsentRequestDetailss>> V1IndividualsConsentRequestsGetWithHttpInfoAsync(DataConsentStatus? status = default(DataConsentStatus?), DateTime? fromDateTime = default(DateTime?), DateTime? toDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create individual consent request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConsentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IndividualConsentRequestDetails</returns>
        System.Threading.Tasks.Task<IndividualConsentRequestDetails> V1IndividualsConsentRequestsPostAsync(CreateConsentRequest createConsentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create individual consent request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConsentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IndividualConsentRequestDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<IndividualConsentRequestDetails>> V1IndividualsConsentRequestsPostWithHttpInfoAsync(CreateConsentRequest createConsentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Cancel the Individual data request by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        System.Threading.Tasks.Task<bool> V1IndividualsConsentRequestsRequestIdCancelPutAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel the Individual data request by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool>> V1IndividualsConsentRequestsRequestIdCancelPutWithHttpInfoAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Individual data request by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConsentRequest</returns>
        System.Threading.Tasks.Task<ConsentRequest> V1IndividualsConsentRequestsRequestIdGetAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Individual data request by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConsentRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConsentRequest>> V1IndividualsConsentRequestsRequestIdGetWithHttpInfoAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the paginated list of individual consent templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaginatedListOfConsentRequestTemplates</returns>
        System.Threading.Tasks.Task<PaginatedListOfConsentRequestTemplates> V1IndividualsConsentTemplatesGetAsync(int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the paginated list of individual consent templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaginatedListOfConsentRequestTemplates)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaginatedListOfConsentRequestTemplates>> V1IndividualsConsentTemplatesGetWithHttpInfoAsync(int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Individual consent template details by consent id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IndividualConsentRequestTemplateDetails</returns>
        System.Threading.Tasks.Task<IndividualConsentRequestTemplateDetails> V1IndividualsConsentTemplatesTemplateIdGetAsync(string templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Individual consent template details by consent id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IndividualConsentRequestTemplateDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<IndividualConsentRequestTemplateDetails>> V1IndividualsConsentTemplatesTemplateIdGetWithHttpInfoAsync(string templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Download Individual consented document by document id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> V1IndividualsConsentsConsentIdDocumentsDocumentIdDownloadGetAsync(string consentId, string documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Download Individual consented document by document id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> V1IndividualsConsentsConsentIdDocumentsDocumentIdDownloadGetWithHttpInfoAsync(string consentId, string documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Individual consented document by document id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConsentedDocument</returns>
        System.Threading.Tasks.Task<ConsentedDocument> V1IndividualsConsentsConsentIdDocumentsDocumentIdGetAsync(string consentId, string documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Individual consented document by document id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConsentedDocument)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConsentedDocument>> V1IndividualsConsentsConsentIdDocumentsDocumentIdGetWithHttpInfoAsync(string consentId, string documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Individual consented document by consent id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ConsentedDocument&gt;</returns>
        System.Threading.Tasks.Task<List<ConsentedDocument>> V1IndividualsConsentsConsentIdDocumentsGetAsync(string consentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Individual consented document by consent id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ConsentedDocument&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ConsentedDocument>>> V1IndividualsConsentsConsentIdDocumentsGetWithHttpInfoAsync(string consentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get individual consented financial account details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FinancialAccount</returns>
        System.Threading.Tasks.Task<FinancialAccount> V1IndividualsConsentsConsentIdFinancialAccountsAccountIdGetAsync(string consentId, string accountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get individual consented financial account details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FinancialAccount)</returns>
        System.Threading.Tasks.Task<ApiResponse<FinancialAccount>> V1IndividualsConsentsConsentIdFinancialAccountsAccountIdGetWithHttpInfoAsync(string consentId, string accountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get individual consented financial account transactions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="filters"> (optional)</param>
        /// <param name="fromDateTime"> (optional)</param>
        /// <param name="toDateTime"> (optional)</param>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaginatedListOfFinancialAccountTransactions</returns>
        System.Threading.Tasks.Task<PaginatedListOfFinancialAccountTransactions> V1IndividualsConsentsConsentIdFinancialAccountsAccountIdTransactionsGetAsync(string consentId, string accountId, string? filters = default(string?), string? fromDateTime = default(string?), string? toDateTime = default(string?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get individual consented financial account transactions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="filters"> (optional)</param>
        /// <param name="fromDateTime"> (optional)</param>
        /// <param name="toDateTime"> (optional)</param>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaginatedListOfFinancialAccountTransactions)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaginatedListOfFinancialAccountTransactions>> V1IndividualsConsentsConsentIdFinancialAccountsAccountIdTransactionsGetWithHttpInfoAsync(string consentId, string accountId, string? filters = default(string?), string? fromDateTime = default(string?), string? toDateTime = default(string?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all individual consented financial accounts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;FinancialAccount&gt;</returns>
        System.Threading.Tasks.Task<List<FinancialAccount>> V1IndividualsConsentsConsentIdFinancialAccountsGetAsync(string consentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all individual consented financial accounts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;FinancialAccount&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FinancialAccount>>> V1IndividualsConsentsConsentIdFinancialAccountsGetWithHttpInfoAsync(string consentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Individuals consent details by consent id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConsentDetails</returns>
        System.Threading.Tasks.Task<ConsentDetails> V1IndividualsConsentsConsentIdGetAsync(string consentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Individuals consent details by consent id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConsentDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConsentDetails>> V1IndividualsConsentsConsentIdGetWithHttpInfoAsync(string consentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Individual consented document by consent id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> V1IndividualsConsentsConsentIdHealthFhirBundleGetAsync(string consentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Individual consented document by consent id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1IndividualsConsentsConsentIdHealthFhirBundleGetWithHttpInfoAsync(string consentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the paginated list of Individual consents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status"> (optional)</param>
        /// <param name="fromDateTime"> (optional)</param>
        /// <param name="toDateTime"> (optional)</param>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaginatedListOfConsents</returns>
        System.Threading.Tasks.Task<PaginatedListOfConsents> V1IndividualsConsentsGetAsync(DataConsentStatus? status = default(DataConsentStatus?), DateTime? fromDateTime = default(DateTime?), DateTime? toDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the paginated list of Individual consents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status"> (optional)</param>
        /// <param name="fromDateTime"> (optional)</param>
        /// <param name="toDateTime"> (optional)</param>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaginatedListOfConsents)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaginatedListOfConsents>> V1IndividualsConsentsGetWithHttpInfoAsync(DataConsentStatus? status = default(DataConsentStatus?), DateTime? fromDateTime = default(DateTime?), DateTime? toDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Upload a document for issuance request of individual.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequestId"></param>
        /// <param name="file"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UploadDocumentResponse</returns>
        System.Threading.Tasks.Task<UploadDocumentResponse> V1IndividualsDocumentsIssueIssueRequestIdUploadPostAsync(string issueRequestId, System.IO.Stream file, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Upload a document for issuance request of individual.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequestId"></param>
        /// <param name="file"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UploadDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UploadDocumentResponse>> V1IndividualsDocumentsIssueIssueRequestIdUploadPostWithHttpInfoAsync(string issueRequestId, System.IO.Stream file, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Issue a new document to an individual user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentIssueRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DocumentIssueRequestDetails</returns>
        System.Threading.Tasks.Task<DocumentIssueRequestDetails> V1IndividualsDocumentsIssuePostAsync(DocumentIssueRequest documentIssueRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Issue a new document to an individual user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentIssueRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DocumentIssueRequestDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentIssueRequestDetails>> V1IndividualsDocumentsIssuePostWithHttpInfoAsync(DocumentIssueRequest documentIssueRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get issued document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IssuedDocument</returns>
        System.Threading.Tasks.Task<IssuedDocument> V1IndividualsDocumentsIssuedDocumentIdGetAsync(string documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get issued document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IssuedDocument)</returns>
        System.Threading.Tasks.Task<ApiResponse<IssuedDocument>> V1IndividualsDocumentsIssuedDocumentIdGetWithHttpInfoAsync(string documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get paginated list of issued documents of given document type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId"></param>
        /// <param name="fromDateTime"> (optional)</param>
        /// <param name="toDateTime"> (optional)</param>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaginatedListOfIssuedDocuments</returns>
        System.Threading.Tasks.Task<PaginatedListOfIssuedDocuments> V1IndividualsDocumentsIssuedGetAsync(string documentTypeId, DateTime? fromDateTime = default(DateTime?), DateTime? toDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get paginated list of issued documents of given document type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId"></param>
        /// <param name="fromDateTime"> (optional)</param>
        /// <param name="toDateTime"> (optional)</param>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaginatedListOfIssuedDocuments)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaginatedListOfIssuedDocuments>> V1IndividualsDocumentsIssuedGetWithHttpInfoAsync(string documentTypeId, DateTime? fromDateTime = default(DateTime?), DateTime? toDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get paginated list of registered document types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaginatedListOfDocumentTypes</returns>
        System.Threading.Tasks.Task<PaginatedListOfDocumentTypes> V1IndividualsDocumentsTypesGetAsync(int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get paginated list of registered document types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaginatedListOfDocumentTypes)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaginatedListOfDocumentTypes>> V1IndividualsDocumentsTypesGetWithHttpInfoAsync(int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIndividualsApi : IIndividualsApiSync, IIndividualsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IndividualsApi : IIndividualsApi
    {
        private MyDataMyConsent.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IndividualsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IndividualsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IndividualsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IndividualsApi(string basePath)
        {
            this.Configuration = MyDataMyConsent.Client.Configuration.MergeConfigurations(
                MyDataMyConsent.Client.GlobalConfiguration.Instance,
                new MyDataMyConsent.Client.Configuration { BasePath = basePath }
            );
            this.Client = new MyDataMyConsent.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MyDataMyConsent.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = MyDataMyConsent.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IndividualsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IndividualsApi(MyDataMyConsent.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = MyDataMyConsent.Client.Configuration.MergeConfigurations(
                MyDataMyConsent.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new MyDataMyConsent.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MyDataMyConsent.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = MyDataMyConsent.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IndividualsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public IndividualsApi(MyDataMyConsent.Client.ISynchronousClient client, MyDataMyConsent.Client.IAsynchronousClient asyncClient, MyDataMyConsent.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = MyDataMyConsent.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public MyDataMyConsent.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public MyDataMyConsent.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public MyDataMyConsent.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MyDataMyConsent.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Digilocker compatible endpoint to issue document. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushUriRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PushUriResponse</returns>
        public PushUriResponse IssuerIssuedoc1XmlPost(PushUriRequest pushUriRequest, int operationIndex = 0)
        {
            MyDataMyConsent.Client.ApiResponse<PushUriResponse> localVarResponse = IssuerIssuedoc1XmlPostWithHttpInfo(pushUriRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Digilocker compatible endpoint to issue document. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushUriRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PushUriResponse</returns>
        public MyDataMyConsent.Client.ApiResponse<PushUriResponse> IssuerIssuedoc1XmlPostWithHttpInfo(PushUriRequest pushUriRequest, int operationIndex = 0)
        {
            // verify the required parameter 'pushUriRequest' is set
            if (pushUriRequest == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'pushUriRequest' when calling IndividualsApi->IssuerIssuedoc1XmlPost");
            }

            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = pushUriRequest;

            localVarRequestOptions.Operation = "IndividualsApi.IssuerIssuedoc1XmlPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PushUriResponse>("/issuer/issuedoc/1/xml", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IssuerIssuedoc1XmlPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Digilocker compatible endpoint to issue document. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushUriRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PushUriResponse</returns>
        public async System.Threading.Tasks.Task<PushUriResponse> IssuerIssuedoc1XmlPostAsync(PushUriRequest pushUriRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Client.ApiResponse<PushUriResponse> localVarResponse = await IssuerIssuedoc1XmlPostWithHttpInfoAsync(pushUriRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Digilocker compatible endpoint to issue document. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushUriRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PushUriResponse)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Client.ApiResponse<PushUriResponse>> IssuerIssuedoc1XmlPostWithHttpInfoAsync(PushUriRequest pushUriRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'pushUriRequest' is set
            if (pushUriRequest == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'pushUriRequest' when calling IndividualsApi->IssuerIssuedoc1XmlPost");
            }


            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = pushUriRequest;

            localVarRequestOptions.Operation = "IndividualsApi.IssuerIssuedoc1XmlPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PushUriResponse>("/issuer/issuedoc/1/xml", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IssuerIssuedoc1XmlPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all consent requests sent to Individuals. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status"> (optional)</param>
        /// <param name="fromDateTime"> (optional)</param>
        /// <param name="toDateTime"> (optional)</param>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaginatedListOfIndividualConsentRequestDetailss</returns>
        public PaginatedListOfIndividualConsentRequestDetailss V1IndividualsConsentRequestsGet(DataConsentStatus? status = default(DataConsentStatus?), DateTime? fromDateTime = default(DateTime?), DateTime? toDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            MyDataMyConsent.Client.ApiResponse<PaginatedListOfIndividualConsentRequestDetailss> localVarResponse = V1IndividualsConsentRequestsGetWithHttpInfo(status, fromDateTime, toDateTime, pageNo, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all consent requests sent to Individuals. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status"> (optional)</param>
        /// <param name="fromDateTime"> (optional)</param>
        /// <param name="toDateTime"> (optional)</param>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaginatedListOfIndividualConsentRequestDetailss</returns>
        public MyDataMyConsent.Client.ApiResponse<PaginatedListOfIndividualConsentRequestDetailss> V1IndividualsConsentRequestsGetWithHttpInfo(DataConsentStatus? status = default(DataConsentStatus?), DateTime? fromDateTime = default(DateTime?), DateTime? toDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (fromDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "from_date_time", fromDateTime));
            }
            if (toDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "to_date_time", toDateTime));
            }
            if (pageNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "page_no", pageNo));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "IndividualsApi.V1IndividualsConsentRequestsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PaginatedListOfIndividualConsentRequestDetailss>("/v1/individuals/consent-requests", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1IndividualsConsentRequestsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all consent requests sent to Individuals. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status"> (optional)</param>
        /// <param name="fromDateTime"> (optional)</param>
        /// <param name="toDateTime"> (optional)</param>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaginatedListOfIndividualConsentRequestDetailss</returns>
        public async System.Threading.Tasks.Task<PaginatedListOfIndividualConsentRequestDetailss> V1IndividualsConsentRequestsGetAsync(DataConsentStatus? status = default(DataConsentStatus?), DateTime? fromDateTime = default(DateTime?), DateTime? toDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Client.ApiResponse<PaginatedListOfIndividualConsentRequestDetailss> localVarResponse = await V1IndividualsConsentRequestsGetWithHttpInfoAsync(status, fromDateTime, toDateTime, pageNo, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all consent requests sent to Individuals. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status"> (optional)</param>
        /// <param name="fromDateTime"> (optional)</param>
        /// <param name="toDateTime"> (optional)</param>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaginatedListOfIndividualConsentRequestDetailss)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Client.ApiResponse<PaginatedListOfIndividualConsentRequestDetailss>> V1IndividualsConsentRequestsGetWithHttpInfoAsync(DataConsentStatus? status = default(DataConsentStatus?), DateTime? fromDateTime = default(DateTime?), DateTime? toDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (fromDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "from_date_time", fromDateTime));
            }
            if (toDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "to_date_time", toDateTime));
            }
            if (pageNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "page_no", pageNo));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "IndividualsApi.V1IndividualsConsentRequestsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PaginatedListOfIndividualConsentRequestDetailss>("/v1/individuals/consent-requests", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1IndividualsConsentRequestsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create individual consent request. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConsentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IndividualConsentRequestDetails</returns>
        public IndividualConsentRequestDetails V1IndividualsConsentRequestsPost(CreateConsentRequest createConsentRequest, int operationIndex = 0)
        {
            MyDataMyConsent.Client.ApiResponse<IndividualConsentRequestDetails> localVarResponse = V1IndividualsConsentRequestsPostWithHttpInfo(createConsentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create individual consent request. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConsentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IndividualConsentRequestDetails</returns>
        public MyDataMyConsent.Client.ApiResponse<IndividualConsentRequestDetails> V1IndividualsConsentRequestsPostWithHttpInfo(CreateConsentRequest createConsentRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createConsentRequest' is set
            if (createConsentRequest == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'createConsentRequest' when calling IndividualsApi->V1IndividualsConsentRequestsPost");
            }

            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createConsentRequest;

            localVarRequestOptions.Operation = "IndividualsApi.V1IndividualsConsentRequestsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<IndividualConsentRequestDetails>("/v1/individuals/consent-requests", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1IndividualsConsentRequestsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create individual consent request. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConsentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IndividualConsentRequestDetails</returns>
        public async System.Threading.Tasks.Task<IndividualConsentRequestDetails> V1IndividualsConsentRequestsPostAsync(CreateConsentRequest createConsentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Client.ApiResponse<IndividualConsentRequestDetails> localVarResponse = await V1IndividualsConsentRequestsPostWithHttpInfoAsync(createConsentRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create individual consent request. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConsentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IndividualConsentRequestDetails)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Client.ApiResponse<IndividualConsentRequestDetails>> V1IndividualsConsentRequestsPostWithHttpInfoAsync(CreateConsentRequest createConsentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createConsentRequest' is set
            if (createConsentRequest == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'createConsentRequest' when calling IndividualsApi->V1IndividualsConsentRequestsPost");
            }


            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createConsentRequest;

            localVarRequestOptions.Operation = "IndividualsApi.V1IndividualsConsentRequestsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IndividualConsentRequestDetails>("/v1/individuals/consent-requests", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1IndividualsConsentRequestsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel the Individual data request by id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>bool</returns>
        public bool V1IndividualsConsentRequestsRequestIdCancelPut(string requestId, int operationIndex = 0)
        {
            MyDataMyConsent.Client.ApiResponse<bool> localVarResponse = V1IndividualsConsentRequestsRequestIdCancelPutWithHttpInfo(requestId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel the Individual data request by id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of bool</returns>
        public MyDataMyConsent.Client.ApiResponse<bool> V1IndividualsConsentRequestsRequestIdCancelPutWithHttpInfo(string requestId, int operationIndex = 0)
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'requestId' when calling IndividualsApi->V1IndividualsConsentRequestsRequestIdCancelPut");
            }

            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("request_id", MyDataMyConsent.Client.ClientUtils.ParameterToString(requestId)); // path parameter

            localVarRequestOptions.Operation = "IndividualsApi.V1IndividualsConsentRequestsRequestIdCancelPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<bool>("/v1/individuals/consent-requests/{request_id}/cancel", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1IndividualsConsentRequestsRequestIdCancelPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel the Individual data request by id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        public async System.Threading.Tasks.Task<bool> V1IndividualsConsentRequestsRequestIdCancelPutAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Client.ApiResponse<bool> localVarResponse = await V1IndividualsConsentRequestsRequestIdCancelPutWithHttpInfoAsync(requestId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel the Individual data request by id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Client.ApiResponse<bool>> V1IndividualsConsentRequestsRequestIdCancelPutWithHttpInfoAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'requestId' when calling IndividualsApi->V1IndividualsConsentRequestsRequestIdCancelPut");
            }


            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("request_id", MyDataMyConsent.Client.ClientUtils.ParameterToString(requestId)); // path parameter

            localVarRequestOptions.Operation = "IndividualsApi.V1IndividualsConsentRequestsRequestIdCancelPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<bool>("/v1/individuals/consent-requests/{request_id}/cancel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1IndividualsConsentRequestsRequestIdCancelPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Individual data request by id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConsentRequest</returns>
        public ConsentRequest V1IndividualsConsentRequestsRequestIdGet(string requestId, int operationIndex = 0)
        {
            MyDataMyConsent.Client.ApiResponse<ConsentRequest> localVarResponse = V1IndividualsConsentRequestsRequestIdGetWithHttpInfo(requestId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Individual data request by id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConsentRequest</returns>
        public MyDataMyConsent.Client.ApiResponse<ConsentRequest> V1IndividualsConsentRequestsRequestIdGetWithHttpInfo(string requestId, int operationIndex = 0)
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'requestId' when calling IndividualsApi->V1IndividualsConsentRequestsRequestIdGet");
            }

            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("request_id", MyDataMyConsent.Client.ClientUtils.ParameterToString(requestId)); // path parameter

            localVarRequestOptions.Operation = "IndividualsApi.V1IndividualsConsentRequestsRequestIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ConsentRequest>("/v1/individuals/consent-requests/{request_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1IndividualsConsentRequestsRequestIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Individual data request by id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConsentRequest</returns>
        public async System.Threading.Tasks.Task<ConsentRequest> V1IndividualsConsentRequestsRequestIdGetAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Client.ApiResponse<ConsentRequest> localVarResponse = await V1IndividualsConsentRequestsRequestIdGetWithHttpInfoAsync(requestId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Individual data request by id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConsentRequest)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Client.ApiResponse<ConsentRequest>> V1IndividualsConsentRequestsRequestIdGetWithHttpInfoAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'requestId' when calling IndividualsApi->V1IndividualsConsentRequestsRequestIdGet");
            }


            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("request_id", MyDataMyConsent.Client.ClientUtils.ParameterToString(requestId)); // path parameter

            localVarRequestOptions.Operation = "IndividualsApi.V1IndividualsConsentRequestsRequestIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ConsentRequest>("/v1/individuals/consent-requests/{request_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1IndividualsConsentRequestsRequestIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the paginated list of individual consent templates. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaginatedListOfConsentRequestTemplates</returns>
        public PaginatedListOfConsentRequestTemplates V1IndividualsConsentTemplatesGet(int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            MyDataMyConsent.Client.ApiResponse<PaginatedListOfConsentRequestTemplates> localVarResponse = V1IndividualsConsentTemplatesGetWithHttpInfo(pageNo, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the paginated list of individual consent templates. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaginatedListOfConsentRequestTemplates</returns>
        public MyDataMyConsent.Client.ApiResponse<PaginatedListOfConsentRequestTemplates> V1IndividualsConsentTemplatesGetWithHttpInfo(int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "page_no", pageNo));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "IndividualsApi.V1IndividualsConsentTemplatesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PaginatedListOfConsentRequestTemplates>("/v1/individuals/consent-templates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1IndividualsConsentTemplatesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the paginated list of individual consent templates. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaginatedListOfConsentRequestTemplates</returns>
        public async System.Threading.Tasks.Task<PaginatedListOfConsentRequestTemplates> V1IndividualsConsentTemplatesGetAsync(int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Client.ApiResponse<PaginatedListOfConsentRequestTemplates> localVarResponse = await V1IndividualsConsentTemplatesGetWithHttpInfoAsync(pageNo, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the paginated list of individual consent templates. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaginatedListOfConsentRequestTemplates)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Client.ApiResponse<PaginatedListOfConsentRequestTemplates>> V1IndividualsConsentTemplatesGetWithHttpInfoAsync(int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "page_no", pageNo));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "IndividualsApi.V1IndividualsConsentTemplatesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PaginatedListOfConsentRequestTemplates>("/v1/individuals/consent-templates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1IndividualsConsentTemplatesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Individual consent template details by consent id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IndividualConsentRequestTemplateDetails</returns>
        public IndividualConsentRequestTemplateDetails V1IndividualsConsentTemplatesTemplateIdGet(string templateId, int operationIndex = 0)
        {
            MyDataMyConsent.Client.ApiResponse<IndividualConsentRequestTemplateDetails> localVarResponse = V1IndividualsConsentTemplatesTemplateIdGetWithHttpInfo(templateId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Individual consent template details by consent id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IndividualConsentRequestTemplateDetails</returns>
        public MyDataMyConsent.Client.ApiResponse<IndividualConsentRequestTemplateDetails> V1IndividualsConsentTemplatesTemplateIdGetWithHttpInfo(string templateId, int operationIndex = 0)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'templateId' when calling IndividualsApi->V1IndividualsConsentTemplatesTemplateIdGet");
            }

            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", MyDataMyConsent.Client.ClientUtils.ParameterToString(templateId)); // path parameter

            localVarRequestOptions.Operation = "IndividualsApi.V1IndividualsConsentTemplatesTemplateIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<IndividualConsentRequestTemplateDetails>("/v1/individuals/consent-templates/{template_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1IndividualsConsentTemplatesTemplateIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Individual consent template details by consent id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IndividualConsentRequestTemplateDetails</returns>
        public async System.Threading.Tasks.Task<IndividualConsentRequestTemplateDetails> V1IndividualsConsentTemplatesTemplateIdGetAsync(string templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Client.ApiResponse<IndividualConsentRequestTemplateDetails> localVarResponse = await V1IndividualsConsentTemplatesTemplateIdGetWithHttpInfoAsync(templateId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Individual consent template details by consent id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IndividualConsentRequestTemplateDetails)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Client.ApiResponse<IndividualConsentRequestTemplateDetails>> V1IndividualsConsentTemplatesTemplateIdGetWithHttpInfoAsync(string templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'templateId' when calling IndividualsApi->V1IndividualsConsentTemplatesTemplateIdGet");
            }


            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", MyDataMyConsent.Client.ClientUtils.ParameterToString(templateId)); // path parameter

            localVarRequestOptions.Operation = "IndividualsApi.V1IndividualsConsentTemplatesTemplateIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<IndividualConsentRequestTemplateDetails>("/v1/individuals/consent-templates/{template_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1IndividualsConsentTemplatesTemplateIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download Individual consented document by document id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream V1IndividualsConsentsConsentIdDocumentsDocumentIdDownloadGet(string consentId, string documentId, int operationIndex = 0)
        {
            MyDataMyConsent.Client.ApiResponse<System.IO.Stream> localVarResponse = V1IndividualsConsentsConsentIdDocumentsDocumentIdDownloadGetWithHttpInfo(consentId, documentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download Individual consented document by document id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public MyDataMyConsent.Client.ApiResponse<System.IO.Stream> V1IndividualsConsentsConsentIdDocumentsDocumentIdDownloadGetWithHttpInfo(string consentId, string documentId, int operationIndex = 0)
        {
            // verify the required parameter 'consentId' is set
            if (consentId == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'consentId' when calling IndividualsApi->V1IndividualsConsentsConsentIdDocumentsDocumentIdDownloadGet");
            }

            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'documentId' when calling IndividualsApi->V1IndividualsConsentsConsentIdDocumentsDocumentIdDownloadGet");
            }

            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream",
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consent_id", MyDataMyConsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("document_id", MyDataMyConsent.Client.ClientUtils.ParameterToString(documentId)); // path parameter

            localVarRequestOptions.Operation = "IndividualsApi.V1IndividualsConsentsConsentIdDocumentsDocumentIdDownloadGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/v1/individuals/consents/{consent_id}/documents/{document_id}/download", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1IndividualsConsentsConsentIdDocumentsDocumentIdDownloadGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download Individual consented document by document id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> V1IndividualsConsentsConsentIdDocumentsDocumentIdDownloadGetAsync(string consentId, string documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Client.ApiResponse<System.IO.Stream> localVarResponse = await V1IndividualsConsentsConsentIdDocumentsDocumentIdDownloadGetWithHttpInfoAsync(consentId, documentId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download Individual consented document by document id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Client.ApiResponse<System.IO.Stream>> V1IndividualsConsentsConsentIdDocumentsDocumentIdDownloadGetWithHttpInfoAsync(string consentId, string documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'consentId' is set
            if (consentId == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'consentId' when calling IndividualsApi->V1IndividualsConsentsConsentIdDocumentsDocumentIdDownloadGet");
            }

            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'documentId' when calling IndividualsApi->V1IndividualsConsentsConsentIdDocumentsDocumentIdDownloadGet");
            }


            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream",
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consent_id", MyDataMyConsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("document_id", MyDataMyConsent.Client.ClientUtils.ParameterToString(documentId)); // path parameter

            localVarRequestOptions.Operation = "IndividualsApi.V1IndividualsConsentsConsentIdDocumentsDocumentIdDownloadGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/v1/individuals/consents/{consent_id}/documents/{document_id}/download", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1IndividualsConsentsConsentIdDocumentsDocumentIdDownloadGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Individual consented document by document id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConsentedDocument</returns>
        public ConsentedDocument V1IndividualsConsentsConsentIdDocumentsDocumentIdGet(string consentId, string documentId, int operationIndex = 0)
        {
            MyDataMyConsent.Client.ApiResponse<ConsentedDocument> localVarResponse = V1IndividualsConsentsConsentIdDocumentsDocumentIdGetWithHttpInfo(consentId, documentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Individual consented document by document id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConsentedDocument</returns>
        public MyDataMyConsent.Client.ApiResponse<ConsentedDocument> V1IndividualsConsentsConsentIdDocumentsDocumentIdGetWithHttpInfo(string consentId, string documentId, int operationIndex = 0)
        {
            // verify the required parameter 'consentId' is set
            if (consentId == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'consentId' when calling IndividualsApi->V1IndividualsConsentsConsentIdDocumentsDocumentIdGet");
            }

            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'documentId' when calling IndividualsApi->V1IndividualsConsentsConsentIdDocumentsDocumentIdGet");
            }

            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consent_id", MyDataMyConsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("document_id", MyDataMyConsent.Client.ClientUtils.ParameterToString(documentId)); // path parameter

            localVarRequestOptions.Operation = "IndividualsApi.V1IndividualsConsentsConsentIdDocumentsDocumentIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ConsentedDocument>("/v1/individuals/consents/{consent_id}/documents/{document_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1IndividualsConsentsConsentIdDocumentsDocumentIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Individual consented document by document id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConsentedDocument</returns>
        public async System.Threading.Tasks.Task<ConsentedDocument> V1IndividualsConsentsConsentIdDocumentsDocumentIdGetAsync(string consentId, string documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Client.ApiResponse<ConsentedDocument> localVarResponse = await V1IndividualsConsentsConsentIdDocumentsDocumentIdGetWithHttpInfoAsync(consentId, documentId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Individual consented document by document id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="documentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConsentedDocument)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Client.ApiResponse<ConsentedDocument>> V1IndividualsConsentsConsentIdDocumentsDocumentIdGetWithHttpInfoAsync(string consentId, string documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'consentId' is set
            if (consentId == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'consentId' when calling IndividualsApi->V1IndividualsConsentsConsentIdDocumentsDocumentIdGet");
            }

            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'documentId' when calling IndividualsApi->V1IndividualsConsentsConsentIdDocumentsDocumentIdGet");
            }


            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consent_id", MyDataMyConsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("document_id", MyDataMyConsent.Client.ClientUtils.ParameterToString(documentId)); // path parameter

            localVarRequestOptions.Operation = "IndividualsApi.V1IndividualsConsentsConsentIdDocumentsDocumentIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ConsentedDocument>("/v1/individuals/consents/{consent_id}/documents/{document_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1IndividualsConsentsConsentIdDocumentsDocumentIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Individual consented document by consent id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ConsentedDocument&gt;</returns>
        public List<ConsentedDocument> V1IndividualsConsentsConsentIdDocumentsGet(string consentId, int operationIndex = 0)
        {
            MyDataMyConsent.Client.ApiResponse<List<ConsentedDocument>> localVarResponse = V1IndividualsConsentsConsentIdDocumentsGetWithHttpInfo(consentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Individual consented document by consent id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ConsentedDocument&gt;</returns>
        public MyDataMyConsent.Client.ApiResponse<List<ConsentedDocument>> V1IndividualsConsentsConsentIdDocumentsGetWithHttpInfo(string consentId, int operationIndex = 0)
        {
            // verify the required parameter 'consentId' is set
            if (consentId == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'consentId' when calling IndividualsApi->V1IndividualsConsentsConsentIdDocumentsGet");
            }

            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consent_id", MyDataMyConsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter

            localVarRequestOptions.Operation = "IndividualsApi.V1IndividualsConsentsConsentIdDocumentsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ConsentedDocument>>("/v1/individuals/consents/{consent_id}/documents", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1IndividualsConsentsConsentIdDocumentsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Individual consented document by consent id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ConsentedDocument&gt;</returns>
        public async System.Threading.Tasks.Task<List<ConsentedDocument>> V1IndividualsConsentsConsentIdDocumentsGetAsync(string consentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Client.ApiResponse<List<ConsentedDocument>> localVarResponse = await V1IndividualsConsentsConsentIdDocumentsGetWithHttpInfoAsync(consentId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Individual consented document by consent id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ConsentedDocument&gt;)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Client.ApiResponse<List<ConsentedDocument>>> V1IndividualsConsentsConsentIdDocumentsGetWithHttpInfoAsync(string consentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'consentId' is set
            if (consentId == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'consentId' when calling IndividualsApi->V1IndividualsConsentsConsentIdDocumentsGet");
            }


            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consent_id", MyDataMyConsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter

            localVarRequestOptions.Operation = "IndividualsApi.V1IndividualsConsentsConsentIdDocumentsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ConsentedDocument>>("/v1/individuals/consents/{consent_id}/documents", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1IndividualsConsentsConsentIdDocumentsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get individual consented financial account details. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FinancialAccount</returns>
        public FinancialAccount V1IndividualsConsentsConsentIdFinancialAccountsAccountIdGet(string consentId, string accountId, int operationIndex = 0)
        {
            MyDataMyConsent.Client.ApiResponse<FinancialAccount> localVarResponse = V1IndividualsConsentsConsentIdFinancialAccountsAccountIdGetWithHttpInfo(consentId, accountId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get individual consented financial account details. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FinancialAccount</returns>
        public MyDataMyConsent.Client.ApiResponse<FinancialAccount> V1IndividualsConsentsConsentIdFinancialAccountsAccountIdGetWithHttpInfo(string consentId, string accountId, int operationIndex = 0)
        {
            // verify the required parameter 'consentId' is set
            if (consentId == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'consentId' when calling IndividualsApi->V1IndividualsConsentsConsentIdFinancialAccountsAccountIdGet");
            }

            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'accountId' when calling IndividualsApi->V1IndividualsConsentsConsentIdFinancialAccountsAccountIdGet");
            }

            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consent_id", MyDataMyConsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("account_id", MyDataMyConsent.Client.ClientUtils.ParameterToString(accountId)); // path parameter

            localVarRequestOptions.Operation = "IndividualsApi.V1IndividualsConsentsConsentIdFinancialAccountsAccountIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FinancialAccount>("/v1/individuals/consents/{consent_id}/financial-accounts/{account_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1IndividualsConsentsConsentIdFinancialAccountsAccountIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get individual consented financial account details. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FinancialAccount</returns>
        public async System.Threading.Tasks.Task<FinancialAccount> V1IndividualsConsentsConsentIdFinancialAccountsAccountIdGetAsync(string consentId, string accountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Client.ApiResponse<FinancialAccount> localVarResponse = await V1IndividualsConsentsConsentIdFinancialAccountsAccountIdGetWithHttpInfoAsync(consentId, accountId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get individual consented financial account details. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FinancialAccount)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Client.ApiResponse<FinancialAccount>> V1IndividualsConsentsConsentIdFinancialAccountsAccountIdGetWithHttpInfoAsync(string consentId, string accountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'consentId' is set
            if (consentId == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'consentId' when calling IndividualsApi->V1IndividualsConsentsConsentIdFinancialAccountsAccountIdGet");
            }

            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'accountId' when calling IndividualsApi->V1IndividualsConsentsConsentIdFinancialAccountsAccountIdGet");
            }


            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consent_id", MyDataMyConsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("account_id", MyDataMyConsent.Client.ClientUtils.ParameterToString(accountId)); // path parameter

            localVarRequestOptions.Operation = "IndividualsApi.V1IndividualsConsentsConsentIdFinancialAccountsAccountIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FinancialAccount>("/v1/individuals/consents/{consent_id}/financial-accounts/{account_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1IndividualsConsentsConsentIdFinancialAccountsAccountIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get individual consented financial account transactions. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="filters"> (optional)</param>
        /// <param name="fromDateTime"> (optional)</param>
        /// <param name="toDateTime"> (optional)</param>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaginatedListOfFinancialAccountTransactions</returns>
        public PaginatedListOfFinancialAccountTransactions V1IndividualsConsentsConsentIdFinancialAccountsAccountIdTransactionsGet(string consentId, string accountId, string? filters = default(string?), string? fromDateTime = default(string?), string? toDateTime = default(string?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            MyDataMyConsent.Client.ApiResponse<PaginatedListOfFinancialAccountTransactions> localVarResponse = V1IndividualsConsentsConsentIdFinancialAccountsAccountIdTransactionsGetWithHttpInfo(consentId, accountId, filters, fromDateTime, toDateTime, pageNo, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get individual consented financial account transactions. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="filters"> (optional)</param>
        /// <param name="fromDateTime"> (optional)</param>
        /// <param name="toDateTime"> (optional)</param>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaginatedListOfFinancialAccountTransactions</returns>
        public MyDataMyConsent.Client.ApiResponse<PaginatedListOfFinancialAccountTransactions> V1IndividualsConsentsConsentIdFinancialAccountsAccountIdTransactionsGetWithHttpInfo(string consentId, string accountId, string? filters = default(string?), string? fromDateTime = default(string?), string? toDateTime = default(string?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'consentId' is set
            if (consentId == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'consentId' when calling IndividualsApi->V1IndividualsConsentsConsentIdFinancialAccountsAccountIdTransactionsGet");
            }

            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'accountId' when calling IndividualsApi->V1IndividualsConsentsConsentIdFinancialAccountsAccountIdTransactionsGet");
            }

            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consent_id", MyDataMyConsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("account_id", MyDataMyConsent.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            if (filters != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "filters", filters));
            }
            if (fromDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "from_date_time", fromDateTime));
            }
            if (toDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "to_date_time", toDateTime));
            }
            if (pageNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "page_no", pageNo));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "IndividualsApi.V1IndividualsConsentsConsentIdFinancialAccountsAccountIdTransactionsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PaginatedListOfFinancialAccountTransactions>("/v1/individuals/consents/{consent_id}/financial-accounts/{account_id}/transactions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1IndividualsConsentsConsentIdFinancialAccountsAccountIdTransactionsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get individual consented financial account transactions. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="filters"> (optional)</param>
        /// <param name="fromDateTime"> (optional)</param>
        /// <param name="toDateTime"> (optional)</param>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaginatedListOfFinancialAccountTransactions</returns>
        public async System.Threading.Tasks.Task<PaginatedListOfFinancialAccountTransactions> V1IndividualsConsentsConsentIdFinancialAccountsAccountIdTransactionsGetAsync(string consentId, string accountId, string? filters = default(string?), string? fromDateTime = default(string?), string? toDateTime = default(string?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Client.ApiResponse<PaginatedListOfFinancialAccountTransactions> localVarResponse = await V1IndividualsConsentsConsentIdFinancialAccountsAccountIdTransactionsGetWithHttpInfoAsync(consentId, accountId, filters, fromDateTime, toDateTime, pageNo, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get individual consented financial account transactions. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="accountId"></param>
        /// <param name="filters"> (optional)</param>
        /// <param name="fromDateTime"> (optional)</param>
        /// <param name="toDateTime"> (optional)</param>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaginatedListOfFinancialAccountTransactions)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Client.ApiResponse<PaginatedListOfFinancialAccountTransactions>> V1IndividualsConsentsConsentIdFinancialAccountsAccountIdTransactionsGetWithHttpInfoAsync(string consentId, string accountId, string? filters = default(string?), string? fromDateTime = default(string?), string? toDateTime = default(string?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'consentId' is set
            if (consentId == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'consentId' when calling IndividualsApi->V1IndividualsConsentsConsentIdFinancialAccountsAccountIdTransactionsGet");
            }

            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'accountId' when calling IndividualsApi->V1IndividualsConsentsConsentIdFinancialAccountsAccountIdTransactionsGet");
            }


            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consent_id", MyDataMyConsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("account_id", MyDataMyConsent.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            if (filters != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "filters", filters));
            }
            if (fromDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "from_date_time", fromDateTime));
            }
            if (toDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "to_date_time", toDateTime));
            }
            if (pageNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "page_no", pageNo));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "IndividualsApi.V1IndividualsConsentsConsentIdFinancialAccountsAccountIdTransactionsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PaginatedListOfFinancialAccountTransactions>("/v1/individuals/consents/{consent_id}/financial-accounts/{account_id}/transactions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1IndividualsConsentsConsentIdFinancialAccountsAccountIdTransactionsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all individual consented financial accounts. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;FinancialAccount&gt;</returns>
        public List<FinancialAccount> V1IndividualsConsentsConsentIdFinancialAccountsGet(string consentId, int operationIndex = 0)
        {
            MyDataMyConsent.Client.ApiResponse<List<FinancialAccount>> localVarResponse = V1IndividualsConsentsConsentIdFinancialAccountsGetWithHttpInfo(consentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all individual consented financial accounts. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;FinancialAccount&gt;</returns>
        public MyDataMyConsent.Client.ApiResponse<List<FinancialAccount>> V1IndividualsConsentsConsentIdFinancialAccountsGetWithHttpInfo(string consentId, int operationIndex = 0)
        {
            // verify the required parameter 'consentId' is set
            if (consentId == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'consentId' when calling IndividualsApi->V1IndividualsConsentsConsentIdFinancialAccountsGet");
            }

            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consent_id", MyDataMyConsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter

            localVarRequestOptions.Operation = "IndividualsApi.V1IndividualsConsentsConsentIdFinancialAccountsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<FinancialAccount>>("/v1/individuals/consents/{consent_id}/financial-accounts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1IndividualsConsentsConsentIdFinancialAccountsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all individual consented financial accounts. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;FinancialAccount&gt;</returns>
        public async System.Threading.Tasks.Task<List<FinancialAccount>> V1IndividualsConsentsConsentIdFinancialAccountsGetAsync(string consentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Client.ApiResponse<List<FinancialAccount>> localVarResponse = await V1IndividualsConsentsConsentIdFinancialAccountsGetWithHttpInfoAsync(consentId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all individual consented financial accounts. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;FinancialAccount&gt;)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Client.ApiResponse<List<FinancialAccount>>> V1IndividualsConsentsConsentIdFinancialAccountsGetWithHttpInfoAsync(string consentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'consentId' is set
            if (consentId == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'consentId' when calling IndividualsApi->V1IndividualsConsentsConsentIdFinancialAccountsGet");
            }


            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consent_id", MyDataMyConsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter

            localVarRequestOptions.Operation = "IndividualsApi.V1IndividualsConsentsConsentIdFinancialAccountsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<FinancialAccount>>("/v1/individuals/consents/{consent_id}/financial-accounts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1IndividualsConsentsConsentIdFinancialAccountsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Individuals consent details by consent id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConsentDetails</returns>
        public ConsentDetails V1IndividualsConsentsConsentIdGet(string consentId, int operationIndex = 0)
        {
            MyDataMyConsent.Client.ApiResponse<ConsentDetails> localVarResponse = V1IndividualsConsentsConsentIdGetWithHttpInfo(consentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Individuals consent details by consent id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConsentDetails</returns>
        public MyDataMyConsent.Client.ApiResponse<ConsentDetails> V1IndividualsConsentsConsentIdGetWithHttpInfo(string consentId, int operationIndex = 0)
        {
            // verify the required parameter 'consentId' is set
            if (consentId == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'consentId' when calling IndividualsApi->V1IndividualsConsentsConsentIdGet");
            }

            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consent_id", MyDataMyConsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter

            localVarRequestOptions.Operation = "IndividualsApi.V1IndividualsConsentsConsentIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ConsentDetails>("/v1/individuals/consents/{consent_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1IndividualsConsentsConsentIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Individuals consent details by consent id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConsentDetails</returns>
        public async System.Threading.Tasks.Task<ConsentDetails> V1IndividualsConsentsConsentIdGetAsync(string consentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Client.ApiResponse<ConsentDetails> localVarResponse = await V1IndividualsConsentsConsentIdGetWithHttpInfoAsync(consentId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Individuals consent details by consent id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConsentDetails)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Client.ApiResponse<ConsentDetails>> V1IndividualsConsentsConsentIdGetWithHttpInfoAsync(string consentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'consentId' is set
            if (consentId == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'consentId' when calling IndividualsApi->V1IndividualsConsentsConsentIdGet");
            }


            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consent_id", MyDataMyConsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter

            localVarRequestOptions.Operation = "IndividualsApi.V1IndividualsConsentsConsentIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ConsentDetails>("/v1/individuals/consents/{consent_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1IndividualsConsentsConsentIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Individual consented document by consent id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object V1IndividualsConsentsConsentIdHealthFhirBundleGet(string consentId, int operationIndex = 0)
        {
            MyDataMyConsent.Client.ApiResponse<Object> localVarResponse = V1IndividualsConsentsConsentIdHealthFhirBundleGetWithHttpInfo(consentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Individual consented document by consent id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public MyDataMyConsent.Client.ApiResponse<Object> V1IndividualsConsentsConsentIdHealthFhirBundleGetWithHttpInfo(string consentId, int operationIndex = 0)
        {
            // verify the required parameter 'consentId' is set
            if (consentId == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'consentId' when calling IndividualsApi->V1IndividualsConsentsConsentIdHealthFhirBundleGet");
            }

            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consent_id", MyDataMyConsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter

            localVarRequestOptions.Operation = "IndividualsApi.V1IndividualsConsentsConsentIdHealthFhirBundleGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/v1/individuals/consents/{consent_id}/health/fhir/bundle", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1IndividualsConsentsConsentIdHealthFhirBundleGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Individual consented document by consent id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> V1IndividualsConsentsConsentIdHealthFhirBundleGetAsync(string consentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Client.ApiResponse<Object> localVarResponse = await V1IndividualsConsentsConsentIdHealthFhirBundleGetWithHttpInfoAsync(consentId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Individual consented document by consent id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Client.ApiResponse<Object>> V1IndividualsConsentsConsentIdHealthFhirBundleGetWithHttpInfoAsync(string consentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'consentId' is set
            if (consentId == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'consentId' when calling IndividualsApi->V1IndividualsConsentsConsentIdHealthFhirBundleGet");
            }


            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consent_id", MyDataMyConsent.Client.ClientUtils.ParameterToString(consentId)); // path parameter

            localVarRequestOptions.Operation = "IndividualsApi.V1IndividualsConsentsConsentIdHealthFhirBundleGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/v1/individuals/consents/{consent_id}/health/fhir/bundle", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1IndividualsConsentsConsentIdHealthFhirBundleGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the paginated list of Individual consents. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status"> (optional)</param>
        /// <param name="fromDateTime"> (optional)</param>
        /// <param name="toDateTime"> (optional)</param>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaginatedListOfConsents</returns>
        public PaginatedListOfConsents V1IndividualsConsentsGet(DataConsentStatus? status = default(DataConsentStatus?), DateTime? fromDateTime = default(DateTime?), DateTime? toDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            MyDataMyConsent.Client.ApiResponse<PaginatedListOfConsents> localVarResponse = V1IndividualsConsentsGetWithHttpInfo(status, fromDateTime, toDateTime, pageNo, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the paginated list of Individual consents. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status"> (optional)</param>
        /// <param name="fromDateTime"> (optional)</param>
        /// <param name="toDateTime"> (optional)</param>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaginatedListOfConsents</returns>
        public MyDataMyConsent.Client.ApiResponse<PaginatedListOfConsents> V1IndividualsConsentsGetWithHttpInfo(DataConsentStatus? status = default(DataConsentStatus?), DateTime? fromDateTime = default(DateTime?), DateTime? toDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (fromDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "from_date_time", fromDateTime));
            }
            if (toDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "to_date_time", toDateTime));
            }
            if (pageNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "page_no", pageNo));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "IndividualsApi.V1IndividualsConsentsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PaginatedListOfConsents>("/v1/individuals/consents", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1IndividualsConsentsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the paginated list of Individual consents. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status"> (optional)</param>
        /// <param name="fromDateTime"> (optional)</param>
        /// <param name="toDateTime"> (optional)</param>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaginatedListOfConsents</returns>
        public async System.Threading.Tasks.Task<PaginatedListOfConsents> V1IndividualsConsentsGetAsync(DataConsentStatus? status = default(DataConsentStatus?), DateTime? fromDateTime = default(DateTime?), DateTime? toDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Client.ApiResponse<PaginatedListOfConsents> localVarResponse = await V1IndividualsConsentsGetWithHttpInfoAsync(status, fromDateTime, toDateTime, pageNo, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the paginated list of Individual consents. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status"> (optional)</param>
        /// <param name="fromDateTime"> (optional)</param>
        /// <param name="toDateTime"> (optional)</param>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaginatedListOfConsents)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Client.ApiResponse<PaginatedListOfConsents>> V1IndividualsConsentsGetWithHttpInfoAsync(DataConsentStatus? status = default(DataConsentStatus?), DateTime? fromDateTime = default(DateTime?), DateTime? toDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (fromDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "from_date_time", fromDateTime));
            }
            if (toDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "to_date_time", toDateTime));
            }
            if (pageNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "page_no", pageNo));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "IndividualsApi.V1IndividualsConsentsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PaginatedListOfConsents>("/v1/individuals/consents", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1IndividualsConsentsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload a document for issuance request of individual. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequestId"></param>
        /// <param name="file"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UploadDocumentResponse</returns>
        public UploadDocumentResponse V1IndividualsDocumentsIssueIssueRequestIdUploadPost(string issueRequestId, System.IO.Stream file, int operationIndex = 0)
        {
            MyDataMyConsent.Client.ApiResponse<UploadDocumentResponse> localVarResponse = V1IndividualsDocumentsIssueIssueRequestIdUploadPostWithHttpInfo(issueRequestId, file);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload a document for issuance request of individual. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequestId"></param>
        /// <param name="file"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UploadDocumentResponse</returns>
        public MyDataMyConsent.Client.ApiResponse<UploadDocumentResponse> V1IndividualsDocumentsIssueIssueRequestIdUploadPostWithHttpInfo(string issueRequestId, System.IO.Stream file, int operationIndex = 0)
        {
            // verify the required parameter 'issueRequestId' is set
            if (issueRequestId == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'issueRequestId' when calling IndividualsApi->V1IndividualsDocumentsIssueIssueRequestIdUploadPost");
            }

            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'file' when calling IndividualsApi->V1IndividualsDocumentsIssueIssueRequestIdUploadPost");
            }

            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("issue_request_id", MyDataMyConsent.Client.ClientUtils.ParameterToString(issueRequestId)); // path parameter
            localVarRequestOptions.FileParameters.Add("file", file);

            localVarRequestOptions.Operation = "IndividualsApi.V1IndividualsDocumentsIssueIssueRequestIdUploadPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UploadDocumentResponse>("/v1/individuals/documents/issue/{issue_request_id}/upload", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1IndividualsDocumentsIssueIssueRequestIdUploadPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload a document for issuance request of individual. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequestId"></param>
        /// <param name="file"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UploadDocumentResponse</returns>
        public async System.Threading.Tasks.Task<UploadDocumentResponse> V1IndividualsDocumentsIssueIssueRequestIdUploadPostAsync(string issueRequestId, System.IO.Stream file, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Client.ApiResponse<UploadDocumentResponse> localVarResponse = await V1IndividualsDocumentsIssueIssueRequestIdUploadPostWithHttpInfoAsync(issueRequestId, file, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload a document for issuance request of individual. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequestId"></param>
        /// <param name="file"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UploadDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Client.ApiResponse<UploadDocumentResponse>> V1IndividualsDocumentsIssueIssueRequestIdUploadPostWithHttpInfoAsync(string issueRequestId, System.IO.Stream file, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'issueRequestId' is set
            if (issueRequestId == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'issueRequestId' when calling IndividualsApi->V1IndividualsDocumentsIssueIssueRequestIdUploadPost");
            }

            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'file' when calling IndividualsApi->V1IndividualsDocumentsIssueIssueRequestIdUploadPost");
            }


            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("issue_request_id", MyDataMyConsent.Client.ClientUtils.ParameterToString(issueRequestId)); // path parameter
            localVarRequestOptions.FileParameters.Add("file", file);

            localVarRequestOptions.Operation = "IndividualsApi.V1IndividualsDocumentsIssueIssueRequestIdUploadPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UploadDocumentResponse>("/v1/individuals/documents/issue/{issue_request_id}/upload", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1IndividualsDocumentsIssueIssueRequestIdUploadPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Issue a new document to an individual user. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentIssueRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DocumentIssueRequestDetails</returns>
        public DocumentIssueRequestDetails V1IndividualsDocumentsIssuePost(DocumentIssueRequest documentIssueRequest, int operationIndex = 0)
        {
            MyDataMyConsent.Client.ApiResponse<DocumentIssueRequestDetails> localVarResponse = V1IndividualsDocumentsIssuePostWithHttpInfo(documentIssueRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Issue a new document to an individual user. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentIssueRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DocumentIssueRequestDetails</returns>
        public MyDataMyConsent.Client.ApiResponse<DocumentIssueRequestDetails> V1IndividualsDocumentsIssuePostWithHttpInfo(DocumentIssueRequest documentIssueRequest, int operationIndex = 0)
        {
            // verify the required parameter 'documentIssueRequest' is set
            if (documentIssueRequest == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'documentIssueRequest' when calling IndividualsApi->V1IndividualsDocumentsIssuePost");
            }

            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = documentIssueRequest;

            localVarRequestOptions.Operation = "IndividualsApi.V1IndividualsDocumentsIssuePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DocumentIssueRequestDetails>("/v1/individuals/documents/issue", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1IndividualsDocumentsIssuePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Issue a new document to an individual user. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentIssueRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DocumentIssueRequestDetails</returns>
        public async System.Threading.Tasks.Task<DocumentIssueRequestDetails> V1IndividualsDocumentsIssuePostAsync(DocumentIssueRequest documentIssueRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Client.ApiResponse<DocumentIssueRequestDetails> localVarResponse = await V1IndividualsDocumentsIssuePostWithHttpInfoAsync(documentIssueRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Issue a new document to an individual user. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentIssueRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DocumentIssueRequestDetails)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Client.ApiResponse<DocumentIssueRequestDetails>> V1IndividualsDocumentsIssuePostWithHttpInfoAsync(DocumentIssueRequest documentIssueRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'documentIssueRequest' is set
            if (documentIssueRequest == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'documentIssueRequest' when calling IndividualsApi->V1IndividualsDocumentsIssuePost");
            }


            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = documentIssueRequest;

            localVarRequestOptions.Operation = "IndividualsApi.V1IndividualsDocumentsIssuePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DocumentIssueRequestDetails>("/v1/individuals/documents/issue", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1IndividualsDocumentsIssuePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get issued document. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IssuedDocument</returns>
        public IssuedDocument V1IndividualsDocumentsIssuedDocumentIdGet(string documentId, int operationIndex = 0)
        {
            MyDataMyConsent.Client.ApiResponse<IssuedDocument> localVarResponse = V1IndividualsDocumentsIssuedDocumentIdGetWithHttpInfo(documentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get issued document. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IssuedDocument</returns>
        public MyDataMyConsent.Client.ApiResponse<IssuedDocument> V1IndividualsDocumentsIssuedDocumentIdGetWithHttpInfo(string documentId, int operationIndex = 0)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'documentId' when calling IndividualsApi->V1IndividualsDocumentsIssuedDocumentIdGet");
            }

            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("document_id", MyDataMyConsent.Client.ClientUtils.ParameterToString(documentId)); // path parameter

            localVarRequestOptions.Operation = "IndividualsApi.V1IndividualsDocumentsIssuedDocumentIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<IssuedDocument>("/v1/individuals/documents/issued/{document_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1IndividualsDocumentsIssuedDocumentIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get issued document. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IssuedDocument</returns>
        public async System.Threading.Tasks.Task<IssuedDocument> V1IndividualsDocumentsIssuedDocumentIdGetAsync(string documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Client.ApiResponse<IssuedDocument> localVarResponse = await V1IndividualsDocumentsIssuedDocumentIdGetWithHttpInfoAsync(documentId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get issued document. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IssuedDocument)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Client.ApiResponse<IssuedDocument>> V1IndividualsDocumentsIssuedDocumentIdGetWithHttpInfoAsync(string documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'documentId' when calling IndividualsApi->V1IndividualsDocumentsIssuedDocumentIdGet");
            }


            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("document_id", MyDataMyConsent.Client.ClientUtils.ParameterToString(documentId)); // path parameter

            localVarRequestOptions.Operation = "IndividualsApi.V1IndividualsDocumentsIssuedDocumentIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<IssuedDocument>("/v1/individuals/documents/issued/{document_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1IndividualsDocumentsIssuedDocumentIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get paginated list of issued documents of given document type. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId"></param>
        /// <param name="fromDateTime"> (optional)</param>
        /// <param name="toDateTime"> (optional)</param>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaginatedListOfIssuedDocuments</returns>
        public PaginatedListOfIssuedDocuments V1IndividualsDocumentsIssuedGet(string documentTypeId, DateTime? fromDateTime = default(DateTime?), DateTime? toDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            MyDataMyConsent.Client.ApiResponse<PaginatedListOfIssuedDocuments> localVarResponse = V1IndividualsDocumentsIssuedGetWithHttpInfo(documentTypeId, fromDateTime, toDateTime, pageNo, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get paginated list of issued documents of given document type. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId"></param>
        /// <param name="fromDateTime"> (optional)</param>
        /// <param name="toDateTime"> (optional)</param>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaginatedListOfIssuedDocuments</returns>
        public MyDataMyConsent.Client.ApiResponse<PaginatedListOfIssuedDocuments> V1IndividualsDocumentsIssuedGetWithHttpInfo(string documentTypeId, DateTime? fromDateTime = default(DateTime?), DateTime? toDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'documentTypeId' when calling IndividualsApi->V1IndividualsDocumentsIssuedGet");
            }

            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "document_type_id", documentTypeId));
            if (fromDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "from_date_time", fromDateTime));
            }
            if (toDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "to_date_time", toDateTime));
            }
            if (pageNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "page_no", pageNo));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "IndividualsApi.V1IndividualsDocumentsIssuedGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PaginatedListOfIssuedDocuments>("/v1/individuals/documents/issued", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1IndividualsDocumentsIssuedGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get paginated list of issued documents of given document type. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId"></param>
        /// <param name="fromDateTime"> (optional)</param>
        /// <param name="toDateTime"> (optional)</param>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaginatedListOfIssuedDocuments</returns>
        public async System.Threading.Tasks.Task<PaginatedListOfIssuedDocuments> V1IndividualsDocumentsIssuedGetAsync(string documentTypeId, DateTime? fromDateTime = default(DateTime?), DateTime? toDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Client.ApiResponse<PaginatedListOfIssuedDocuments> localVarResponse = await V1IndividualsDocumentsIssuedGetWithHttpInfoAsync(documentTypeId, fromDateTime, toDateTime, pageNo, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get paginated list of issued documents of given document type. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId"></param>
        /// <param name="fromDateTime"> (optional)</param>
        /// <param name="toDateTime"> (optional)</param>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaginatedListOfIssuedDocuments)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Client.ApiResponse<PaginatedListOfIssuedDocuments>> V1IndividualsDocumentsIssuedGetWithHttpInfoAsync(string documentTypeId, DateTime? fromDateTime = default(DateTime?), DateTime? toDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'documentTypeId' when calling IndividualsApi->V1IndividualsDocumentsIssuedGet");
            }


            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "document_type_id", documentTypeId));
            if (fromDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "from_date_time", fromDateTime));
            }
            if (toDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "to_date_time", toDateTime));
            }
            if (pageNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "page_no", pageNo));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "IndividualsApi.V1IndividualsDocumentsIssuedGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PaginatedListOfIssuedDocuments>("/v1/individuals/documents/issued", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1IndividualsDocumentsIssuedGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get paginated list of registered document types. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaginatedListOfDocumentTypes</returns>
        public PaginatedListOfDocumentTypes V1IndividualsDocumentsTypesGet(int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            MyDataMyConsent.Client.ApiResponse<PaginatedListOfDocumentTypes> localVarResponse = V1IndividualsDocumentsTypesGetWithHttpInfo(pageNo, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get paginated list of registered document types. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaginatedListOfDocumentTypes</returns>
        public MyDataMyConsent.Client.ApiResponse<PaginatedListOfDocumentTypes> V1IndividualsDocumentsTypesGetWithHttpInfo(int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "page_no", pageNo));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "IndividualsApi.V1IndividualsDocumentsTypesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PaginatedListOfDocumentTypes>("/v1/individuals/documents/types", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1IndividualsDocumentsTypesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get paginated list of registered document types. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaginatedListOfDocumentTypes</returns>
        public async System.Threading.Tasks.Task<PaginatedListOfDocumentTypes> V1IndividualsDocumentsTypesGetAsync(int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Client.ApiResponse<PaginatedListOfDocumentTypes> localVarResponse = await V1IndividualsDocumentsTypesGetWithHttpInfoAsync(pageNo, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get paginated list of registered document types. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaginatedListOfDocumentTypes)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Client.ApiResponse<PaginatedListOfDocumentTypes>> V1IndividualsDocumentsTypesGetWithHttpInfoAsync(int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "page_no", pageNo));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "IndividualsApi.V1IndividualsDocumentsTypesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PaginatedListOfDocumentTypes>("/v1/individuals/documents/types", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1IndividualsDocumentsTypesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
