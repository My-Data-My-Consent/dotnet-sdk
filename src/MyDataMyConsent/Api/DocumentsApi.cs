/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using MyDataMyConsent.Client;
using MyDataMyConsent.Models;

namespace MyDataMyConsent.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDocumentsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get issued document.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IssuedDocumentDetails</returns>
        IssuedDocumentDetails GetIssuedDocumentById(Guid documentId, int operationIndex = 0);

        /// <summary>
        /// Get issued document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IssuedDocumentDetails</returns>
        ApiResponse<IssuedDocumentDetails> GetIssuedDocumentByIdWithHttpInfo(Guid documentId, int operationIndex = 0);
        /// <summary>
        /// Get paginated list of issued documents of given document type.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type id. (optional)</param>
        /// <param name="fromDateTime">From DateTime in UTC timezone. (optional)</param>
        /// <param name="toDateTime">To DateTime in UTC timezone. (optional)</param>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IssuedDocumentPaginatedList</returns>
        IssuedDocumentPaginatedList GetIssuedDocuments(Guid? documentTypeId = default(Guid?), DateTime? fromDateTime = default(DateTime?), DateTime? toDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get paginated list of issued documents of given document type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type id. (optional)</param>
        /// <param name="fromDateTime">From DateTime in UTC timezone. (optional)</param>
        /// <param name="toDateTime">To DateTime in UTC timezone. (optional)</param>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IssuedDocumentPaginatedList</returns>
        ApiResponse<IssuedDocumentPaginatedList> GetIssuedDocumentsWithHttpInfo(Guid? documentTypeId = default(Guid?), DateTime? fromDateTime = default(DateTime?), DateTime? toDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get paginated list of registered document types.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supportedEntityType">Supported entity type. (optional)</param>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DocumentTypePaginatedList</returns>
        DocumentTypePaginatedList GetRegisteredDocumentTypes(SupportedEntityType? supportedEntityType = default(SupportedEntityType?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get paginated list of registered document types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supportedEntityType">Supported entity type. (optional)</param>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DocumentTypePaginatedList</returns>
        ApiResponse<DocumentTypePaginatedList> GetRegisteredDocumentTypesWithHttpInfo(SupportedEntityType? supportedEntityType = default(SupportedEntityType?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// Issue a new document to an individual user.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentIssueRequest">Document issue request payload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DocumentIssueRequestDetails</returns>
        DocumentIssueRequestDetails IssueDocumentToIndividual(DocumentIssueRequest documentIssueRequest, int operationIndex = 0);

        /// <summary>
        /// Issue a new document to an individual user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentIssueRequest">Document issue request payload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DocumentIssueRequestDetails</returns>
        ApiResponse<DocumentIssueRequestDetails> IssueDocumentToIndividualWithHttpInfo(DocumentIssueRequest documentIssueRequest, int operationIndex = 0);
        /// <summary>
        /// Issue a new document to an organization.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentIssueRequest">Document issue request payload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DocumentIssueRequestDetails</returns>
        DocumentIssueRequestDetails IssueDocumentToOrganization(DocumentIssueRequest documentIssueRequest, int operationIndex = 0);

        /// <summary>
        /// Issue a new document to an organization.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentIssueRequest">Document issue request payload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DocumentIssueRequestDetails</returns>
        ApiResponse<DocumentIssueRequestDetails> IssueDocumentToOrganizationWithHttpInfo(DocumentIssueRequest documentIssueRequest, int operationIndex = 0);
        /// <summary>
        /// Upload a document for issuance request of individual.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequestId">Document issue request id.</param>
        /// <param name="formFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UploadDocumentForIndividual(Guid issueRequestId, System.IO.Stream formFile, int operationIndex = 0);

        /// <summary>
        /// Upload a document for issuance request of individual.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequestId">Document issue request id.</param>
        /// <param name="formFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UploadDocumentForIndividualWithHttpInfo(Guid issueRequestId, System.IO.Stream formFile, int operationIndex = 0);
        /// <summary>
        /// Upload a document for issuance request of organization.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequestId">Document issue request id System.Guid.</param>
        /// <param name="formFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UploadDocumentForOrganization(Guid issueRequestId, System.IO.Stream formFile, int operationIndex = 0);

        /// <summary>
        /// Upload a document for issuance request of organization.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequestId">Document issue request id System.Guid.</param>
        /// <param name="formFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UploadDocumentForOrganizationWithHttpInfo(Guid issueRequestId, System.IO.Stream formFile, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDocumentsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get issued document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IssuedDocumentDetails</returns>
        System.Threading.Tasks.Task<IssuedDocumentDetails> GetIssuedDocumentByIdAsync(Guid documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get issued document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IssuedDocumentDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<IssuedDocumentDetails>> GetIssuedDocumentByIdWithHttpInfoAsync(Guid documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get paginated list of issued documents of given document type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type id. (optional)</param>
        /// <param name="fromDateTime">From DateTime in UTC timezone. (optional)</param>
        /// <param name="toDateTime">To DateTime in UTC timezone. (optional)</param>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IssuedDocumentPaginatedList</returns>
        System.Threading.Tasks.Task<IssuedDocumentPaginatedList> GetIssuedDocumentsAsync(Guid? documentTypeId = default(Guid?), DateTime? fromDateTime = default(DateTime?), DateTime? toDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get paginated list of issued documents of given document type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type id. (optional)</param>
        /// <param name="fromDateTime">From DateTime in UTC timezone. (optional)</param>
        /// <param name="toDateTime">To DateTime in UTC timezone. (optional)</param>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IssuedDocumentPaginatedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<IssuedDocumentPaginatedList>> GetIssuedDocumentsWithHttpInfoAsync(Guid? documentTypeId = default(Guid?), DateTime? fromDateTime = default(DateTime?), DateTime? toDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get paginated list of registered document types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supportedEntityType">Supported entity type. (optional)</param>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DocumentTypePaginatedList</returns>
        System.Threading.Tasks.Task<DocumentTypePaginatedList> GetRegisteredDocumentTypesAsync(SupportedEntityType? supportedEntityType = default(SupportedEntityType?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get paginated list of registered document types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supportedEntityType">Supported entity type. (optional)</param>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DocumentTypePaginatedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentTypePaginatedList>> GetRegisteredDocumentTypesWithHttpInfoAsync(SupportedEntityType? supportedEntityType = default(SupportedEntityType?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Issue a new document to an individual user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentIssueRequest">Document issue request payload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DocumentIssueRequestDetails</returns>
        System.Threading.Tasks.Task<DocumentIssueRequestDetails> IssueDocumentToIndividualAsync(DocumentIssueRequest documentIssueRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Issue a new document to an individual user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentIssueRequest">Document issue request payload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DocumentIssueRequestDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentIssueRequestDetails>> IssueDocumentToIndividualWithHttpInfoAsync(DocumentIssueRequest documentIssueRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Issue a new document to an organization.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentIssueRequest">Document issue request payload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DocumentIssueRequestDetails</returns>
        System.Threading.Tasks.Task<DocumentIssueRequestDetails> IssueDocumentToOrganizationAsync(DocumentIssueRequest documentIssueRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Issue a new document to an organization.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentIssueRequest">Document issue request payload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DocumentIssueRequestDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentIssueRequestDetails>> IssueDocumentToOrganizationWithHttpInfoAsync(DocumentIssueRequest documentIssueRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Upload a document for issuance request of individual.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequestId">Document issue request id.</param>
        /// <param name="formFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UploadDocumentForIndividualAsync(Guid issueRequestId, System.IO.Stream formFile, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Upload a document for issuance request of individual.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequestId">Document issue request id.</param>
        /// <param name="formFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UploadDocumentForIndividualWithHttpInfoAsync(Guid issueRequestId, System.IO.Stream formFile, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Upload a document for issuance request of organization.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequestId">Document issue request id System.Guid.</param>
        /// <param name="formFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UploadDocumentForOrganizationAsync(Guid issueRequestId, System.IO.Stream formFile, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Upload a document for issuance request of organization.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequestId">Document issue request id System.Guid.</param>
        /// <param name="formFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UploadDocumentForOrganizationWithHttpInfoAsync(Guid issueRequestId, System.IO.Stream formFile, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDocumentsApi : IDocumentsApiSync, IDocumentsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DocumentsApi : IDocumentsApi
    {
        private MyDataMyConsent.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DocumentsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DocumentsApi(string basePath)
        {
            this.Configuration = MyDataMyConsent.Client.Configuration.MergeConfigurations(
                MyDataMyConsent.Client.GlobalConfiguration.Instance,
                new MyDataMyConsent.Client.Configuration { BasePath = basePath }
            );
            this.Client = new MyDataMyConsent.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MyDataMyConsent.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = MyDataMyConsent.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DocumentsApi(MyDataMyConsent.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = MyDataMyConsent.Client.Configuration.MergeConfigurations(
                MyDataMyConsent.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new MyDataMyConsent.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MyDataMyConsent.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = MyDataMyConsent.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DocumentsApi(MyDataMyConsent.Client.ISynchronousClient client, MyDataMyConsent.Client.IAsynchronousClient asyncClient, MyDataMyConsent.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = MyDataMyConsent.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public MyDataMyConsent.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public MyDataMyConsent.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public MyDataMyConsent.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MyDataMyConsent.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get issued document. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IssuedDocumentDetails</returns>
        public IssuedDocumentDetails GetIssuedDocumentById(Guid documentId, int operationIndex = 0)
        {
            MyDataMyConsent.Client.ApiResponse<IssuedDocumentDetails> localVarResponse = GetIssuedDocumentByIdWithHttpInfo(documentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get issued document. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IssuedDocumentDetails</returns>
        public MyDataMyConsent.Client.ApiResponse<IssuedDocumentDetails> GetIssuedDocumentByIdWithHttpInfo(Guid documentId, int operationIndex = 0)
        {
            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("documentId", MyDataMyConsent.Client.ClientUtils.ParameterToString(documentId)); // path parameter

            localVarRequestOptions.Operation = "DocumentsApi.GetIssuedDocumentById";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<IssuedDocumentDetails>("/v1/documents/issued/{documentId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIssuedDocumentById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get issued document. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IssuedDocumentDetails</returns>
        public async System.Threading.Tasks.Task<IssuedDocumentDetails> GetIssuedDocumentByIdAsync(Guid documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Client.ApiResponse<IssuedDocumentDetails> localVarResponse = await GetIssuedDocumentByIdWithHttpInfoAsync(documentId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get issued document. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IssuedDocumentDetails)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Client.ApiResponse<IssuedDocumentDetails>> GetIssuedDocumentByIdWithHttpInfoAsync(Guid documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("documentId", MyDataMyConsent.Client.ClientUtils.ParameterToString(documentId)); // path parameter

            localVarRequestOptions.Operation = "DocumentsApi.GetIssuedDocumentById";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<IssuedDocumentDetails>("/v1/documents/issued/{documentId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIssuedDocumentById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get paginated list of issued documents of given document type. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type id. (optional)</param>
        /// <param name="fromDateTime">From DateTime in UTC timezone. (optional)</param>
        /// <param name="toDateTime">To DateTime in UTC timezone. (optional)</param>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IssuedDocumentPaginatedList</returns>
        public IssuedDocumentPaginatedList GetIssuedDocuments(Guid? documentTypeId = default(Guid?), DateTime? fromDateTime = default(DateTime?), DateTime? toDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            MyDataMyConsent.Client.ApiResponse<IssuedDocumentPaginatedList> localVarResponse = GetIssuedDocumentsWithHttpInfo(documentTypeId, fromDateTime, toDateTime, pageNo, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get paginated list of issued documents of given document type. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type id. (optional)</param>
        /// <param name="fromDateTime">From DateTime in UTC timezone. (optional)</param>
        /// <param name="toDateTime">To DateTime in UTC timezone. (optional)</param>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IssuedDocumentPaginatedList</returns>
        public MyDataMyConsent.Client.ApiResponse<IssuedDocumentPaginatedList> GetIssuedDocumentsWithHttpInfo(Guid? documentTypeId = default(Guid?), DateTime? fromDateTime = default(DateTime?), DateTime? toDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (documentTypeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "documentTypeId", documentTypeId));
            }
            if (fromDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "fromDateTime", fromDateTime));
            }
            if (toDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "toDateTime", toDateTime));
            }
            if (pageNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "pageNo", pageNo));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            localVarRequestOptions.Operation = "DocumentsApi.GetIssuedDocuments";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<IssuedDocumentPaginatedList>("/v1/documents/issued", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIssuedDocuments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get paginated list of issued documents of given document type. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type id. (optional)</param>
        /// <param name="fromDateTime">From DateTime in UTC timezone. (optional)</param>
        /// <param name="toDateTime">To DateTime in UTC timezone. (optional)</param>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IssuedDocumentPaginatedList</returns>
        public async System.Threading.Tasks.Task<IssuedDocumentPaginatedList> GetIssuedDocumentsAsync(Guid? documentTypeId = default(Guid?), DateTime? fromDateTime = default(DateTime?), DateTime? toDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Client.ApiResponse<IssuedDocumentPaginatedList> localVarResponse = await GetIssuedDocumentsWithHttpInfoAsync(documentTypeId, fromDateTime, toDateTime, pageNo, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get paginated list of issued documents of given document type. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type id. (optional)</param>
        /// <param name="fromDateTime">From DateTime in UTC timezone. (optional)</param>
        /// <param name="toDateTime">To DateTime in UTC timezone. (optional)</param>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IssuedDocumentPaginatedList)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Client.ApiResponse<IssuedDocumentPaginatedList>> GetIssuedDocumentsWithHttpInfoAsync(Guid? documentTypeId = default(Guid?), DateTime? fromDateTime = default(DateTime?), DateTime? toDateTime = default(DateTime?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (documentTypeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "documentTypeId", documentTypeId));
            }
            if (fromDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "fromDateTime", fromDateTime));
            }
            if (toDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "toDateTime", toDateTime));
            }
            if (pageNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "pageNo", pageNo));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            localVarRequestOptions.Operation = "DocumentsApi.GetIssuedDocuments";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<IssuedDocumentPaginatedList>("/v1/documents/issued", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIssuedDocuments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get paginated list of registered document types. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supportedEntityType">Supported entity type. (optional)</param>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DocumentTypePaginatedList</returns>
        public DocumentTypePaginatedList GetRegisteredDocumentTypes(SupportedEntityType? supportedEntityType = default(SupportedEntityType?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            MyDataMyConsent.Client.ApiResponse<DocumentTypePaginatedList> localVarResponse = GetRegisteredDocumentTypesWithHttpInfo(supportedEntityType, pageNo, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get paginated list of registered document types. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supportedEntityType">Supported entity type. (optional)</param>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DocumentTypePaginatedList</returns>
        public MyDataMyConsent.Client.ApiResponse<DocumentTypePaginatedList> GetRegisteredDocumentTypesWithHttpInfo(SupportedEntityType? supportedEntityType = default(SupportedEntityType?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (supportedEntityType != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "supportedEntityType", supportedEntityType));
            }
            if (pageNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "pageNo", pageNo));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            localVarRequestOptions.Operation = "DocumentsApi.GetRegisteredDocumentTypes";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<DocumentTypePaginatedList>("/v1/documents/types", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRegisteredDocumentTypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get paginated list of registered document types. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supportedEntityType">Supported entity type. (optional)</param>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DocumentTypePaginatedList</returns>
        public async System.Threading.Tasks.Task<DocumentTypePaginatedList> GetRegisteredDocumentTypesAsync(SupportedEntityType? supportedEntityType = default(SupportedEntityType?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Client.ApiResponse<DocumentTypePaginatedList> localVarResponse = await GetRegisteredDocumentTypesWithHttpInfoAsync(supportedEntityType, pageNo, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get paginated list of registered document types. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supportedEntityType">Supported entity type. (optional)</param>
        /// <param name="pageNo">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Number of items to return. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DocumentTypePaginatedList)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Client.ApiResponse<DocumentTypePaginatedList>> GetRegisteredDocumentTypesWithHttpInfoAsync(SupportedEntityType? supportedEntityType = default(SupportedEntityType?), int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (supportedEntityType != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "supportedEntityType", supportedEntityType));
            }
            if (pageNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "pageNo", pageNo));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            localVarRequestOptions.Operation = "DocumentsApi.GetRegisteredDocumentTypes";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DocumentTypePaginatedList>("/v1/documents/types", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRegisteredDocumentTypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Issue a new document to an individual user. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentIssueRequest">Document issue request payload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DocumentIssueRequestDetails</returns>
        public DocumentIssueRequestDetails IssueDocumentToIndividual(DocumentIssueRequest documentIssueRequest, int operationIndex = 0)
        {
            MyDataMyConsent.Client.ApiResponse<DocumentIssueRequestDetails> localVarResponse = IssueDocumentToIndividualWithHttpInfo(documentIssueRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Issue a new document to an individual user. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentIssueRequest">Document issue request payload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DocumentIssueRequestDetails</returns>
        public MyDataMyConsent.Client.ApiResponse<DocumentIssueRequestDetails> IssueDocumentToIndividualWithHttpInfo(DocumentIssueRequest documentIssueRequest, int operationIndex = 0)
        {
            // verify the required parameter 'documentIssueRequest' is set
            if (documentIssueRequest == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'documentIssueRequest' when calling DocumentsApi->IssueDocumentToIndividual");
            }

            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = documentIssueRequest;

            localVarRequestOptions.Operation = "DocumentsApi.IssueDocumentToIndividual";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<DocumentIssueRequestDetails>("/v1/documents/issue/individual", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IssueDocumentToIndividual", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Issue a new document to an individual user. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentIssueRequest">Document issue request payload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DocumentIssueRequestDetails</returns>
        public async System.Threading.Tasks.Task<DocumentIssueRequestDetails> IssueDocumentToIndividualAsync(DocumentIssueRequest documentIssueRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Client.ApiResponse<DocumentIssueRequestDetails> localVarResponse = await IssueDocumentToIndividualWithHttpInfoAsync(documentIssueRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Issue a new document to an individual user. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentIssueRequest">Document issue request payload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DocumentIssueRequestDetails)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Client.ApiResponse<DocumentIssueRequestDetails>> IssueDocumentToIndividualWithHttpInfoAsync(DocumentIssueRequest documentIssueRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'documentIssueRequest' is set
            if (documentIssueRequest == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'documentIssueRequest' when calling DocumentsApi->IssueDocumentToIndividual");
            }


            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = documentIssueRequest;

            localVarRequestOptions.Operation = "DocumentsApi.IssueDocumentToIndividual";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DocumentIssueRequestDetails>("/v1/documents/issue/individual", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IssueDocumentToIndividual", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Issue a new document to an organization. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentIssueRequest">Document issue request payload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DocumentIssueRequestDetails</returns>
        public DocumentIssueRequestDetails IssueDocumentToOrganization(DocumentIssueRequest documentIssueRequest, int operationIndex = 0)
        {
            MyDataMyConsent.Client.ApiResponse<DocumentIssueRequestDetails> localVarResponse = IssueDocumentToOrganizationWithHttpInfo(documentIssueRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Issue a new document to an organization. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentIssueRequest">Document issue request payload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DocumentIssueRequestDetails</returns>
        public MyDataMyConsent.Client.ApiResponse<DocumentIssueRequestDetails> IssueDocumentToOrganizationWithHttpInfo(DocumentIssueRequest documentIssueRequest, int operationIndex = 0)
        {
            // verify the required parameter 'documentIssueRequest' is set
            if (documentIssueRequest == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'documentIssueRequest' when calling DocumentsApi->IssueDocumentToOrganization");
            }

            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = documentIssueRequest;

            localVarRequestOptions.Operation = "DocumentsApi.IssueDocumentToOrganization";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<DocumentIssueRequestDetails>("/v1/documents/issue/organization", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IssueDocumentToOrganization", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Issue a new document to an organization. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentIssueRequest">Document issue request payload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DocumentIssueRequestDetails</returns>
        public async System.Threading.Tasks.Task<DocumentIssueRequestDetails> IssueDocumentToOrganizationAsync(DocumentIssueRequest documentIssueRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Client.ApiResponse<DocumentIssueRequestDetails> localVarResponse = await IssueDocumentToOrganizationWithHttpInfoAsync(documentIssueRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Issue a new document to an organization. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentIssueRequest">Document issue request payload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DocumentIssueRequestDetails)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Client.ApiResponse<DocumentIssueRequestDetails>> IssueDocumentToOrganizationWithHttpInfoAsync(DocumentIssueRequest documentIssueRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'documentIssueRequest' is set
            if (documentIssueRequest == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'documentIssueRequest' when calling DocumentsApi->IssueDocumentToOrganization");
            }


            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = documentIssueRequest;

            localVarRequestOptions.Operation = "DocumentsApi.IssueDocumentToOrganization";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DocumentIssueRequestDetails>("/v1/documents/issue/organization", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IssueDocumentToOrganization", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload a document for issuance request of individual. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequestId">Document issue request id.</param>
        /// <param name="formFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UploadDocumentForIndividual(Guid issueRequestId, System.IO.Stream formFile, int operationIndex = 0)
        {
            UploadDocumentForIndividualWithHttpInfo(issueRequestId, formFile);
        }

        /// <summary>
        /// Upload a document for issuance request of individual. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequestId">Document issue request id.</param>
        /// <param name="formFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public MyDataMyConsent.Client.ApiResponse<Object> UploadDocumentForIndividualWithHttpInfo(Guid issueRequestId, System.IO.Stream formFile, int operationIndex = 0)
        {
            // verify the required parameter 'formFile' is set
            if (formFile == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'formFile' when calling DocumentsApi->UploadDocumentForIndividual");
            }

            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("issueRequestId", MyDataMyConsent.Client.ClientUtils.ParameterToString(issueRequestId)); // path parameter
            localVarRequestOptions.FileParameters.Add("formFile", formFile);

            localVarRequestOptions.Operation = "DocumentsApi.UploadDocumentForIndividual";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/documents/issue/individual/upload/{issueRequestId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadDocumentForIndividual", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload a document for issuance request of individual. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequestId">Document issue request id.</param>
        /// <param name="formFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UploadDocumentForIndividualAsync(Guid issueRequestId, System.IO.Stream formFile, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UploadDocumentForIndividualWithHttpInfoAsync(issueRequestId, formFile, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Upload a document for issuance request of individual. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequestId">Document issue request id.</param>
        /// <param name="formFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Client.ApiResponse<Object>> UploadDocumentForIndividualWithHttpInfoAsync(Guid issueRequestId, System.IO.Stream formFile, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'formFile' is set
            if (formFile == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'formFile' when calling DocumentsApi->UploadDocumentForIndividual");
            }


            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("issueRequestId", MyDataMyConsent.Client.ClientUtils.ParameterToString(issueRequestId)); // path parameter
            localVarRequestOptions.FileParameters.Add("formFile", formFile);

            localVarRequestOptions.Operation = "DocumentsApi.UploadDocumentForIndividual";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/documents/issue/individual/upload/{issueRequestId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadDocumentForIndividual", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload a document for issuance request of organization. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequestId">Document issue request id System.Guid.</param>
        /// <param name="formFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UploadDocumentForOrganization(Guid issueRequestId, System.IO.Stream formFile, int operationIndex = 0)
        {
            UploadDocumentForOrganizationWithHttpInfo(issueRequestId, formFile);
        }

        /// <summary>
        /// Upload a document for issuance request of organization. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequestId">Document issue request id System.Guid.</param>
        /// <param name="formFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public MyDataMyConsent.Client.ApiResponse<Object> UploadDocumentForOrganizationWithHttpInfo(Guid issueRequestId, System.IO.Stream formFile, int operationIndex = 0)
        {
            // verify the required parameter 'formFile' is set
            if (formFile == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'formFile' when calling DocumentsApi->UploadDocumentForOrganization");
            }

            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("issueRequestId", MyDataMyConsent.Client.ClientUtils.ParameterToString(issueRequestId)); // path parameter
            localVarRequestOptions.FileParameters.Add("formFile", formFile);

            localVarRequestOptions.Operation = "DocumentsApi.UploadDocumentForOrganization";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/documents/issue/organization/upload/{issueRequestId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadDocumentForOrganization", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload a document for issuance request of organization. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequestId">Document issue request id System.Guid.</param>
        /// <param name="formFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UploadDocumentForOrganizationAsync(Guid issueRequestId, System.IO.Stream formFile, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UploadDocumentForOrganizationWithHttpInfoAsync(issueRequestId, formFile, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Upload a document for issuance request of organization. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequestId">Document issue request id System.Guid.</param>
        /// <param name="formFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Client.ApiResponse<Object>> UploadDocumentForOrganizationWithHttpInfoAsync(Guid issueRequestId, System.IO.Stream formFile, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'formFile' is set
            if (formFile == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'formFile' when calling DocumentsApi->UploadDocumentForOrganization");
            }


            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("issueRequestId", MyDataMyConsent.Client.ClientUtils.ParameterToString(issueRequestId)); // path parameter
            localVarRequestOptions.FileParameters.Add("formFile", formFile);

            localVarRequestOptions.Operation = "DocumentsApi.UploadDocumentForOrganization";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/documents/issue/organization/upload/{issueRequestId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadDocumentForOrganization", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
