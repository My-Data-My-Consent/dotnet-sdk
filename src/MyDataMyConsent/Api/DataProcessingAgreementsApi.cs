/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using MyDataMyConsent.Client;
using MyDataMyConsent.Client.Auth;
using MyDataMyConsent.Models;

namespace MyDataMyConsent.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataProcessingAgreementsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get paginated data processing agreements.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaginatedListOfDataProcessingAgreements</returns>
        PaginatedListOfDataProcessingAgreements V1DataAgreementsGet(int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get paginated data processing agreements.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaginatedListOfDataProcessingAgreements</returns>
        ApiResponse<PaginatedListOfDataProcessingAgreements> V1DataAgreementsGetWithHttpInfo(int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// Delete a data processing agreement this will not delete a published or a agreement in use with consents.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>bool</returns>
        bool V1DataAgreementsIdDelete(string id, int operationIndex = 0);

        /// <summary>
        /// Delete a data processing agreement this will not delete a published or a agreement in use with consents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of bool</returns>
        ApiResponse<bool> V1DataAgreementsIdDeleteWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Get data processing agreement by id.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DataProcessingAgreement</returns>
        DataProcessingAgreement V1DataAgreementsIdGet(string id, int operationIndex = 0);

        /// <summary>
        /// Get data processing agreement by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DataProcessingAgreement</returns>
        ApiResponse<DataProcessingAgreement> V1DataAgreementsIdGetWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Update data processing agreement.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateDataProcessingAgreement"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DataProcessingAgreement</returns>
        DataProcessingAgreement V1DataAgreementsIdPut(string id, UpdateDataProcessingAgreement updateDataProcessingAgreement, int operationIndex = 0);

        /// <summary>
        /// Update data processing agreement.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateDataProcessingAgreement"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DataProcessingAgreement</returns>
        ApiResponse<DataProcessingAgreement> V1DataAgreementsIdPutWithHttpInfo(string id, UpdateDataProcessingAgreement updateDataProcessingAgreement, int operationIndex = 0);
        /// <summary>
        /// Terminate a data processing agreement by id.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>bool</returns>
        bool V1DataAgreementsIdTerminatePut(string id, int operationIndex = 0);

        /// <summary>
        /// Terminate a data processing agreement by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of bool</returns>
        ApiResponse<bool> V1DataAgreementsIdTerminatePutWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Create a data processing agreement.
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataProcessingAgreement"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DataProcessingAgreement</returns>
        DataProcessingAgreement V1DataAgreementsPost(CreateDataProcessingAgreement createDataProcessingAgreement, int operationIndex = 0);

        /// <summary>
        /// Create a data processing agreement.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataProcessingAgreement"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DataProcessingAgreement</returns>
        ApiResponse<DataProcessingAgreement> V1DataAgreementsPostWithHttpInfo(CreateDataProcessingAgreement createDataProcessingAgreement, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataProcessingAgreementsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get paginated data processing agreements.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaginatedListOfDataProcessingAgreements</returns>
        System.Threading.Tasks.Task<PaginatedListOfDataProcessingAgreements> V1DataAgreementsGetAsync(int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get paginated data processing agreements.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaginatedListOfDataProcessingAgreements)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaginatedListOfDataProcessingAgreements>> V1DataAgreementsGetWithHttpInfoAsync(int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a data processing agreement this will not delete a published or a agreement in use with consents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        System.Threading.Tasks.Task<bool> V1DataAgreementsIdDeleteAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a data processing agreement this will not delete a published or a agreement in use with consents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool>> V1DataAgreementsIdDeleteWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get data processing agreement by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataProcessingAgreement</returns>
        System.Threading.Tasks.Task<DataProcessingAgreement> V1DataAgreementsIdGetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get data processing agreement by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataProcessingAgreement)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataProcessingAgreement>> V1DataAgreementsIdGetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update data processing agreement.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateDataProcessingAgreement"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataProcessingAgreement</returns>
        System.Threading.Tasks.Task<DataProcessingAgreement> V1DataAgreementsIdPutAsync(string id, UpdateDataProcessingAgreement updateDataProcessingAgreement, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update data processing agreement.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateDataProcessingAgreement"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataProcessingAgreement)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataProcessingAgreement>> V1DataAgreementsIdPutWithHttpInfoAsync(string id, UpdateDataProcessingAgreement updateDataProcessingAgreement, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Terminate a data processing agreement by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        System.Threading.Tasks.Task<bool> V1DataAgreementsIdTerminatePutAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Terminate a data processing agreement by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool>> V1DataAgreementsIdTerminatePutWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a data processing agreement.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataProcessingAgreement"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataProcessingAgreement</returns>
        System.Threading.Tasks.Task<DataProcessingAgreement> V1DataAgreementsPostAsync(CreateDataProcessingAgreement createDataProcessingAgreement, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a data processing agreement.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataProcessingAgreement"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataProcessingAgreement)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataProcessingAgreement>> V1DataAgreementsPostWithHttpInfoAsync(CreateDataProcessingAgreement createDataProcessingAgreement, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataProcessingAgreementsApi : IDataProcessingAgreementsApiSync, IDataProcessingAgreementsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DataProcessingAgreementsApi : IDataProcessingAgreementsApi
    {
        private MyDataMyConsent.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DataProcessingAgreementsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataProcessingAgreementsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataProcessingAgreementsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataProcessingAgreementsApi(string basePath)
        {
            this.Configuration = MyDataMyConsent.Client.Configuration.MergeConfigurations(
                MyDataMyConsent.Client.GlobalConfiguration.Instance,
                new MyDataMyConsent.Client.Configuration { BasePath = basePath }
            );
            this.Client = new MyDataMyConsent.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MyDataMyConsent.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = MyDataMyConsent.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataProcessingAgreementsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DataProcessingAgreementsApi(MyDataMyConsent.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = MyDataMyConsent.Client.Configuration.MergeConfigurations(
                MyDataMyConsent.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new MyDataMyConsent.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MyDataMyConsent.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = MyDataMyConsent.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataProcessingAgreementsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DataProcessingAgreementsApi(MyDataMyConsent.Client.ISynchronousClient client, MyDataMyConsent.Client.IAsynchronousClient asyncClient, MyDataMyConsent.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = MyDataMyConsent.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public MyDataMyConsent.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public MyDataMyConsent.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public MyDataMyConsent.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MyDataMyConsent.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get paginated data processing agreements. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaginatedListOfDataProcessingAgreements</returns>
        public PaginatedListOfDataProcessingAgreements V1DataAgreementsGet(int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            MyDataMyConsent.Client.ApiResponse<PaginatedListOfDataProcessingAgreements> localVarResponse = V1DataAgreementsGetWithHttpInfo(pageNo, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get paginated data processing agreements. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaginatedListOfDataProcessingAgreements</returns>
        public MyDataMyConsent.Client.ApiResponse<PaginatedListOfDataProcessingAgreements> V1DataAgreementsGetWithHttpInfo(int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "page_no", pageNo));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "DataProcessingAgreementsApi.V1DataAgreementsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PaginatedListOfDataProcessingAgreements>("/v1/data-agreements", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DataAgreementsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get paginated data processing agreements. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaginatedListOfDataProcessingAgreements</returns>
        public async System.Threading.Tasks.Task<PaginatedListOfDataProcessingAgreements> V1DataAgreementsGetAsync(int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Client.ApiResponse<PaginatedListOfDataProcessingAgreements> localVarResponse = await V1DataAgreementsGetWithHttpInfoAsync(pageNo, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get paginated data processing agreements. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNo"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaginatedListOfDataProcessingAgreements)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Client.ApiResponse<PaginatedListOfDataProcessingAgreements>> V1DataAgreementsGetWithHttpInfoAsync(int? pageNo = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "page_no", pageNo));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(MyDataMyConsent.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "DataProcessingAgreementsApi.V1DataAgreementsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PaginatedListOfDataProcessingAgreements>("/v1/data-agreements", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DataAgreementsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a data processing agreement this will not delete a published or a agreement in use with consents. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>bool</returns>
        public bool V1DataAgreementsIdDelete(string id, int operationIndex = 0)
        {
            MyDataMyConsent.Client.ApiResponse<bool> localVarResponse = V1DataAgreementsIdDeleteWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a data processing agreement this will not delete a published or a agreement in use with consents. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of bool</returns>
        public MyDataMyConsent.Client.ApiResponse<bool> V1DataAgreementsIdDeleteWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'id' when calling DataProcessingAgreementsApi->V1DataAgreementsIdDelete");
            }

            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MyDataMyConsent.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "DataProcessingAgreementsApi.V1DataAgreementsIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<bool>("/v1/data-agreements/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DataAgreementsIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a data processing agreement this will not delete a published or a agreement in use with consents. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        public async System.Threading.Tasks.Task<bool> V1DataAgreementsIdDeleteAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Client.ApiResponse<bool> localVarResponse = await V1DataAgreementsIdDeleteWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a data processing agreement this will not delete a published or a agreement in use with consents. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Client.ApiResponse<bool>> V1DataAgreementsIdDeleteWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'id' when calling DataProcessingAgreementsApi->V1DataAgreementsIdDelete");
            }


            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MyDataMyConsent.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "DataProcessingAgreementsApi.V1DataAgreementsIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<bool>("/v1/data-agreements/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DataAgreementsIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get data processing agreement by id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DataProcessingAgreement</returns>
        public DataProcessingAgreement V1DataAgreementsIdGet(string id, int operationIndex = 0)
        {
            MyDataMyConsent.Client.ApiResponse<DataProcessingAgreement> localVarResponse = V1DataAgreementsIdGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get data processing agreement by id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DataProcessingAgreement</returns>
        public MyDataMyConsent.Client.ApiResponse<DataProcessingAgreement> V1DataAgreementsIdGetWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'id' when calling DataProcessingAgreementsApi->V1DataAgreementsIdGet");
            }

            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MyDataMyConsent.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "DataProcessingAgreementsApi.V1DataAgreementsIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DataProcessingAgreement>("/v1/data-agreements/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DataAgreementsIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get data processing agreement by id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataProcessingAgreement</returns>
        public async System.Threading.Tasks.Task<DataProcessingAgreement> V1DataAgreementsIdGetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Client.ApiResponse<DataProcessingAgreement> localVarResponse = await V1DataAgreementsIdGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get data processing agreement by id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataProcessingAgreement)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Client.ApiResponse<DataProcessingAgreement>> V1DataAgreementsIdGetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'id' when calling DataProcessingAgreementsApi->V1DataAgreementsIdGet");
            }


            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MyDataMyConsent.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "DataProcessingAgreementsApi.V1DataAgreementsIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DataProcessingAgreement>("/v1/data-agreements/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DataAgreementsIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update data processing agreement. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateDataProcessingAgreement"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DataProcessingAgreement</returns>
        public DataProcessingAgreement V1DataAgreementsIdPut(string id, UpdateDataProcessingAgreement updateDataProcessingAgreement, int operationIndex = 0)
        {
            MyDataMyConsent.Client.ApiResponse<DataProcessingAgreement> localVarResponse = V1DataAgreementsIdPutWithHttpInfo(id, updateDataProcessingAgreement);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update data processing agreement. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateDataProcessingAgreement"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DataProcessingAgreement</returns>
        public MyDataMyConsent.Client.ApiResponse<DataProcessingAgreement> V1DataAgreementsIdPutWithHttpInfo(string id, UpdateDataProcessingAgreement updateDataProcessingAgreement, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'id' when calling DataProcessingAgreementsApi->V1DataAgreementsIdPut");
            }

            // verify the required parameter 'updateDataProcessingAgreement' is set
            if (updateDataProcessingAgreement == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'updateDataProcessingAgreement' when calling DataProcessingAgreementsApi->V1DataAgreementsIdPut");
            }

            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MyDataMyConsent.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = updateDataProcessingAgreement;

            localVarRequestOptions.Operation = "DataProcessingAgreementsApi.V1DataAgreementsIdPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<DataProcessingAgreement>("/v1/data-agreements/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DataAgreementsIdPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update data processing agreement. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateDataProcessingAgreement"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataProcessingAgreement</returns>
        public async System.Threading.Tasks.Task<DataProcessingAgreement> V1DataAgreementsIdPutAsync(string id, UpdateDataProcessingAgreement updateDataProcessingAgreement, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Client.ApiResponse<DataProcessingAgreement> localVarResponse = await V1DataAgreementsIdPutWithHttpInfoAsync(id, updateDataProcessingAgreement, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update data processing agreement. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateDataProcessingAgreement"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataProcessingAgreement)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Client.ApiResponse<DataProcessingAgreement>> V1DataAgreementsIdPutWithHttpInfoAsync(string id, UpdateDataProcessingAgreement updateDataProcessingAgreement, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'id' when calling DataProcessingAgreementsApi->V1DataAgreementsIdPut");
            }

            // verify the required parameter 'updateDataProcessingAgreement' is set
            if (updateDataProcessingAgreement == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'updateDataProcessingAgreement' when calling DataProcessingAgreementsApi->V1DataAgreementsIdPut");
            }


            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MyDataMyConsent.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = updateDataProcessingAgreement;

            localVarRequestOptions.Operation = "DataProcessingAgreementsApi.V1DataAgreementsIdPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<DataProcessingAgreement>("/v1/data-agreements/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DataAgreementsIdPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Terminate a data processing agreement by id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>bool</returns>
        public bool V1DataAgreementsIdTerminatePut(string id, int operationIndex = 0)
        {
            MyDataMyConsent.Client.ApiResponse<bool> localVarResponse = V1DataAgreementsIdTerminatePutWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Terminate a data processing agreement by id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of bool</returns>
        public MyDataMyConsent.Client.ApiResponse<bool> V1DataAgreementsIdTerminatePutWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'id' when calling DataProcessingAgreementsApi->V1DataAgreementsIdTerminatePut");
            }

            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MyDataMyConsent.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "DataProcessingAgreementsApi.V1DataAgreementsIdTerminatePut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<bool>("/v1/data-agreements/{id}/terminate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DataAgreementsIdTerminatePut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Terminate a data processing agreement by id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        public async System.Threading.Tasks.Task<bool> V1DataAgreementsIdTerminatePutAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Client.ApiResponse<bool> localVarResponse = await V1DataAgreementsIdTerminatePutWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Terminate a data processing agreement by id. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Client.ApiResponse<bool>> V1DataAgreementsIdTerminatePutWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'id' when calling DataProcessingAgreementsApi->V1DataAgreementsIdTerminatePut");
            }


            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MyDataMyConsent.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "DataProcessingAgreementsApi.V1DataAgreementsIdTerminatePut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<bool>("/v1/data-agreements/{id}/terminate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DataAgreementsIdTerminatePut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a data processing agreement. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataProcessingAgreement"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DataProcessingAgreement</returns>
        public DataProcessingAgreement V1DataAgreementsPost(CreateDataProcessingAgreement createDataProcessingAgreement, int operationIndex = 0)
        {
            MyDataMyConsent.Client.ApiResponse<DataProcessingAgreement> localVarResponse = V1DataAgreementsPostWithHttpInfo(createDataProcessingAgreement);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a data processing agreement. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataProcessingAgreement"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DataProcessingAgreement</returns>
        public MyDataMyConsent.Client.ApiResponse<DataProcessingAgreement> V1DataAgreementsPostWithHttpInfo(CreateDataProcessingAgreement createDataProcessingAgreement, int operationIndex = 0)
        {
            // verify the required parameter 'createDataProcessingAgreement' is set
            if (createDataProcessingAgreement == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'createDataProcessingAgreement' when calling DataProcessingAgreementsApi->V1DataAgreementsPost");
            }

            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createDataProcessingAgreement;

            localVarRequestOptions.Operation = "DataProcessingAgreementsApi.V1DataAgreementsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DataProcessingAgreement>("/v1/data-agreements", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DataAgreementsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a data processing agreement. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataProcessingAgreement"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataProcessingAgreement</returns>
        public async System.Threading.Tasks.Task<DataProcessingAgreement> V1DataAgreementsPostAsync(CreateDataProcessingAgreement createDataProcessingAgreement, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MyDataMyConsent.Client.ApiResponse<DataProcessingAgreement> localVarResponse = await V1DataAgreementsPostWithHttpInfoAsync(createDataProcessingAgreement, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a data processing agreement. 
        /// </summary>
        /// <exception cref="MyDataMyConsent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataProcessingAgreement"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataProcessingAgreement)</returns>
        public async System.Threading.Tasks.Task<MyDataMyConsent.Client.ApiResponse<DataProcessingAgreement>> V1DataAgreementsPostWithHttpInfoAsync(CreateDataProcessingAgreement createDataProcessingAgreement, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createDataProcessingAgreement' is set
            if (createDataProcessingAgreement == null)
            {
                throw new MyDataMyConsent.Client.ApiException(400, "Missing required parameter 'createDataProcessingAgreement' when calling DataProcessingAgreementsApi->V1DataAgreementsPost");
            }


            MyDataMyConsent.Client.RequestOptions localVarRequestOptions = new MyDataMyConsent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MyDataMyConsent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MyDataMyConsent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createDataProcessingAgreement;

            localVarRequestOptions.Operation = "DataProcessingAgreementsApi.V1DataAgreementsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DataProcessingAgreement>("/v1/data-agreements", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DataAgreementsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
