/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = MyDataMyConsent.Client.OpenAPIDateConverter;

namespace MyDataMyConsent.Models
{
    /// <summary>
    /// ConsentedMedicalRecord : Consented medical record details.
    /// </summary>
    [DataContract(Name = "ConsentedMedicalRecord")]
    public partial class ConsentedMedicalRecord : IEquatable<ConsentedMedicalRecord>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConsentedMedicalRecord" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ConsentedMedicalRecord() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConsentedMedicalRecord" /> class.
        /// </summary>
        /// <param name="id">Health id..</param>
        /// <param name="fieldTitle">Health field title. (required).</param>
        /// <param name="fieldSlug">Health field slug. (required).</param>
        /// <param name="issuerId">Issuer id. (required).</param>
        /// <param name="issuerName">Issuer name. (required).</param>
        /// <param name="category">health category type. (required).</param>
        /// <param name="toDate">To Date.</param>
        /// <param name="fromDate">From Date.</param>
        public ConsentedMedicalRecord(string id = default(string), string fieldTitle = default(string), string fieldSlug = default(string), string issuerId = default(string), string issuerName = default(string), string category = default(string), DateTime toDate = default(DateTime), DateTime fromDate = default(DateTime))
        {
            // to ensure "fieldTitle" is required (not null)
            if (fieldTitle == null)
            {
                throw new ArgumentNullException("fieldTitle is a required property for ConsentedMedicalRecord and cannot be null");
            }
            this.FieldTitle = fieldTitle;
            // to ensure "fieldSlug" is required (not null)
            if (fieldSlug == null)
            {
                throw new ArgumentNullException("fieldSlug is a required property for ConsentedMedicalRecord and cannot be null");
            }
            this.FieldSlug = fieldSlug;
            // to ensure "issuerId" is required (not null)
            if (issuerId == null)
            {
                throw new ArgumentNullException("issuerId is a required property for ConsentedMedicalRecord and cannot be null");
            }
            this.IssuerId = issuerId;
            // to ensure "issuerName" is required (not null)
            if (issuerName == null)
            {
                throw new ArgumentNullException("issuerName is a required property for ConsentedMedicalRecord and cannot be null");
            }
            this.IssuerName = issuerName;
            // to ensure "category" is required (not null)
            if (category == null)
            {
                throw new ArgumentNullException("category is a required property for ConsentedMedicalRecord and cannot be null");
            }
            this.Category = category;
            this.Id = id;
            this.ToDate = toDate;
            this.FromDate = fromDate;
        }

        /// <summary>
        /// Health id.
        /// </summary>
        /// <value>Health id.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Health field title.
        /// </summary>
        /// <value>Health field title.</value>
        [DataMember(Name = "fieldTitle", IsRequired = true, EmitDefaultValue = true)]
        public string FieldTitle { get; set; }

        /// <summary>
        /// Health field slug.
        /// </summary>
        /// <value>Health field slug.</value>
        [DataMember(Name = "fieldSlug", IsRequired = true, EmitDefaultValue = true)]
        public string FieldSlug { get; set; }

        /// <summary>
        /// Issuer id.
        /// </summary>
        /// <value>Issuer id.</value>
        [DataMember(Name = "issuerId", IsRequired = true, EmitDefaultValue = true)]
        public string IssuerId { get; set; }

        /// <summary>
        /// Issuer name.
        /// </summary>
        /// <value>Issuer name.</value>
        [DataMember(Name = "issuerName", IsRequired = true, EmitDefaultValue = true)]
        public string IssuerName { get; set; }

        /// <summary>
        /// health category type.
        /// </summary>
        /// <value>health category type.</value>
        [DataMember(Name = "category", IsRequired = true, EmitDefaultValue = true)]
        public string Category { get; set; }

        /// <summary>
        /// To Date
        /// </summary>
        /// <value>To Date</value>
        [DataMember(Name = "toDate", EmitDefaultValue = false)]
        public DateTime ToDate { get; set; }

        /// <summary>
        /// From Date
        /// </summary>
        /// <value>From Date</value>
        [DataMember(Name = "fromDate", EmitDefaultValue = false)]
        public DateTime FromDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConsentedMedicalRecord {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FieldTitle: ").Append(FieldTitle).Append("\n");
            sb.Append("  FieldSlug: ").Append(FieldSlug).Append("\n");
            sb.Append("  IssuerId: ").Append(IssuerId).Append("\n");
            sb.Append("  IssuerName: ").Append(IssuerName).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  ToDate: ").Append(ToDate).Append("\n");
            sb.Append("  FromDate: ").Append(FromDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConsentedMedicalRecord);
        }

        /// <summary>
        /// Returns true if ConsentedMedicalRecord instances are equal
        /// </summary>
        /// <param name="input">Instance of ConsentedMedicalRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConsentedMedicalRecord input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.FieldTitle == input.FieldTitle ||
                    (this.FieldTitle != null &&
                    this.FieldTitle.Equals(input.FieldTitle))
                ) && 
                (
                    this.FieldSlug == input.FieldSlug ||
                    (this.FieldSlug != null &&
                    this.FieldSlug.Equals(input.FieldSlug))
                ) && 
                (
                    this.IssuerId == input.IssuerId ||
                    (this.IssuerId != null &&
                    this.IssuerId.Equals(input.IssuerId))
                ) && 
                (
                    this.IssuerName == input.IssuerName ||
                    (this.IssuerName != null &&
                    this.IssuerName.Equals(input.IssuerName))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.ToDate == input.ToDate ||
                    (this.ToDate != null &&
                    this.ToDate.Equals(input.ToDate))
                ) && 
                (
                    this.FromDate == input.FromDate ||
                    (this.FromDate != null &&
                    this.FromDate.Equals(input.FromDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.FieldTitle != null)
                {
                    hashCode = (hashCode * 59) + this.FieldTitle.GetHashCode();
                }
                if (this.FieldSlug != null)
                {
                    hashCode = (hashCode * 59) + this.FieldSlug.GetHashCode();
                }
                if (this.IssuerId != null)
                {
                    hashCode = (hashCode * 59) + this.IssuerId.GetHashCode();
                }
                if (this.IssuerName != null)
                {
                    hashCode = (hashCode * 59) + this.IssuerName.GetHashCode();
                }
                if (this.Category != null)
                {
                    hashCode = (hashCode * 59) + this.Category.GetHashCode();
                }
                if (this.ToDate != null)
                {
                    hashCode = (hashCode * 59) + this.ToDate.GetHashCode();
                }
                if (this.FromDate != null)
                {
                    hashCode = (hashCode * 59) + this.FromDate.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
