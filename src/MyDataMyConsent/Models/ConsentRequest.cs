/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = MyDataMyConsent.Client.OpenAPIDateConverter;

namespace MyDataMyConsent.Models
{
    /// <summary>
    /// ConsentRequest :Consent request details.
    /// </summary>
    [DataContract(Name = "ConsentRequest")]
    public partial class ConsentRequest : IEquatable<ConsentRequest>
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public DataConsentStatus Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConsentRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ConsentRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConsentRequest" /> class.
        /// </summary>
        /// <param name="id">Consent request id. (required).</param>
        /// <param name="templateId">Consent request template id..</param>
        /// <param name="consentId">Consent id..</param>
        /// <param name="title">Consent title. (required).</param>
        /// <param name="description">Consent description. (required).</param>
        /// <param name="purpose">Consent purpose..</param>
        /// <param name="dataLife">dataLife.</param>
        /// <param name="collectables">List of supported collectables. (required).</param>
        /// <param name="receiver">receiver (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="createdAtUtc">Request creation datetime in UTC timezone. (required).</param>
        /// <param name="expiresAtUtc">Request expiration datetime in UTC timezone. (required).</param>
        /// <param name="approvedAtUtc">Request approval datetime in UTC timezone..</param>
        /// <param name="dataAccessExpiresAtUtc">Data access expiration datetime in UTC timezone..</param>
        /// <param name="rejectedAtUtc">Request rejection datetime in UTC timezone..</param>
        /// <param name="revokedAtUtc">Request revocation datetime in UTC timezone..</param>
        public ConsentRequest(string id = default(string), string templateId = default(string), string consentId = default(string), string title = default(string), string description = default(string), string purpose = default(string), Life dataLife = default(Life), List<CollectibleTypes> collectables = default(List<CollectibleTypes>), ConsentRequestReceiver receiver = default(ConsentRequestReceiver), DataConsentStatus status = default(DataConsentStatus), DateTime createdAtUtc = default(DateTime), DateTime expiresAtUtc = default(DateTime), DateTime approvedAtUtc = default(DateTime), DateTime dataAccessExpiresAtUtc = default(DateTime), DateTime rejectedAtUtc = default(DateTime), DateTime revokedAtUtc = default(DateTime))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for ConsentRequest and cannot be null");
            }
            this.Id = id;
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new ArgumentNullException("title is a required property for ConsentRequest and cannot be null");
            }
            this.Title = title;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for ConsentRequest and cannot be null");
            }
            this.Description = description;
            // to ensure "collectables" is required (not null)
            if (collectables == null)
            {
                throw new ArgumentNullException("collectables is a required property for ConsentRequest and cannot be null");
            }
            this.Collectables = collectables;
            // to ensure "receiver" is required (not null)
            if (receiver == null)
            {
                throw new ArgumentNullException("receiver is a required property for ConsentRequest and cannot be null");
            }
            this.Receiver = receiver;
            this.Status = status;
            this.CreatedAtUtc = createdAtUtc;
            this.ExpiresAtUtc = expiresAtUtc;
            this.TemplateId = templateId;
            this.ConsentId = consentId;
            this.Purpose = purpose;
            this.DataLife = dataLife;
            this.ApprovedAtUtc = approvedAtUtc;
            this.DataAccessExpiresAtUtc = dataAccessExpiresAtUtc;
            this.RejectedAtUtc = rejectedAtUtc;
            this.RevokedAtUtc = revokedAtUtc;
        }

        /// <summary>
        /// Consent request id.
        /// </summary>
        /// <value>Consent request id.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Consent request template id.
        /// </summary>
        /// <value>Consent request template id.</value>
        [DataMember(Name = "templateId", EmitDefaultValue = false)]
        public string TemplateId { get; set; }

        /// <summary>
        /// Consent id.
        /// </summary>
        /// <value>Consent id.</value>
        [DataMember(Name = "consentId", EmitDefaultValue = false)]
        public string ConsentId { get; set; }

        /// <summary>
        /// Consent title.
        /// </summary>
        /// <value>Consent title.</value>
        [DataMember(Name = "title", IsRequired = true, EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// Consent description.
        /// </summary>
        /// <value>Consent description.</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Consent purpose.
        /// </summary>
        /// <value>Consent purpose.</value>
        [DataMember(Name = "purpose", EmitDefaultValue = false)]
        public string Purpose { get; set; }

        /// <summary>
        /// Gets or Sets DataLife
        /// </summary>
        [DataMember(Name = "dataLife", EmitDefaultValue = false)]
        public Life DataLife { get; set; }

        /// <summary>
        /// List of supported collectables.
        /// </summary>
        /// <value>List of supported collectables.</value>
        [DataMember(Name = "collectables", IsRequired = true, EmitDefaultValue = true)]
        public List<CollectibleTypes> Collectables { get; set; }

        /// <summary>
        /// Gets or Sets Receiver
        /// </summary>
        [DataMember(Name = "receiver", IsRequired = true, EmitDefaultValue = true)]
        public ConsentRequestReceiver Receiver { get; set; }

        /// <summary>
        /// Request creation datetime in UTC timezone.
        /// </summary>
        /// <value>Request creation datetime in UTC timezone.</value>
        [DataMember(Name = "createdAtUtc", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAtUtc { get; set; }

        /// <summary>
        /// Request expiration datetime in UTC timezone.
        /// </summary>
        /// <value>Request expiration datetime in UTC timezone.</value>
        [DataMember(Name = "expiresAtUtc", IsRequired = true, EmitDefaultValue = true)]
        public DateTime ExpiresAtUtc { get; set; }

        /// <summary>
        /// Request approval datetime in UTC timezone.
        /// </summary>
        /// <value>Request approval datetime in UTC timezone.</value>
        [DataMember(Name = "approvedAtUtc", EmitDefaultValue = false)]
        public DateTime ApprovedAtUtc { get; set; }

        /// <summary>
        /// Data access expiration datetime in UTC timezone.
        /// </summary>
        /// <value>Data access expiration datetime in UTC timezone.</value>
        [DataMember(Name = "dataAccessExpiresAtUtc", EmitDefaultValue = false)]
        public DateTime DataAccessExpiresAtUtc { get; set; }

        /// <summary>
        /// Request rejection datetime in UTC timezone.
        /// </summary>
        /// <value>Request rejection datetime in UTC timezone.</value>
        [DataMember(Name = "rejectedAtUtc", EmitDefaultValue = false)]
        public DateTime RejectedAtUtc { get; set; }

        /// <summary>
        /// Request revocation datetime in UTC timezone.
        /// </summary>
        /// <value>Request revocation datetime in UTC timezone.</value>
        [DataMember(Name = "revokedAtUtc", EmitDefaultValue = false)]
        public DateTime RevokedAtUtc { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConsentRequest {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("  ConsentId: ").Append(ConsentId).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Purpose: ").Append(Purpose).Append("\n");
            sb.Append("  DataLife: ").Append(DataLife).Append("\n");
            sb.Append("  Collectables: ").Append(Collectables).Append("\n");
            sb.Append("  Receiver: ").Append(Receiver).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CreatedAtUtc: ").Append(CreatedAtUtc).Append("\n");
            sb.Append("  ExpiresAtUtc: ").Append(ExpiresAtUtc).Append("\n");
            sb.Append("  ApprovedAtUtc: ").Append(ApprovedAtUtc).Append("\n");
            sb.Append("  DataAccessExpiresAtUtc: ").Append(DataAccessExpiresAtUtc).Append("\n");
            sb.Append("  RejectedAtUtc: ").Append(RejectedAtUtc).Append("\n");
            sb.Append("  RevokedAtUtc: ").Append(RevokedAtUtc).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConsentRequest);
        }

        /// <summary>
        /// Returns true if ConsentRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ConsentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConsentRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.TemplateId == input.TemplateId ||
                    (this.TemplateId != null &&
                    this.TemplateId.Equals(input.TemplateId))
                ) && 
                (
                    this.ConsentId == input.ConsentId ||
                    (this.ConsentId != null &&
                    this.ConsentId.Equals(input.ConsentId))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Purpose == input.Purpose ||
                    (this.Purpose != null &&
                    this.Purpose.Equals(input.Purpose))
                ) && 
                (
                    this.DataLife == input.DataLife ||
                    (this.DataLife != null &&
                    this.DataLife.Equals(input.DataLife))
                ) && 
                (
                    this.Collectables == input.Collectables ||
                    this.Collectables != null &&
                    input.Collectables != null &&
                    this.Collectables.SequenceEqual(input.Collectables)
                ) && 
                (
                    this.Receiver == input.Receiver ||
                    (this.Receiver != null &&
                    this.Receiver.Equals(input.Receiver))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.CreatedAtUtc == input.CreatedAtUtc ||
                    (this.CreatedAtUtc != null &&
                    this.CreatedAtUtc.Equals(input.CreatedAtUtc))
                ) && 
                (
                    this.ExpiresAtUtc == input.ExpiresAtUtc ||
                    (this.ExpiresAtUtc != null &&
                    this.ExpiresAtUtc.Equals(input.ExpiresAtUtc))
                ) && 
                (
                    this.ApprovedAtUtc == input.ApprovedAtUtc ||
                    (this.ApprovedAtUtc != null &&
                    this.ApprovedAtUtc.Equals(input.ApprovedAtUtc))
                ) && 
                (
                    this.DataAccessExpiresAtUtc == input.DataAccessExpiresAtUtc ||
                    (this.DataAccessExpiresAtUtc != null &&
                    this.DataAccessExpiresAtUtc.Equals(input.DataAccessExpiresAtUtc))
                ) && 
                (
                    this.RejectedAtUtc == input.RejectedAtUtc ||
                    (this.RejectedAtUtc != null &&
                    this.RejectedAtUtc.Equals(input.RejectedAtUtc))
                ) && 
                (
                    this.RevokedAtUtc == input.RevokedAtUtc ||
                    (this.RevokedAtUtc != null &&
                    this.RevokedAtUtc.Equals(input.RevokedAtUtc))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.TemplateId != null)
                {
                    hashCode = (hashCode * 59) + this.TemplateId.GetHashCode();
                }
                if (this.ConsentId != null)
                {
                    hashCode = (hashCode * 59) + this.ConsentId.GetHashCode();
                }
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Purpose != null)
                {
                    hashCode = (hashCode * 59) + this.Purpose.GetHashCode();
                }
                if (this.DataLife != null)
                {
                    hashCode = (hashCode * 59) + this.DataLife.GetHashCode();
                }
                if (this.Collectables != null)
                {
                    hashCode = (hashCode * 59) + this.Collectables.GetHashCode();
                }
                if (this.Receiver != null)
                {
                    hashCode = (hashCode * 59) + this.Receiver.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.CreatedAtUtc != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAtUtc.GetHashCode();
                }
                if (this.ExpiresAtUtc != null)
                {
                    hashCode = (hashCode * 59) + this.ExpiresAtUtc.GetHashCode();
                }
                if (this.ApprovedAtUtc != null)
                {
                    hashCode = (hashCode * 59) + this.ApprovedAtUtc.GetHashCode();
                }
                if (this.DataAccessExpiresAtUtc != null)
                {
                    hashCode = (hashCode * 59) + this.DataAccessExpiresAtUtc.GetHashCode();
                }
                if (this.RejectedAtUtc != null)
                {
                    hashCode = (hashCode * 59) + this.RejectedAtUtc.GetHashCode();
                }
                if (this.RevokedAtUtc != null)
                {
                    hashCode = (hashCode * 59) + this.RevokedAtUtc.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
