/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = MyDataMyConsent.Client.OpenAPIDateConverter;

namespace MyDataMyConsent.Models
{
    /// <summary>
    /// CreditCardSummary
    /// </summary>
    [DataContract(Name = "CreditCardSummary")]
    public partial class CreditCardSummary : IEquatable<CreditCardSummary>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreditCardSummary" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreditCardSummary() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreditCardSummary" /> class.
        /// </summary>
        /// <param name="creditCardId">creditCardId (required).</param>
        /// <param name="currentDue">currentDue (required).</param>
        /// <param name="lastStatementDate">lastStatementDate (required).</param>
        /// <param name="dueDate">dueDate (required).</param>
        /// <param name="previousDueAmount">previousDueAmount (required).</param>
        /// <param name="totalDueAmount">totalDueAmount (required).</param>
        /// <param name="minDueAmount">minDueAmount (required).</param>
        /// <param name="creditLimit">creditLimit (required).</param>
        /// <param name="cashLimit">cashLimit (required).</param>
        /// <param name="availableCredit">availableCredit (required).</param>
        /// <param name="loyaltyPoints">loyaltyPoints (required).</param>
        /// <param name="financeCharges">financeCharges (required).</param>
        public CreditCardSummary(Guid creditCardId = default(Guid), double currentDue = default(double), DateTime lastStatementDate = default(DateTime), DateTime dueDate = default(DateTime), double previousDueAmount = default(double), double totalDueAmount = default(double), double minDueAmount = default(double), double creditLimit = default(double), double cashLimit = default(double), double availableCredit = default(double), string loyaltyPoints = default(string), double financeCharges = default(double))
        {
            this.CreditCardId = creditCardId;
            this.CurrentDue = currentDue;
            this.LastStatementDate = lastStatementDate;
            this.DueDate = dueDate;
            this.PreviousDueAmount = previousDueAmount;
            this.TotalDueAmount = totalDueAmount;
            this.MinDueAmount = minDueAmount;
            this.CreditLimit = creditLimit;
            this.CashLimit = cashLimit;
            this.AvailableCredit = availableCredit;
            // to ensure "loyaltyPoints" is required (not null)
            if (loyaltyPoints == null)
            {
                throw new ArgumentNullException("loyaltyPoints is a required property for CreditCardSummary and cannot be null");
            }
            this.LoyaltyPoints = loyaltyPoints;
            this.FinanceCharges = financeCharges;
        }

        /// <summary>
        /// Gets or Sets CreditCardId
        /// </summary>
        [DataMember(Name = "creditCardId", IsRequired = true, EmitDefaultValue = true)]
        public Guid CreditCardId { get; set; }

        /// <summary>
        /// Gets or Sets CurrentDue
        /// </summary>
        [DataMember(Name = "currentDue", IsRequired = true, EmitDefaultValue = true)]
        public double CurrentDue { get; set; }

        /// <summary>
        /// Gets or Sets LastStatementDate
        /// </summary>
        [DataMember(Name = "lastStatementDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTime LastStatementDate { get; set; }

        /// <summary>
        /// Gets or Sets DueDate
        /// </summary>
        [DataMember(Name = "dueDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTime DueDate { get; set; }

        /// <summary>
        /// Gets or Sets PreviousDueAmount
        /// </summary>
        [DataMember(Name = "previousDueAmount", IsRequired = true, EmitDefaultValue = true)]
        public double PreviousDueAmount { get; set; }

        /// <summary>
        /// Gets or Sets TotalDueAmount
        /// </summary>
        [DataMember(Name = "totalDueAmount", IsRequired = true, EmitDefaultValue = true)]
        public double TotalDueAmount { get; set; }

        /// <summary>
        /// Gets or Sets MinDueAmount
        /// </summary>
        [DataMember(Name = "minDueAmount", IsRequired = true, EmitDefaultValue = true)]
        public double MinDueAmount { get; set; }

        /// <summary>
        /// Gets or Sets CreditLimit
        /// </summary>
        [DataMember(Name = "creditLimit", IsRequired = true, EmitDefaultValue = true)]
        public double CreditLimit { get; set; }

        /// <summary>
        /// Gets or Sets CashLimit
        /// </summary>
        [DataMember(Name = "cashLimit", IsRequired = true, EmitDefaultValue = true)]
        public double CashLimit { get; set; }

        /// <summary>
        /// Gets or Sets AvailableCredit
        /// </summary>
        [DataMember(Name = "availableCredit", IsRequired = true, EmitDefaultValue = true)]
        public double AvailableCredit { get; set; }

        /// <summary>
        /// Gets or Sets LoyaltyPoints
        /// </summary>
        [DataMember(Name = "loyaltyPoints", IsRequired = true, EmitDefaultValue = true)]
        public string LoyaltyPoints { get; set; }

        /// <summary>
        /// Gets or Sets FinanceCharges
        /// </summary>
        [DataMember(Name = "financeCharges", IsRequired = true, EmitDefaultValue = true)]
        public double FinanceCharges { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreditCardSummary {\n");
            sb.Append("  CreditCardId: ").Append(CreditCardId).Append("\n");
            sb.Append("  CurrentDue: ").Append(CurrentDue).Append("\n");
            sb.Append("  LastStatementDate: ").Append(LastStatementDate).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  PreviousDueAmount: ").Append(PreviousDueAmount).Append("\n");
            sb.Append("  TotalDueAmount: ").Append(TotalDueAmount).Append("\n");
            sb.Append("  MinDueAmount: ").Append(MinDueAmount).Append("\n");
            sb.Append("  CreditLimit: ").Append(CreditLimit).Append("\n");
            sb.Append("  CashLimit: ").Append(CashLimit).Append("\n");
            sb.Append("  AvailableCredit: ").Append(AvailableCredit).Append("\n");
            sb.Append("  LoyaltyPoints: ").Append(LoyaltyPoints).Append("\n");
            sb.Append("  FinanceCharges: ").Append(FinanceCharges).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreditCardSummary);
        }

        /// <summary>
        /// Returns true if CreditCardSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of CreditCardSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreditCardSummary input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CreditCardId == input.CreditCardId ||
                    (this.CreditCardId != null &&
                    this.CreditCardId.Equals(input.CreditCardId))
                ) && 
                (
                    this.CurrentDue == input.CurrentDue ||
                    this.CurrentDue.Equals(input.CurrentDue)
                ) && 
                (
                    this.LastStatementDate == input.LastStatementDate ||
                    (this.LastStatementDate != null &&
                    this.LastStatementDate.Equals(input.LastStatementDate))
                ) && 
                (
                    this.DueDate == input.DueDate ||
                    (this.DueDate != null &&
                    this.DueDate.Equals(input.DueDate))
                ) && 
                (
                    this.PreviousDueAmount == input.PreviousDueAmount ||
                    this.PreviousDueAmount.Equals(input.PreviousDueAmount)
                ) && 
                (
                    this.TotalDueAmount == input.TotalDueAmount ||
                    this.TotalDueAmount.Equals(input.TotalDueAmount)
                ) && 
                (
                    this.MinDueAmount == input.MinDueAmount ||
                    this.MinDueAmount.Equals(input.MinDueAmount)
                ) && 
                (
                    this.CreditLimit == input.CreditLimit ||
                    this.CreditLimit.Equals(input.CreditLimit)
                ) && 
                (
                    this.CashLimit == input.CashLimit ||
                    this.CashLimit.Equals(input.CashLimit)
                ) && 
                (
                    this.AvailableCredit == input.AvailableCredit ||
                    this.AvailableCredit.Equals(input.AvailableCredit)
                ) && 
                (
                    this.LoyaltyPoints == input.LoyaltyPoints ||
                    (this.LoyaltyPoints != null &&
                    this.LoyaltyPoints.Equals(input.LoyaltyPoints))
                ) && 
                (
                    this.FinanceCharges == input.FinanceCharges ||
                    this.FinanceCharges.Equals(input.FinanceCharges)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreditCardId != null)
                {
                    hashCode = (hashCode * 59) + this.CreditCardId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CurrentDue.GetHashCode();
                if (this.LastStatementDate != null)
                {
                    hashCode = (hashCode * 59) + this.LastStatementDate.GetHashCode();
                }
                if (this.DueDate != null)
                {
                    hashCode = (hashCode * 59) + this.DueDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PreviousDueAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalDueAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.MinDueAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.CreditLimit.GetHashCode();
                hashCode = (hashCode * 59) + this.CashLimit.GetHashCode();
                hashCode = (hashCode * 59) + this.AvailableCredit.GetHashCode();
                if (this.LoyaltyPoints != null)
                {
                    hashCode = (hashCode * 59) + this.LoyaltyPoints.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FinanceCharges.GetHashCode();
                return hashCode;
            }
        }

    }

}
