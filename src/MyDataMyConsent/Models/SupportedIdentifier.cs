/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = MyDataMyConsent.Client.OpenAPIDateConverter;

namespace MyDataMyConsent.Models
{
    /// <summary>
    /// Supported identifier details for a particular country.
    /// </summary>
    [DataContract(Name = "SupportedIdentifier")]
    public partial class SupportedIdentifier : IEquatable<SupportedIdentifier>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SupportedIdentifier" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SupportedIdentifier() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SupportedIdentifier" /> class.
        /// </summary>
        /// <param name="iso2">Country ISO 2 code. Example: IN, US, etc. (required).</param>
        /// <param name="name">Country name. Example: India, United States of America, etc. (required).</param>
        /// <param name="individualIdentifiers">List of supported identifiers for an individual. (required).</param>
        /// <param name="organizationIdentifiers">List of supported identifiers for an organization. (required).</param>
        public SupportedIdentifier(string iso2 = default(string), string name = default(string), List<Identifier> individualIdentifiers = default(List<Identifier>), List<Identifier> organizationIdentifiers = default(List<Identifier>))
        {
            // to ensure "iso2" is required (not null)
            if (iso2 == null)
            {
                throw new ArgumentNullException("iso2 is a required property for SupportedIdentifier and cannot be null");
            }
            this.Iso2 = iso2;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for SupportedIdentifier and cannot be null");
            }
            this.Name = name;
            // to ensure "individualIdentifiers" is required (not null)
            if (individualIdentifiers == null)
            {
                throw new ArgumentNullException("individualIdentifiers is a required property for SupportedIdentifier and cannot be null");
            }
            this.IndividualIdentifiers = individualIdentifiers;
            // to ensure "organizationIdentifiers" is required (not null)
            if (organizationIdentifiers == null)
            {
                throw new ArgumentNullException("organizationIdentifiers is a required property for SupportedIdentifier and cannot be null");
            }
            this.OrganizationIdentifiers = organizationIdentifiers;
        }

        /// <summary>
        /// Country ISO 2 code. Example: IN, US, etc.
        /// </summary>
        /// <value>Country ISO 2 code. Example: IN, US, etc.</value>
        [DataMember(Name = "iso2", IsRequired = true, EmitDefaultValue = true)]
        public string Iso2 { get; set; }

        /// <summary>
        /// Country name. Example: India, United States of America, etc.
        /// </summary>
        /// <value>Country name. Example: India, United States of America, etc.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// List of supported identifiers for an individual.
        /// </summary>
        /// <value>List of supported identifiers for an individual.</value>
        [DataMember(Name = "individualIdentifiers", IsRequired = true, EmitDefaultValue = true)]
        public List<Identifier> IndividualIdentifiers { get; set; }

        /// <summary>
        /// List of supported identifiers for an organization.
        /// </summary>
        /// <value>List of supported identifiers for an organization.</value>
        [DataMember(Name = "organizationIdentifiers", IsRequired = true, EmitDefaultValue = true)]
        public List<Identifier> OrganizationIdentifiers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SupportedIdentifier {\n");
            sb.Append("  Iso2: ").Append(Iso2).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IndividualIdentifiers: ").Append(IndividualIdentifiers).Append("\n");
            sb.Append("  OrganizationIdentifiers: ").Append(OrganizationIdentifiers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SupportedIdentifier);
        }

        /// <summary>
        /// Returns true if SupportedIdentifier instances are equal
        /// </summary>
        /// <param name="input">Instance of SupportedIdentifier to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SupportedIdentifier input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Iso2 == input.Iso2 ||
                    (this.Iso2 != null &&
                    this.Iso2.Equals(input.Iso2))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.IndividualIdentifiers == input.IndividualIdentifiers ||
                    this.IndividualIdentifiers != null &&
                    input.IndividualIdentifiers != null &&
                    this.IndividualIdentifiers.SequenceEqual(input.IndividualIdentifiers)
                ) && 
                (
                    this.OrganizationIdentifiers == input.OrganizationIdentifiers ||
                    this.OrganizationIdentifiers != null &&
                    input.OrganizationIdentifiers != null &&
                    this.OrganizationIdentifiers.SequenceEqual(input.OrganizationIdentifiers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Iso2 != null)
                {
                    hashCode = (hashCode * 59) + this.Iso2.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.IndividualIdentifiers != null)
                {
                    hashCode = (hashCode * 59) + this.IndividualIdentifiers.GetHashCode();
                }
                if (this.OrganizationIdentifiers != null)
                {
                    hashCode = (hashCode * 59) + this.OrganizationIdentifiers.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
