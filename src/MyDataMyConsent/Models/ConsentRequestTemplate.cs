/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = MyDataMyConsent.Client.OpenAPIDateConverter;

namespace MyDataMyConsent.Models
{
    /// <summary>
    /// ConsentRequestTemplate : Consent request template.
    /// </summary>
    [DataContract(Name = "ConsentRequestTemplate")]
    public partial class ConsentRequestTemplate : IEquatable<ConsentRequestTemplate>
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public ConsentRequestTemplateStatus Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConsentRequestTemplate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ConsentRequestTemplate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConsentRequestTemplate" /> class.
        /// </summary>
        /// <param name="id">Consent request template id. (required).</param>
        /// <param name="title">Consent request template title. (required).</param>
        /// <param name="description">Consent request template description. (required).</param>
        /// <param name="purpose">Consent request template purpose..</param>
        /// <param name="shortId">Consent request template short Id. (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="createdBy">Consent request template created by user. (required).</param>
        /// <param name="createdAtUtc">Consent request template created datetime in UTC timezone. (required).</param>
        /// <param name="approvedAtUtc">Consent request template approval datetime in UTC timezone..</param>
        /// <param name="rejectedAtUtc">Consent request template rejection datetime in UTC timezone..</param>
        /// <param name="rejectionReason">Consent request template rejection reason..</param>
        public ConsentRequestTemplate(string id = default(string), string title = default(string), string description = default(string), string purpose = default(string), string shortId = default(string), ConsentRequestTemplateStatus status = default(ConsentRequestTemplateStatus), string createdBy = default(string), DateTime createdAtUtc = default(DateTime), DateTime approvedAtUtc = default(DateTime), DateTime rejectedAtUtc = default(DateTime), string rejectionReason = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for ConsentRequestTemplate and cannot be null");
            }
            this.Id = id;
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new ArgumentNullException("title is a required property for ConsentRequestTemplate and cannot be null");
            }
            this.Title = title;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for ConsentRequestTemplate and cannot be null");
            }
            this.Description = description;
            // to ensure "shortId" is required (not null)
            if (shortId == null)
            {
                throw new ArgumentNullException("shortId is a required property for ConsentRequestTemplate and cannot be null");
            }
            this.ShortId = shortId;
            this.Status = status;
            // to ensure "createdBy" is required (not null)
            if (createdBy == null)
            {
                throw new ArgumentNullException("createdBy is a required property for ConsentRequestTemplate and cannot be null");
            }
            this.CreatedBy = createdBy;
            this.CreatedAtUtc = createdAtUtc;
            this.Purpose = purpose;
            this.ApprovedAtUtc = approvedAtUtc;
            this.RejectedAtUtc = rejectedAtUtc;
            this.RejectionReason = rejectionReason;
        }

        /// <summary>
        /// Consent request template id.
        /// </summary>
        /// <value>Consent request template id.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Consent request template title.
        /// </summary>
        /// <value>Consent request template title.</value>
        [DataMember(Name = "title", IsRequired = true, EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// Consent request template description.
        /// </summary>
        /// <value>Consent request template description.</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Consent request template purpose.
        /// </summary>
        /// <value>Consent request template purpose.</value>
        [DataMember(Name = "purpose", EmitDefaultValue = false)]
        public string Purpose { get; set; }

        /// <summary>
        /// Consent request template short Id.
        /// </summary>
        /// <value>Consent request template short Id.</value>
        [DataMember(Name = "shortId", IsRequired = true, EmitDefaultValue = true)]
        public string ShortId { get; set; }

        /// <summary>
        /// Consent request template created by user.
        /// </summary>
        /// <value>Consent request template created by user.</value>
        [DataMember(Name = "createdBy", IsRequired = true, EmitDefaultValue = true)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Consent request template created datetime in UTC timezone.
        /// </summary>
        /// <value>Consent request template created datetime in UTC timezone.</value>
        [DataMember(Name = "createdAtUtc", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAtUtc { get; set; }

        /// <summary>
        /// Consent request template approval datetime in UTC timezone.
        /// </summary>
        /// <value>Consent request template approval datetime in UTC timezone.</value>
        [DataMember(Name = "approvedAtUtc", EmitDefaultValue = false)]
        public DateTime ApprovedAtUtc { get; set; }

        /// <summary>
        /// Consent request template rejection datetime in UTC timezone.
        /// </summary>
        /// <value>Consent request template rejection datetime in UTC timezone.</value>
        [DataMember(Name = "rejectedAtUtc", EmitDefaultValue = false)]
        public DateTime RejectedAtUtc { get; set; }

        /// <summary>
        /// Consent request template rejection reason.
        /// </summary>
        /// <value>Consent request template rejection reason.</value>
        [DataMember(Name = "rejectionReason", EmitDefaultValue = false)]
        public string RejectionReason { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConsentRequestTemplate {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Purpose: ").Append(Purpose).Append("\n");
            sb.Append("  ShortId: ").Append(ShortId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedAtUtc: ").Append(CreatedAtUtc).Append("\n");
            sb.Append("  ApprovedAtUtc: ").Append(ApprovedAtUtc).Append("\n");
            sb.Append("  RejectedAtUtc: ").Append(RejectedAtUtc).Append("\n");
            sb.Append("  RejectionReason: ").Append(RejectionReason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConsentRequestTemplate);
        }

        /// <summary>
        /// Returns true if ConsentRequestTemplate instances are equal
        /// </summary>
        /// <param name="input">Instance of ConsentRequestTemplate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConsentRequestTemplate input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Purpose == input.Purpose ||
                    (this.Purpose != null &&
                    this.Purpose.Equals(input.Purpose))
                ) && 
                (
                    this.ShortId == input.ShortId ||
                    (this.ShortId != null &&
                    this.ShortId.Equals(input.ShortId))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.CreatedAtUtc == input.CreatedAtUtc ||
                    (this.CreatedAtUtc != null &&
                    this.CreatedAtUtc.Equals(input.CreatedAtUtc))
                ) && 
                (
                    this.ApprovedAtUtc == input.ApprovedAtUtc ||
                    (this.ApprovedAtUtc != null &&
                    this.ApprovedAtUtc.Equals(input.ApprovedAtUtc))
                ) && 
                (
                    this.RejectedAtUtc == input.RejectedAtUtc ||
                    (this.RejectedAtUtc != null &&
                    this.RejectedAtUtc.Equals(input.RejectedAtUtc))
                ) && 
                (
                    this.RejectionReason == input.RejectionReason ||
                    (this.RejectionReason != null &&
                    this.RejectionReason.Equals(input.RejectionReason))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Purpose != null)
                {
                    hashCode = (hashCode * 59) + this.Purpose.GetHashCode();
                }
                if (this.ShortId != null)
                {
                    hashCode = (hashCode * 59) + this.ShortId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.CreatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                }
                if (this.CreatedAtUtc != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAtUtc.GetHashCode();
                }
                if (this.ApprovedAtUtc != null)
                {
                    hashCode = (hashCode * 59) + this.ApprovedAtUtc.GetHashCode();
                }
                if (this.RejectedAtUtc != null)
                {
                    hashCode = (hashCode * 59) + this.RejectedAtUtc.GetHashCode();
                }
                if (this.RejectionReason != null)
                {
                    hashCode = (hashCode * 59) + this.RejectionReason.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
