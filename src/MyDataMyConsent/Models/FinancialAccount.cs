/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using OpenAPIDateConverter = MyDataMyConsent.Client.OpenAPIDateConverter;
using System.Reflection;

namespace MyDataMyConsent.Models
{
    /// <summary>
    /// FinancialAccount
    /// </summary>
    [JsonConverter(typeof(FinancialAccountJsonConverter))]
    [DataContract(Name = "FinancialAccount")]
    public partial class FinancialAccount : AbstractOpenAPISchema, IEquatable<FinancialAccount>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FinancialAccount" /> class
        /// with the <see cref="FinancialAccountEquity" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of FinancialAccountEquity.</param>
        public FinancialAccount(FinancialAccountEquity actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FinancialAccount" /> class
        /// with the <see cref="FinancialAccountMutualFund" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of FinancialAccountMutualFund.</param>
        public FinancialAccount(FinancialAccountMutualFund actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FinancialAccount" /> class
        /// with the <see cref="FinancialAccountSip" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of FinancialAccountSip.</param>
        public FinancialAccount(FinancialAccountSip actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(FinancialAccountEquity))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(FinancialAccountMutualFund))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(FinancialAccountSip))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: FinancialAccountEquity, FinancialAccountMutualFund, FinancialAccountSip");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `FinancialAccountEquity`. If the actual instance is not `FinancialAccountEquity`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of FinancialAccountEquity</returns>
        public FinancialAccountEquity GetFinancialAccountEquity()
        {
            return (FinancialAccountEquity)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `FinancialAccountMutualFund`. If the actual instance is not `FinancialAccountMutualFund`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of FinancialAccountMutualFund</returns>
        public FinancialAccountMutualFund GetFinancialAccountMutualFund()
        {
            return (FinancialAccountMutualFund)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `FinancialAccountSip`. If the actual instance is not `FinancialAccountSip`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of FinancialAccountSip</returns>
        public FinancialAccountSip GetFinancialAccountSip()
        {
            return (FinancialAccountSip)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FinancialAccount {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, FinancialAccount.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of FinancialAccount
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of FinancialAccount</returns>
        public static FinancialAccount FromJson(string jsonString)
        {
            FinancialAccount newFinancialAccount = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newFinancialAccount;
            }

            try
            {
                newFinancialAccount = new FinancialAccount(JsonConvert.DeserializeObject<FinancialAccountEquity>(jsonString, FinancialAccount.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newFinancialAccount;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into FinancialAccountEquity: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newFinancialAccount = new FinancialAccount(JsonConvert.DeserializeObject<FinancialAccountMutualFund>(jsonString, FinancialAccount.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newFinancialAccount;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into FinancialAccountMutualFund: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newFinancialAccount = new FinancialAccount(JsonConvert.DeserializeObject<FinancialAccountSip>(jsonString, FinancialAccount.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newFinancialAccount;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into FinancialAccountSip: {1}", jsonString, exception.ToString()));
            }

            // no match found, throw an exception
            throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FinancialAccount);
        }

        /// <summary>
        /// Returns true if FinancialAccount instances are equal
        /// </summary>
        /// <param name="input">Instance of FinancialAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FinancialAccount input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

    }

    /// <summary>
    /// Custom JSON converter for FinancialAccount
    /// </summary>
    public class FinancialAccountJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(FinancialAccount).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return FinancialAccount.FromJson(JObject.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
