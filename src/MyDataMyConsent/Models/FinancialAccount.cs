/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = MyDataMyConsent.Client.OpenAPIDateConverter;

namespace MyDataMyConsent.Models
{
    /// <summary>
    /// FinancialAccount
    /// </summary>
    [DataContract(Name = "FinancialAccount")]
    public partial class FinancialAccount : IEquatable<FinancialAccount>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FinancialAccount" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="issuer">issuer.</param>
        /// <param name="logoUrl">logoUrl.</param>
        /// <param name="categoryId">categoryId.</param>
        /// <param name="categoryName">categoryName.</param>
        /// <param name="accountName">accountName.</param>
        /// <param name="accountLogoUrl">accountLogoUrl.</param>
        /// <param name="balance">balance.</param>
        /// <param name="balanceType">balanceType.</param>
        /// <param name="isShared">isShared.</param>
        /// <param name="sharedWith">sharedWith.</param>
        /// <param name="isReceived">isReceived.</param>
        /// <param name="expiresAtUtc">expiresAtUtc.</param>
        /// <param name="activities">activities.</param>
        /// <param name="approvedConsentRequests">approvedConsentRequests.</param>
        public FinancialAccount(Guid id = default(Guid), string issuer = default(string), string logoUrl = default(string), string categoryId = default(string), string categoryName = default(string), string accountName = default(string), string accountLogoUrl = default(string), string balance = default(string), string balanceType = default(string), bool isShared = default(bool), List<SharedWith> sharedWith = default(List<SharedWith>), bool isReceived = default(bool), DateTime expiresAtUtc = default(DateTime), List<Activity> activities = default(List<Activity>), List<ApprovedConsentRequest> approvedConsentRequests = default(List<ApprovedConsentRequest>))
        {
            this.Id = id;
            this.Issuer = issuer;
            this.LogoUrl = logoUrl;
            this.CategoryId = categoryId;
            this.CategoryName = categoryName;
            this.AccountName = accountName;
            this.AccountLogoUrl = accountLogoUrl;
            this.Balance = balance;
            this.BalanceType = balanceType;
            this.IsShared = isShared;
            this.SharedWith = sharedWith;
            this.IsReceived = isReceived;
            this.ExpiresAtUtc = expiresAtUtc;
            this.Activities = activities;
            this.ApprovedConsentRequests = approvedConsentRequests;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Issuer
        /// </summary>
        [DataMember(Name = "issuer", EmitDefaultValue = true)]
        public string Issuer { get; set; }

        /// <summary>
        /// Gets or Sets LogoUrl
        /// </summary>
        [DataMember(Name = "logoUrl", EmitDefaultValue = true)]
        public string LogoUrl { get; set; }

        /// <summary>
        /// Gets or Sets CategoryId
        /// </summary>
        [DataMember(Name = "categoryId", EmitDefaultValue = true)]
        public string CategoryId { get; set; }

        /// <summary>
        /// Gets or Sets CategoryName
        /// </summary>
        [DataMember(Name = "categoryName", EmitDefaultValue = true)]
        public string CategoryName { get; set; }

        /// <summary>
        /// Gets or Sets AccountName
        /// </summary>
        [DataMember(Name = "accountName", EmitDefaultValue = true)]
        public string AccountName { get; set; }

        /// <summary>
        /// Gets or Sets AccountLogoUrl
        /// </summary>
        [DataMember(Name = "accountLogoUrl", EmitDefaultValue = true)]
        public string AccountLogoUrl { get; set; }

        /// <summary>
        /// Gets or Sets Balance
        /// </summary>
        [DataMember(Name = "balance", EmitDefaultValue = true)]
        public string Balance { get; set; }

        /// <summary>
        /// Gets or Sets BalanceType
        /// </summary>
        [DataMember(Name = "balanceType", EmitDefaultValue = true)]
        public string BalanceType { get; set; }

        /// <summary>
        /// Gets or Sets IsShared
        /// </summary>
        [DataMember(Name = "isShared", EmitDefaultValue = true)]
        public bool IsShared { get; set; }

        /// <summary>
        /// Gets or Sets SharedWith
        /// </summary>
        [DataMember(Name = "sharedWith", EmitDefaultValue = true)]
        public List<SharedWith> SharedWith { get; set; }

        /// <summary>
        /// Gets or Sets IsReceived
        /// </summary>
        [DataMember(Name = "isReceived", EmitDefaultValue = true)]
        public bool IsReceived { get; set; }

        /// <summary>
        /// Gets or Sets ExpiresAtUtc
        /// </summary>
        [DataMember(Name = "expiresAtUtc", EmitDefaultValue = false)]
        public DateTime ExpiresAtUtc { get; set; }

        /// <summary>
        /// Gets or Sets Activities
        /// </summary>
        [DataMember(Name = "activities", EmitDefaultValue = true)]
        public List<Activity> Activities { get; set; }

        /// <summary>
        /// Gets or Sets ApprovedConsentRequests
        /// </summary>
        [DataMember(Name = "approvedConsentRequests", EmitDefaultValue = true)]
        public List<ApprovedConsentRequest> ApprovedConsentRequests { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FinancialAccount {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Issuer: ").Append(Issuer).Append("\n");
            sb.Append("  LogoUrl: ").Append(LogoUrl).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  CategoryName: ").Append(CategoryName).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  AccountLogoUrl: ").Append(AccountLogoUrl).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  BalanceType: ").Append(BalanceType).Append("\n");
            sb.Append("  IsShared: ").Append(IsShared).Append("\n");
            sb.Append("  SharedWith: ").Append(SharedWith).Append("\n");
            sb.Append("  IsReceived: ").Append(IsReceived).Append("\n");
            sb.Append("  ExpiresAtUtc: ").Append(ExpiresAtUtc).Append("\n");
            sb.Append("  Activities: ").Append(Activities).Append("\n");
            sb.Append("  ApprovedConsentRequests: ").Append(ApprovedConsentRequests).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FinancialAccount);
        }

        /// <summary>
        /// Returns true if FinancialAccount instances are equal
        /// </summary>
        /// <param name="input">Instance of FinancialAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FinancialAccount input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Issuer == input.Issuer ||
                    (this.Issuer != null &&
                    this.Issuer.Equals(input.Issuer))
                ) && 
                (
                    this.LogoUrl == input.LogoUrl ||
                    (this.LogoUrl != null &&
                    this.LogoUrl.Equals(input.LogoUrl))
                ) && 
                (
                    this.CategoryId == input.CategoryId ||
                    (this.CategoryId != null &&
                    this.CategoryId.Equals(input.CategoryId))
                ) && 
                (
                    this.CategoryName == input.CategoryName ||
                    (this.CategoryName != null &&
                    this.CategoryName.Equals(input.CategoryName))
                ) && 
                (
                    this.AccountName == input.AccountName ||
                    (this.AccountName != null &&
                    this.AccountName.Equals(input.AccountName))
                ) && 
                (
                    this.AccountLogoUrl == input.AccountLogoUrl ||
                    (this.AccountLogoUrl != null &&
                    this.AccountLogoUrl.Equals(input.AccountLogoUrl))
                ) && 
                (
                    this.Balance == input.Balance ||
                    (this.Balance != null &&
                    this.Balance.Equals(input.Balance))
                ) && 
                (
                    this.BalanceType == input.BalanceType ||
                    (this.BalanceType != null &&
                    this.BalanceType.Equals(input.BalanceType))
                ) && 
                (
                    this.IsShared == input.IsShared ||
                    this.IsShared.Equals(input.IsShared)
                ) && 
                (
                    this.SharedWith == input.SharedWith ||
                    this.SharedWith != null &&
                    input.SharedWith != null &&
                    this.SharedWith.SequenceEqual(input.SharedWith)
                ) && 
                (
                    this.IsReceived == input.IsReceived ||
                    this.IsReceived.Equals(input.IsReceived)
                ) && 
                (
                    this.ExpiresAtUtc == input.ExpiresAtUtc ||
                    (this.ExpiresAtUtc != null &&
                    this.ExpiresAtUtc.Equals(input.ExpiresAtUtc))
                ) && 
                (
                    this.Activities == input.Activities ||
                    this.Activities != null &&
                    input.Activities != null &&
                    this.Activities.SequenceEqual(input.Activities)
                ) && 
                (
                    this.ApprovedConsentRequests == input.ApprovedConsentRequests ||
                    this.ApprovedConsentRequests != null &&
                    input.ApprovedConsentRequests != null &&
                    this.ApprovedConsentRequests.SequenceEqual(input.ApprovedConsentRequests)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Issuer != null)
                {
                    hashCode = (hashCode * 59) + this.Issuer.GetHashCode();
                }
                if (this.LogoUrl != null)
                {
                    hashCode = (hashCode * 59) + this.LogoUrl.GetHashCode();
                }
                if (this.CategoryId != null)
                {
                    hashCode = (hashCode * 59) + this.CategoryId.GetHashCode();
                }
                if (this.CategoryName != null)
                {
                    hashCode = (hashCode * 59) + this.CategoryName.GetHashCode();
                }
                if (this.AccountName != null)
                {
                    hashCode = (hashCode * 59) + this.AccountName.GetHashCode();
                }
                if (this.AccountLogoUrl != null)
                {
                    hashCode = (hashCode * 59) + this.AccountLogoUrl.GetHashCode();
                }
                if (this.Balance != null)
                {
                    hashCode = (hashCode * 59) + this.Balance.GetHashCode();
                }
                if (this.BalanceType != null)
                {
                    hashCode = (hashCode * 59) + this.BalanceType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsShared.GetHashCode();
                if (this.SharedWith != null)
                {
                    hashCode = (hashCode * 59) + this.SharedWith.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsReceived.GetHashCode();
                if (this.ExpiresAtUtc != null)
                {
                    hashCode = (hashCode * 59) + this.ExpiresAtUtc.GetHashCode();
                }
                if (this.Activities != null)
                {
                    hashCode = (hashCode * 59) + this.Activities.GetHashCode();
                }
                if (this.ApprovedConsentRequests != null)
                {
                    hashCode = (hashCode * 59) + this.ApprovedConsentRequests.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
