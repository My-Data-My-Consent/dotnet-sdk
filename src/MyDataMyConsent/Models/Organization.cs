/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = MyDataMyConsent.Client.OpenAPIDateConverter;

namespace MyDataMyConsent.Models
{
    /// <summary>
    /// Organization
    /// </summary>
    [DataContract(Name = "Organization")]
    public partial class Organization : IEquatable<Organization>
    {

        /// <summary>
        /// Gets or Sets AuthorizedPersonnelKycDocumentType
        /// </summary>
        [DataMember(Name = "authorizedPersonnelKycDocumentType", EmitDefaultValue = false)]
        public AuthorizedPersonnelKycDocumentType? AuthorizedPersonnelKycDocumentType { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public OrganizationStatus? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Organization" /> class.
        /// </summary>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="createdAtUtc">createdAtUtc.</param>
        /// <param name="updatedBy">updatedBy.</param>
        /// <param name="updatedAtUtc">updatedAtUtc.</param>
        /// <param name="createdByUser">createdByUser.</param>
        /// <param name="updatedByUser">updatedByUser.</param>
        /// <param name="deletedBy">deletedBy.</param>
        /// <param name="deletedAtUtc">deletedAtUtc.</param>
        /// <param name="deletedByUser">deletedByUser.</param>
        /// <param name="id">id.</param>
        /// <param name="dataPartnerId">dataPartnerId.</param>
        /// <param name="typeId">typeId.</param>
        /// <param name="categoryId">categoryId.</param>
        /// <param name="documentProviderCategoryId">documentProviderCategoryId.</param>
        /// <param name="name">name.</param>
        /// <param name="regulatorName">regulatorName.</param>
        /// <param name="brandName">brandName.</param>
        /// <param name="authorizedPersonnelTaxId">authorizedPersonnelTaxId.</param>
        /// <param name="authorizedPersonnelName">authorizedPersonnelName.</param>
        /// <param name="authorizedPersonnelKycDocumentType">authorizedPersonnelKycDocumentType.</param>
        /// <param name="registrationId">registrationId.</param>
        /// <param name="vatId">vatId.</param>
        /// <param name="taxId">taxId.</param>
        /// <param name="description">description.</param>
        /// <param name="logoUrl">logoUrl.</param>
        /// <param name="contactEmail">contactEmail.</param>
        /// <param name="phoneNumber">phoneNumber.</param>
        /// <param name="countryId">countryId.</param>
        /// <param name="stateId">stateId.</param>
        /// <param name="status">status.</param>
        /// <param name="companyCode">companyCode.</param>
        /// <param name="privacyPolicyUrl">privacyPolicyUrl.</param>
        /// <param name="termsOfServiceUrl">termsOfServiceUrl.</param>
        /// <param name="websiteUrl">websiteUrl.</param>
        /// <param name="helpLineNumber">helpLineNumber.</param>
        /// <param name="supportEmail">supportEmail.</param>
        /// <param name="isGovernmentOrganization">isGovernmentOrganization.</param>
        /// <param name="dlApiKey">dlApiKey.</param>
        /// <param name="isKyoCompleted">isKyoCompleted.</param>
        /// <param name="isEnabled">isEnabled.</param>
        /// <param name="isDataProvider">isDataProvider.</param>
        /// <param name="isDataConsumer">isDataConsumer.</param>
        /// <param name="submittedAtUtc">submittedAtUtc.</param>
        /// <param name="approvedBy">approvedBy.</param>
        /// <param name="approvedAtUtc">approvedAtUtc.</param>
        /// <param name="isDigiLockerOrganization">isDigiLockerOrganization.</param>
        /// <param name="isMdmcMaintained">isMdmcMaintained.</param>
        /// <param name="isBbps">isBbps.</param>
        /// <param name="metaData">metaData.</param>
        /// <param name="countryCode">countryCode.</param>
        /// <param name="organizationType">organizationType.</param>
        /// <param name="organizationCategory">organizationCategory.</param>
        /// <param name="documentProviderCategory">documentProviderCategory.</param>
        /// <param name="addresses">addresses.</param>
        /// <param name="financialAccounts">financialAccounts.</param>
        /// <param name="countryState">countryState.</param>
        /// <param name="approvedByUser">approvedByUser.</param>
        /// <param name="kyoDocuments">kyoDocuments.</param>
        /// <param name="isDelete">isDelete.</param>
        /// <param name="recoveryToken">recoveryToken.</param>
        public Organization(Guid createdBy = default(Guid), DateTime createdAtUtc = default(DateTime), Guid? updatedBy = default(Guid?), DateTime? updatedAtUtc = default(DateTime?), ApplicationUser createdByUser = default(ApplicationUser), ApplicationUser updatedByUser = default(ApplicationUser), Guid? deletedBy = default(Guid?), DateTime? deletedAtUtc = default(DateTime?), ApplicationUser deletedByUser = default(ApplicationUser), Guid id = default(Guid), string dataPartnerId = default(string), Guid typeId = default(Guid), Guid categoryId = default(Guid), Guid? documentProviderCategoryId = default(Guid?), string name = default(string), string regulatorName = default(string), string brandName = default(string), string authorizedPersonnelTaxId = default(string), string authorizedPersonnelName = default(string), AuthorizedPersonnelKycDocumentType? authorizedPersonnelKycDocumentType = default(AuthorizedPersonnelKycDocumentType?), string registrationId = default(string), string vatId = default(string), string taxId = default(string), string description = default(string), string logoUrl = default(string), string contactEmail = default(string), string phoneNumber = default(string), Guid countryId = default(Guid), Guid stateId = default(Guid), OrganizationStatus? status = default(OrganizationStatus?), string companyCode = default(string), string privacyPolicyUrl = default(string), string termsOfServiceUrl = default(string), string websiteUrl = default(string), string helpLineNumber = default(string), string supportEmail = default(string), bool isGovernmentOrganization = default(bool), string dlApiKey = default(string), bool isKyoCompleted = default(bool), bool isEnabled = default(bool), bool isDataProvider = default(bool), bool isDataConsumer = default(bool), DateTime? submittedAtUtc = default(DateTime?), Guid? approvedBy = default(Guid?), DateTime? approvedAtUtc = default(DateTime?), bool isDigiLockerOrganization = default(bool), bool isMdmcMaintained = default(bool), bool isBbps = default(bool), OrganizationMetaData metaData = default(OrganizationMetaData), string countryCode = default(string), OrganizationType organizationType = default(OrganizationType), OrganizationCategory organizationCategory = default(OrganizationCategory), DocumentProviderCategory documentProviderCategory = default(DocumentProviderCategory), List<OrganizationAddress> addresses = default(List<OrganizationAddress>), List<OrganizationFinancialAccount> financialAccounts = default(List<OrganizationFinancialAccount>), Country countryState = default(Country), ApplicationUser approvedByUser = default(ApplicationUser), List<OrganizationKyoDocument> kyoDocuments = default(List<OrganizationKyoDocument>), bool isDelete = default(bool), Guid? recoveryToken = default(Guid?))
        {
            this.CreatedBy = createdBy;
            this.CreatedAtUtc = createdAtUtc;
            this.UpdatedBy = updatedBy;
            this.UpdatedAtUtc = updatedAtUtc;
            this.CreatedByUser = createdByUser;
            this.UpdatedByUser = updatedByUser;
            this.DeletedBy = deletedBy;
            this.DeletedAtUtc = deletedAtUtc;
            this.DeletedByUser = deletedByUser;
            this.Id = id;
            this.DataPartnerId = dataPartnerId;
            this.TypeId = typeId;
            this.CategoryId = categoryId;
            this.DocumentProviderCategoryId = documentProviderCategoryId;
            this.Name = name;
            this.RegulatorName = regulatorName;
            this.BrandName = brandName;
            this.AuthorizedPersonnelTaxId = authorizedPersonnelTaxId;
            this.AuthorizedPersonnelName = authorizedPersonnelName;
            this.AuthorizedPersonnelKycDocumentType = authorizedPersonnelKycDocumentType;
            this.RegistrationId = registrationId;
            this.VatId = vatId;
            this.TaxId = taxId;
            this.Description = description;
            this.LogoUrl = logoUrl;
            this.ContactEmail = contactEmail;
            this.PhoneNumber = phoneNumber;
            this.CountryId = countryId;
            this.StateId = stateId;
            this.Status = status;
            this.CompanyCode = companyCode;
            this.PrivacyPolicyUrl = privacyPolicyUrl;
            this.TermsOfServiceUrl = termsOfServiceUrl;
            this.WebsiteUrl = websiteUrl;
            this.HelpLineNumber = helpLineNumber;
            this.SupportEmail = supportEmail;
            this.IsGovernmentOrganization = isGovernmentOrganization;
            this.DlApiKey = dlApiKey;
            this.IsKyoCompleted = isKyoCompleted;
            this.IsEnabled = isEnabled;
            this.IsDataProvider = isDataProvider;
            this.IsDataConsumer = isDataConsumer;
            this.SubmittedAtUtc = submittedAtUtc;
            this.ApprovedBy = approvedBy;
            this.ApprovedAtUtc = approvedAtUtc;
            this.IsDigiLockerOrganization = isDigiLockerOrganization;
            this.IsMdmcMaintained = isMdmcMaintained;
            this.IsBbps = isBbps;
            this.MetaData = metaData;
            this.CountryCode = countryCode;
            this.OrganizationType = organizationType;
            this.OrganizationCategory = organizationCategory;
            this.DocumentProviderCategory = documentProviderCategory;
            this.Addresses = addresses;
            this.FinancialAccounts = financialAccounts;
            this.CountryState = countryState;
            this.ApprovedByUser = approvedByUser;
            this.KyoDocuments = kyoDocuments;
            this.IsDelete = isDelete;
            this.RecoveryToken = recoveryToken;
        }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "createdBy", EmitDefaultValue = false)]
        public Guid CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAtUtc
        /// </summary>
        [DataMember(Name = "createdAtUtc", EmitDefaultValue = false)]
        public DateTime CreatedAtUtc { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedBy
        /// </summary>
        [DataMember(Name = "updatedBy", EmitDefaultValue = true)]
        public Guid? UpdatedBy { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAtUtc
        /// </summary>
        [DataMember(Name = "updatedAtUtc", EmitDefaultValue = true)]
        public DateTime? UpdatedAtUtc { get; set; }

        /// <summary>
        /// Gets or Sets CreatedByUser
        /// </summary>
        [DataMember(Name = "createdByUser", EmitDefaultValue = false)]
        public ApplicationUser CreatedByUser { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedByUser
        /// </summary>
        [DataMember(Name = "updatedByUser", EmitDefaultValue = false)]
        public ApplicationUser UpdatedByUser { get; set; }

        /// <summary>
        /// Gets or Sets DeletedBy
        /// </summary>
        [DataMember(Name = "deletedBy", EmitDefaultValue = true)]
        public Guid? DeletedBy { get; set; }

        /// <summary>
        /// Gets or Sets DeletedAtUtc
        /// </summary>
        [DataMember(Name = "deletedAtUtc", EmitDefaultValue = true)]
        public DateTime? DeletedAtUtc { get; set; }

        /// <summary>
        /// Gets or Sets DeletedByUser
        /// </summary>
        [DataMember(Name = "deletedByUser", EmitDefaultValue = false)]
        public ApplicationUser DeletedByUser { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets DataPartnerId
        /// </summary>
        [DataMember(Name = "dataPartnerId", EmitDefaultValue = true)]
        public string DataPartnerId { get; set; }

        /// <summary>
        /// Gets or Sets TypeId
        /// </summary>
        [DataMember(Name = "typeId", EmitDefaultValue = false)]
        public Guid TypeId { get; set; }

        /// <summary>
        /// Gets or Sets CategoryId
        /// </summary>
        [DataMember(Name = "categoryId", EmitDefaultValue = false)]
        public Guid CategoryId { get; set; }

        /// <summary>
        /// Gets or Sets DocumentProviderCategoryId
        /// </summary>
        [DataMember(Name = "documentProviderCategoryId", EmitDefaultValue = true)]
        public Guid? DocumentProviderCategoryId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets RegulatorName
        /// </summary>
        [DataMember(Name = "regulatorName", EmitDefaultValue = true)]
        public string RegulatorName { get; set; }

        /// <summary>
        /// Gets or Sets BrandName
        /// </summary>
        [DataMember(Name = "brandName", EmitDefaultValue = true)]
        public string BrandName { get; set; }

        /// <summary>
        /// Gets or Sets AuthorizedPersonnelTaxId
        /// </summary>
        [DataMember(Name = "authorizedPersonnelTaxId", EmitDefaultValue = true)]
        public string AuthorizedPersonnelTaxId { get; set; }

        /// <summary>
        /// Gets or Sets AuthorizedPersonnelName
        /// </summary>
        [DataMember(Name = "authorizedPersonnelName", EmitDefaultValue = true)]
        public string AuthorizedPersonnelName { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationId
        /// </summary>
        [DataMember(Name = "registrationId", EmitDefaultValue = true)]
        public string RegistrationId { get; set; }

        /// <summary>
        /// Gets or Sets VatId
        /// </summary>
        [DataMember(Name = "vatId", EmitDefaultValue = true)]
        public string VatId { get; set; }

        /// <summary>
        /// Gets or Sets TaxId
        /// </summary>
        [DataMember(Name = "taxId", EmitDefaultValue = true)]
        public string TaxId { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets LogoUrl
        /// </summary>
        [DataMember(Name = "logoUrl", EmitDefaultValue = true)]
        public string LogoUrl { get; set; }

        /// <summary>
        /// Gets or Sets ContactEmail
        /// </summary>
        [DataMember(Name = "contactEmail", EmitDefaultValue = true)]
        public string ContactEmail { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [DataMember(Name = "phoneNumber", EmitDefaultValue = true)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets CountryId
        /// </summary>
        [DataMember(Name = "countryId", EmitDefaultValue = false)]
        public Guid CountryId { get; set; }

        /// <summary>
        /// Gets or Sets StateId
        /// </summary>
        [DataMember(Name = "stateId", EmitDefaultValue = false)]
        public Guid StateId { get; set; }

        /// <summary>
        /// Gets or Sets CompanyCode
        /// </summary>
        [DataMember(Name = "companyCode", EmitDefaultValue = true)]
        public string CompanyCode { get; set; }

        /// <summary>
        /// Gets or Sets PrivacyPolicyUrl
        /// </summary>
        [DataMember(Name = "privacyPolicyUrl", EmitDefaultValue = true)]
        public string PrivacyPolicyUrl { get; set; }

        /// <summary>
        /// Gets or Sets TermsOfServiceUrl
        /// </summary>
        [DataMember(Name = "termsOfServiceUrl", EmitDefaultValue = true)]
        public string TermsOfServiceUrl { get; set; }

        /// <summary>
        /// Gets or Sets WebsiteUrl
        /// </summary>
        [DataMember(Name = "websiteUrl", EmitDefaultValue = true)]
        public string WebsiteUrl { get; set; }

        /// <summary>
        /// Gets or Sets HelpLineNumber
        /// </summary>
        [DataMember(Name = "helpLineNumber", EmitDefaultValue = true)]
        public string HelpLineNumber { get; set; }

        /// <summary>
        /// Gets or Sets SupportEmail
        /// </summary>
        [DataMember(Name = "supportEmail", EmitDefaultValue = true)]
        public string SupportEmail { get; set; }

        /// <summary>
        /// Gets or Sets IsGovernmentOrganization
        /// </summary>
        [DataMember(Name = "isGovernmentOrganization", EmitDefaultValue = true)]
        public bool IsGovernmentOrganization { get; set; }

        /// <summary>
        /// Gets or Sets DlApiKey
        /// </summary>
        [DataMember(Name = "dlApiKey", EmitDefaultValue = true)]
        public string DlApiKey { get; set; }

        /// <summary>
        /// Gets or Sets IsKyoCompleted
        /// </summary>
        [DataMember(Name = "isKyoCompleted", EmitDefaultValue = true)]
        public bool IsKyoCompleted { get; set; }

        /// <summary>
        /// Gets or Sets IsEnabled
        /// </summary>
        [DataMember(Name = "isEnabled", EmitDefaultValue = true)]
        public bool IsEnabled { get; set; }

        /// <summary>
        /// Gets or Sets IsDataProvider
        /// </summary>
        [DataMember(Name = "isDataProvider", EmitDefaultValue = true)]
        public bool IsDataProvider { get; set; }

        /// <summary>
        /// Gets or Sets IsDataConsumer
        /// </summary>
        [DataMember(Name = "isDataConsumer", EmitDefaultValue = true)]
        public bool IsDataConsumer { get; set; }

        /// <summary>
        /// Gets or Sets SubmittedAtUtc
        /// </summary>
        [DataMember(Name = "submittedAtUtc", EmitDefaultValue = true)]
        public DateTime? SubmittedAtUtc { get; set; }

        /// <summary>
        /// Gets or Sets ApprovedBy
        /// </summary>
        [DataMember(Name = "approvedBy", EmitDefaultValue = true)]
        public Guid? ApprovedBy { get; set; }

        /// <summary>
        /// Gets or Sets ApprovedAtUtc
        /// </summary>
        [DataMember(Name = "approvedAtUtc", EmitDefaultValue = true)]
        public DateTime? ApprovedAtUtc { get; set; }

        /// <summary>
        /// Gets or Sets IsDigiLockerOrganization
        /// </summary>
        [DataMember(Name = "isDigiLockerOrganization", EmitDefaultValue = true)]
        public bool IsDigiLockerOrganization { get; set; }

        /// <summary>
        /// Gets or Sets IsMdmcMaintained
        /// </summary>
        [DataMember(Name = "isMdmcMaintained", EmitDefaultValue = true)]
        public bool IsMdmcMaintained { get; set; }

        /// <summary>
        /// Gets or Sets IsBbps
        /// </summary>
        [DataMember(Name = "isBbps", EmitDefaultValue = true)]
        public bool IsBbps { get; set; }

        /// <summary>
        /// Gets or Sets MetaData
        /// </summary>
        [DataMember(Name = "metaData", EmitDefaultValue = false)]
        public OrganizationMetaData MetaData { get; set; }

        /// <summary>
        /// Gets or Sets CountryCode
        /// </summary>
        [DataMember(Name = "countryCode", EmitDefaultValue = true)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationType
        /// </summary>
        [DataMember(Name = "organizationType", EmitDefaultValue = false)]
        public OrganizationType OrganizationType { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationCategory
        /// </summary>
        [DataMember(Name = "organizationCategory", EmitDefaultValue = false)]
        public OrganizationCategory OrganizationCategory { get; set; }

        /// <summary>
        /// Gets or Sets DocumentProviderCategory
        /// </summary>
        [DataMember(Name = "documentProviderCategory", EmitDefaultValue = false)]
        public DocumentProviderCategory DocumentProviderCategory { get; set; }

        /// <summary>
        /// Gets or Sets Addresses
        /// </summary>
        [DataMember(Name = "addresses", EmitDefaultValue = true)]
        public List<OrganizationAddress> Addresses { get; set; }

        /// <summary>
        /// Gets or Sets FinancialAccounts
        /// </summary>
        [DataMember(Name = "financialAccounts", EmitDefaultValue = true)]
        public List<OrganizationFinancialAccount> FinancialAccounts { get; set; }

        /// <summary>
        /// Gets or Sets CountryState
        /// </summary>
        [DataMember(Name = "countryState", EmitDefaultValue = false)]
        public Country CountryState { get; set; }

        /// <summary>
        /// Gets or Sets ApprovedByUser
        /// </summary>
        [DataMember(Name = "approvedByUser", EmitDefaultValue = false)]
        public ApplicationUser ApprovedByUser { get; set; }

        /// <summary>
        /// Gets or Sets KyoDocuments
        /// </summary>
        [DataMember(Name = "kyoDocuments", EmitDefaultValue = true)]
        public List<OrganizationKyoDocument> KyoDocuments { get; set; }

        /// <summary>
        /// Gets or Sets IsDelete
        /// </summary>
        [DataMember(Name = "isDelete", EmitDefaultValue = true)]
        public bool IsDelete { get; set; }

        /// <summary>
        /// Gets or Sets RecoveryToken
        /// </summary>
        [DataMember(Name = "recoveryToken", EmitDefaultValue = true)]
        public Guid? RecoveryToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Organization {\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedAtUtc: ").Append(CreatedAtUtc).Append("\n");
            sb.Append("  UpdatedBy: ").Append(UpdatedBy).Append("\n");
            sb.Append("  UpdatedAtUtc: ").Append(UpdatedAtUtc).Append("\n");
            sb.Append("  CreatedByUser: ").Append(CreatedByUser).Append("\n");
            sb.Append("  UpdatedByUser: ").Append(UpdatedByUser).Append("\n");
            sb.Append("  DeletedBy: ").Append(DeletedBy).Append("\n");
            sb.Append("  DeletedAtUtc: ").Append(DeletedAtUtc).Append("\n");
            sb.Append("  DeletedByUser: ").Append(DeletedByUser).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DataPartnerId: ").Append(DataPartnerId).Append("\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  DocumentProviderCategoryId: ").Append(DocumentProviderCategoryId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RegulatorName: ").Append(RegulatorName).Append("\n");
            sb.Append("  BrandName: ").Append(BrandName).Append("\n");
            sb.Append("  AuthorizedPersonnelTaxId: ").Append(AuthorizedPersonnelTaxId).Append("\n");
            sb.Append("  AuthorizedPersonnelName: ").Append(AuthorizedPersonnelName).Append("\n");
            sb.Append("  AuthorizedPersonnelKycDocumentType: ").Append(AuthorizedPersonnelKycDocumentType).Append("\n");
            sb.Append("  RegistrationId: ").Append(RegistrationId).Append("\n");
            sb.Append("  VatId: ").Append(VatId).Append("\n");
            sb.Append("  TaxId: ").Append(TaxId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  LogoUrl: ").Append(LogoUrl).Append("\n");
            sb.Append("  ContactEmail: ").Append(ContactEmail).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  CountryId: ").Append(CountryId).Append("\n");
            sb.Append("  StateId: ").Append(StateId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CompanyCode: ").Append(CompanyCode).Append("\n");
            sb.Append("  PrivacyPolicyUrl: ").Append(PrivacyPolicyUrl).Append("\n");
            sb.Append("  TermsOfServiceUrl: ").Append(TermsOfServiceUrl).Append("\n");
            sb.Append("  WebsiteUrl: ").Append(WebsiteUrl).Append("\n");
            sb.Append("  HelpLineNumber: ").Append(HelpLineNumber).Append("\n");
            sb.Append("  SupportEmail: ").Append(SupportEmail).Append("\n");
            sb.Append("  IsGovernmentOrganization: ").Append(IsGovernmentOrganization).Append("\n");
            sb.Append("  DlApiKey: ").Append(DlApiKey).Append("\n");
            sb.Append("  IsKyoCompleted: ").Append(IsKyoCompleted).Append("\n");
            sb.Append("  IsEnabled: ").Append(IsEnabled).Append("\n");
            sb.Append("  IsDataProvider: ").Append(IsDataProvider).Append("\n");
            sb.Append("  IsDataConsumer: ").Append(IsDataConsumer).Append("\n");
            sb.Append("  SubmittedAtUtc: ").Append(SubmittedAtUtc).Append("\n");
            sb.Append("  ApprovedBy: ").Append(ApprovedBy).Append("\n");
            sb.Append("  ApprovedAtUtc: ").Append(ApprovedAtUtc).Append("\n");
            sb.Append("  IsDigiLockerOrganization: ").Append(IsDigiLockerOrganization).Append("\n");
            sb.Append("  IsMdmcMaintained: ").Append(IsMdmcMaintained).Append("\n");
            sb.Append("  IsBbps: ").Append(IsBbps).Append("\n");
            sb.Append("  MetaData: ").Append(MetaData).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  OrganizationType: ").Append(OrganizationType).Append("\n");
            sb.Append("  OrganizationCategory: ").Append(OrganizationCategory).Append("\n");
            sb.Append("  DocumentProviderCategory: ").Append(DocumentProviderCategory).Append("\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("  FinancialAccounts: ").Append(FinancialAccounts).Append("\n");
            sb.Append("  CountryState: ").Append(CountryState).Append("\n");
            sb.Append("  ApprovedByUser: ").Append(ApprovedByUser).Append("\n");
            sb.Append("  KyoDocuments: ").Append(KyoDocuments).Append("\n");
            sb.Append("  IsDelete: ").Append(IsDelete).Append("\n");
            sb.Append("  RecoveryToken: ").Append(RecoveryToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Organization);
        }

        /// <summary>
        /// Returns true if Organization instances are equal
        /// </summary>
        /// <param name="input">Instance of Organization to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Organization input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.CreatedAtUtc == input.CreatedAtUtc ||
                    (this.CreatedAtUtc != null &&
                    this.CreatedAtUtc.Equals(input.CreatedAtUtc))
                ) && 
                (
                    this.UpdatedBy == input.UpdatedBy ||
                    (this.UpdatedBy != null &&
                    this.UpdatedBy.Equals(input.UpdatedBy))
                ) && 
                (
                    this.UpdatedAtUtc == input.UpdatedAtUtc ||
                    (this.UpdatedAtUtc != null &&
                    this.UpdatedAtUtc.Equals(input.UpdatedAtUtc))
                ) && 
                (
                    this.CreatedByUser == input.CreatedByUser ||
                    (this.CreatedByUser != null &&
                    this.CreatedByUser.Equals(input.CreatedByUser))
                ) && 
                (
                    this.UpdatedByUser == input.UpdatedByUser ||
                    (this.UpdatedByUser != null &&
                    this.UpdatedByUser.Equals(input.UpdatedByUser))
                ) && 
                (
                    this.DeletedBy == input.DeletedBy ||
                    (this.DeletedBy != null &&
                    this.DeletedBy.Equals(input.DeletedBy))
                ) && 
                (
                    this.DeletedAtUtc == input.DeletedAtUtc ||
                    (this.DeletedAtUtc != null &&
                    this.DeletedAtUtc.Equals(input.DeletedAtUtc))
                ) && 
                (
                    this.DeletedByUser == input.DeletedByUser ||
                    (this.DeletedByUser != null &&
                    this.DeletedByUser.Equals(input.DeletedByUser))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DataPartnerId == input.DataPartnerId ||
                    (this.DataPartnerId != null &&
                    this.DataPartnerId.Equals(input.DataPartnerId))
                ) && 
                (
                    this.TypeId == input.TypeId ||
                    (this.TypeId != null &&
                    this.TypeId.Equals(input.TypeId))
                ) && 
                (
                    this.CategoryId == input.CategoryId ||
                    (this.CategoryId != null &&
                    this.CategoryId.Equals(input.CategoryId))
                ) && 
                (
                    this.DocumentProviderCategoryId == input.DocumentProviderCategoryId ||
                    (this.DocumentProviderCategoryId != null &&
                    this.DocumentProviderCategoryId.Equals(input.DocumentProviderCategoryId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.RegulatorName == input.RegulatorName ||
                    (this.RegulatorName != null &&
                    this.RegulatorName.Equals(input.RegulatorName))
                ) && 
                (
                    this.BrandName == input.BrandName ||
                    (this.BrandName != null &&
                    this.BrandName.Equals(input.BrandName))
                ) && 
                (
                    this.AuthorizedPersonnelTaxId == input.AuthorizedPersonnelTaxId ||
                    (this.AuthorizedPersonnelTaxId != null &&
                    this.AuthorizedPersonnelTaxId.Equals(input.AuthorizedPersonnelTaxId))
                ) && 
                (
                    this.AuthorizedPersonnelName == input.AuthorizedPersonnelName ||
                    (this.AuthorizedPersonnelName != null &&
                    this.AuthorizedPersonnelName.Equals(input.AuthorizedPersonnelName))
                ) && 
                (
                    this.AuthorizedPersonnelKycDocumentType == input.AuthorizedPersonnelKycDocumentType ||
                    this.AuthorizedPersonnelKycDocumentType.Equals(input.AuthorizedPersonnelKycDocumentType)
                ) && 
                (
                    this.RegistrationId == input.RegistrationId ||
                    (this.RegistrationId != null &&
                    this.RegistrationId.Equals(input.RegistrationId))
                ) && 
                (
                    this.VatId == input.VatId ||
                    (this.VatId != null &&
                    this.VatId.Equals(input.VatId))
                ) && 
                (
                    this.TaxId == input.TaxId ||
                    (this.TaxId != null &&
                    this.TaxId.Equals(input.TaxId))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.LogoUrl == input.LogoUrl ||
                    (this.LogoUrl != null &&
                    this.LogoUrl.Equals(input.LogoUrl))
                ) && 
                (
                    this.ContactEmail == input.ContactEmail ||
                    (this.ContactEmail != null &&
                    this.ContactEmail.Equals(input.ContactEmail))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.CountryId == input.CountryId ||
                    (this.CountryId != null &&
                    this.CountryId.Equals(input.CountryId))
                ) && 
                (
                    this.StateId == input.StateId ||
                    (this.StateId != null &&
                    this.StateId.Equals(input.StateId))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.CompanyCode == input.CompanyCode ||
                    (this.CompanyCode != null &&
                    this.CompanyCode.Equals(input.CompanyCode))
                ) && 
                (
                    this.PrivacyPolicyUrl == input.PrivacyPolicyUrl ||
                    (this.PrivacyPolicyUrl != null &&
                    this.PrivacyPolicyUrl.Equals(input.PrivacyPolicyUrl))
                ) && 
                (
                    this.TermsOfServiceUrl == input.TermsOfServiceUrl ||
                    (this.TermsOfServiceUrl != null &&
                    this.TermsOfServiceUrl.Equals(input.TermsOfServiceUrl))
                ) && 
                (
                    this.WebsiteUrl == input.WebsiteUrl ||
                    (this.WebsiteUrl != null &&
                    this.WebsiteUrl.Equals(input.WebsiteUrl))
                ) && 
                (
                    this.HelpLineNumber == input.HelpLineNumber ||
                    (this.HelpLineNumber != null &&
                    this.HelpLineNumber.Equals(input.HelpLineNumber))
                ) && 
                (
                    this.SupportEmail == input.SupportEmail ||
                    (this.SupportEmail != null &&
                    this.SupportEmail.Equals(input.SupportEmail))
                ) && 
                (
                    this.IsGovernmentOrganization == input.IsGovernmentOrganization ||
                    this.IsGovernmentOrganization.Equals(input.IsGovernmentOrganization)
                ) && 
                (
                    this.DlApiKey == input.DlApiKey ||
                    (this.DlApiKey != null &&
                    this.DlApiKey.Equals(input.DlApiKey))
                ) && 
                (
                    this.IsKyoCompleted == input.IsKyoCompleted ||
                    this.IsKyoCompleted.Equals(input.IsKyoCompleted)
                ) && 
                (
                    this.IsEnabled == input.IsEnabled ||
                    this.IsEnabled.Equals(input.IsEnabled)
                ) && 
                (
                    this.IsDataProvider == input.IsDataProvider ||
                    this.IsDataProvider.Equals(input.IsDataProvider)
                ) && 
                (
                    this.IsDataConsumer == input.IsDataConsumer ||
                    this.IsDataConsumer.Equals(input.IsDataConsumer)
                ) && 
                (
                    this.SubmittedAtUtc == input.SubmittedAtUtc ||
                    (this.SubmittedAtUtc != null &&
                    this.SubmittedAtUtc.Equals(input.SubmittedAtUtc))
                ) && 
                (
                    this.ApprovedBy == input.ApprovedBy ||
                    (this.ApprovedBy != null &&
                    this.ApprovedBy.Equals(input.ApprovedBy))
                ) && 
                (
                    this.ApprovedAtUtc == input.ApprovedAtUtc ||
                    (this.ApprovedAtUtc != null &&
                    this.ApprovedAtUtc.Equals(input.ApprovedAtUtc))
                ) && 
                (
                    this.IsDigiLockerOrganization == input.IsDigiLockerOrganization ||
                    this.IsDigiLockerOrganization.Equals(input.IsDigiLockerOrganization)
                ) && 
                (
                    this.IsMdmcMaintained == input.IsMdmcMaintained ||
                    this.IsMdmcMaintained.Equals(input.IsMdmcMaintained)
                ) && 
                (
                    this.IsBbps == input.IsBbps ||
                    this.IsBbps.Equals(input.IsBbps)
                ) && 
                (
                    this.MetaData == input.MetaData ||
                    (this.MetaData != null &&
                    this.MetaData.Equals(input.MetaData))
                ) && 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) && 
                (
                    this.OrganizationType == input.OrganizationType ||
                    (this.OrganizationType != null &&
                    this.OrganizationType.Equals(input.OrganizationType))
                ) && 
                (
                    this.OrganizationCategory == input.OrganizationCategory ||
                    (this.OrganizationCategory != null &&
                    this.OrganizationCategory.Equals(input.OrganizationCategory))
                ) && 
                (
                    this.DocumentProviderCategory == input.DocumentProviderCategory ||
                    (this.DocumentProviderCategory != null &&
                    this.DocumentProviderCategory.Equals(input.DocumentProviderCategory))
                ) && 
                (
                    this.Addresses == input.Addresses ||
                    this.Addresses != null &&
                    input.Addresses != null &&
                    this.Addresses.SequenceEqual(input.Addresses)
                ) && 
                (
                    this.FinancialAccounts == input.FinancialAccounts ||
                    this.FinancialAccounts != null &&
                    input.FinancialAccounts != null &&
                    this.FinancialAccounts.SequenceEqual(input.FinancialAccounts)
                ) && 
                (
                    this.CountryState == input.CountryState ||
                    (this.CountryState != null &&
                    this.CountryState.Equals(input.CountryState))
                ) && 
                (
                    this.ApprovedByUser == input.ApprovedByUser ||
                    (this.ApprovedByUser != null &&
                    this.ApprovedByUser.Equals(input.ApprovedByUser))
                ) && 
                (
                    this.KyoDocuments == input.KyoDocuments ||
                    this.KyoDocuments != null &&
                    input.KyoDocuments != null &&
                    this.KyoDocuments.SequenceEqual(input.KyoDocuments)
                ) && 
                (
                    this.IsDelete == input.IsDelete ||
                    this.IsDelete.Equals(input.IsDelete)
                ) && 
                (
                    this.RecoveryToken == input.RecoveryToken ||
                    (this.RecoveryToken != null &&
                    this.RecoveryToken.Equals(input.RecoveryToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                }
                if (this.CreatedAtUtc != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAtUtc.GetHashCode();
                }
                if (this.UpdatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedBy.GetHashCode();
                }
                if (this.UpdatedAtUtc != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAtUtc.GetHashCode();
                }
                if (this.CreatedByUser != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedByUser.GetHashCode();
                }
                if (this.UpdatedByUser != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedByUser.GetHashCode();
                }
                if (this.DeletedBy != null)
                {
                    hashCode = (hashCode * 59) + this.DeletedBy.GetHashCode();
                }
                if (this.DeletedAtUtc != null)
                {
                    hashCode = (hashCode * 59) + this.DeletedAtUtc.GetHashCode();
                }
                if (this.DeletedByUser != null)
                {
                    hashCode = (hashCode * 59) + this.DeletedByUser.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.DataPartnerId != null)
                {
                    hashCode = (hashCode * 59) + this.DataPartnerId.GetHashCode();
                }
                if (this.TypeId != null)
                {
                    hashCode = (hashCode * 59) + this.TypeId.GetHashCode();
                }
                if (this.CategoryId != null)
                {
                    hashCode = (hashCode * 59) + this.CategoryId.GetHashCode();
                }
                if (this.DocumentProviderCategoryId != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentProviderCategoryId.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.RegulatorName != null)
                {
                    hashCode = (hashCode * 59) + this.RegulatorName.GetHashCode();
                }
                if (this.BrandName != null)
                {
                    hashCode = (hashCode * 59) + this.BrandName.GetHashCode();
                }
                if (this.AuthorizedPersonnelTaxId != null)
                {
                    hashCode = (hashCode * 59) + this.AuthorizedPersonnelTaxId.GetHashCode();
                }
                if (this.AuthorizedPersonnelName != null)
                {
                    hashCode = (hashCode * 59) + this.AuthorizedPersonnelName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AuthorizedPersonnelKycDocumentType.GetHashCode();
                if (this.RegistrationId != null)
                {
                    hashCode = (hashCode * 59) + this.RegistrationId.GetHashCode();
                }
                if (this.VatId != null)
                {
                    hashCode = (hashCode * 59) + this.VatId.GetHashCode();
                }
                if (this.TaxId != null)
                {
                    hashCode = (hashCode * 59) + this.TaxId.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.LogoUrl != null)
                {
                    hashCode = (hashCode * 59) + this.LogoUrl.GetHashCode();
                }
                if (this.ContactEmail != null)
                {
                    hashCode = (hashCode * 59) + this.ContactEmail.GetHashCode();
                }
                if (this.PhoneNumber != null)
                {
                    hashCode = (hashCode * 59) + this.PhoneNumber.GetHashCode();
                }
                if (this.CountryId != null)
                {
                    hashCode = (hashCode * 59) + this.CountryId.GetHashCode();
                }
                if (this.StateId != null)
                {
                    hashCode = (hashCode * 59) + this.StateId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.CompanyCode != null)
                {
                    hashCode = (hashCode * 59) + this.CompanyCode.GetHashCode();
                }
                if (this.PrivacyPolicyUrl != null)
                {
                    hashCode = (hashCode * 59) + this.PrivacyPolicyUrl.GetHashCode();
                }
                if (this.TermsOfServiceUrl != null)
                {
                    hashCode = (hashCode * 59) + this.TermsOfServiceUrl.GetHashCode();
                }
                if (this.WebsiteUrl != null)
                {
                    hashCode = (hashCode * 59) + this.WebsiteUrl.GetHashCode();
                }
                if (this.HelpLineNumber != null)
                {
                    hashCode = (hashCode * 59) + this.HelpLineNumber.GetHashCode();
                }
                if (this.SupportEmail != null)
                {
                    hashCode = (hashCode * 59) + this.SupportEmail.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsGovernmentOrganization.GetHashCode();
                if (this.DlApiKey != null)
                {
                    hashCode = (hashCode * 59) + this.DlApiKey.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsKyoCompleted.GetHashCode();
                hashCode = (hashCode * 59) + this.IsEnabled.GetHashCode();
                hashCode = (hashCode * 59) + this.IsDataProvider.GetHashCode();
                hashCode = (hashCode * 59) + this.IsDataConsumer.GetHashCode();
                if (this.SubmittedAtUtc != null)
                {
                    hashCode = (hashCode * 59) + this.SubmittedAtUtc.GetHashCode();
                }
                if (this.ApprovedBy != null)
                {
                    hashCode = (hashCode * 59) + this.ApprovedBy.GetHashCode();
                }
                if (this.ApprovedAtUtc != null)
                {
                    hashCode = (hashCode * 59) + this.ApprovedAtUtc.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsDigiLockerOrganization.GetHashCode();
                hashCode = (hashCode * 59) + this.IsMdmcMaintained.GetHashCode();
                hashCode = (hashCode * 59) + this.IsBbps.GetHashCode();
                if (this.MetaData != null)
                {
                    hashCode = (hashCode * 59) + this.MetaData.GetHashCode();
                }
                if (this.CountryCode != null)
                {
                    hashCode = (hashCode * 59) + this.CountryCode.GetHashCode();
                }
                if (this.OrganizationType != null)
                {
                    hashCode = (hashCode * 59) + this.OrganizationType.GetHashCode();
                }
                if (this.OrganizationCategory != null)
                {
                    hashCode = (hashCode * 59) + this.OrganizationCategory.GetHashCode();
                }
                if (this.DocumentProviderCategory != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentProviderCategory.GetHashCode();
                }
                if (this.Addresses != null)
                {
                    hashCode = (hashCode * 59) + this.Addresses.GetHashCode();
                }
                if (this.FinancialAccounts != null)
                {
                    hashCode = (hashCode * 59) + this.FinancialAccounts.GetHashCode();
                }
                if (this.CountryState != null)
                {
                    hashCode = (hashCode * 59) + this.CountryState.GetHashCode();
                }
                if (this.ApprovedByUser != null)
                {
                    hashCode = (hashCode * 59) + this.ApprovedByUser.GetHashCode();
                }
                if (this.KyoDocuments != null)
                {
                    hashCode = (hashCode * 59) + this.KyoDocuments.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsDelete.GetHashCode();
                if (this.RecoveryToken != null)
                {
                    hashCode = (hashCode * 59) + this.RecoveryToken.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
