/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = MyDataMyConsent.Client.OpenAPIDateConverter;

namespace MyDataMyConsent.Models
{
    /// <summary>
    /// ConsentedFinancialAccount : Consented financial account details.
    /// </summary>
    [DataContract(Name = "ConsentedFinancialAccount")]
    public partial class ConsentedFinancialAccount : IEquatable<ConsentedFinancialAccount>
    {

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name = "category", IsRequired = true, EmitDefaultValue = true)]
        public FinancialAccountCategoryType Category { get; set; }

        /// <summary>
        /// Gets or Sets SubCategory
        /// </summary>
        [DataMember(Name = "subCategory", IsRequired = true, EmitDefaultValue = true)]
        public FinancialAccountSubCategoryType SubCategory { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConsentedFinancialAccount" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ConsentedFinancialAccount() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConsentedFinancialAccount" /> class.
        /// </summary>
        /// <param name="id">Financial account id. (required).</param>
        /// <param name="name">Financial account name. (required).</param>
        /// <param name="category">category (required).</param>
        /// <param name="subCategory">subCategory (required).</param>
        /// <param name="identifier">Financial account identifier. (required).</param>
        /// <param name="fieldTitle">Financial account field title. (required).</param>
        /// <param name="fieldSlug">Financial account field slug. (required).</param>
        /// <param name="requestedDetails">Requested financial account details. (required).</param>
        /// <param name="transactionPeriod">transactionPeriod.</param>
        /// <param name="issuerId">Financial account issuer id. (required).</param>
        /// <param name="issuerName">Financial account issuer name. (required).</param>
        public ConsentedFinancialAccount(string id = default(string), string name = default(string), FinancialAccountCategoryType category = default(FinancialAccountCategoryType), FinancialAccountSubCategoryType subCategory = default(FinancialAccountSubCategoryType), string identifier = default(string), string fieldTitle = default(string), string fieldSlug = default(string), List<FinancialAccountDetailsRequired> requestedDetails = default(List<FinancialAccountDetailsRequired>), ConsentedFinancialAccountTransactionPeriod transactionPeriod = default(ConsentedFinancialAccountTransactionPeriod), string issuerId = default(string), string issuerName = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for ConsentedFinancialAccount and cannot be null");
            }
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ConsentedFinancialAccount and cannot be null");
            }
            this.Name = name;
            this.Category = category;
            this.SubCategory = subCategory;
            // to ensure "identifier" is required (not null)
            if (identifier == null)
            {
                throw new ArgumentNullException("identifier is a required property for ConsentedFinancialAccount and cannot be null");
            }
            this.Identifier = identifier;
            // to ensure "fieldTitle" is required (not null)
            if (fieldTitle == null)
            {
                throw new ArgumentNullException("fieldTitle is a required property for ConsentedFinancialAccount and cannot be null");
            }
            this.FieldTitle = fieldTitle;
            // to ensure "fieldSlug" is required (not null)
            if (fieldSlug == null)
            {
                throw new ArgumentNullException("fieldSlug is a required property for ConsentedFinancialAccount and cannot be null");
            }
            this.FieldSlug = fieldSlug;
            // to ensure "requestedDetails" is required (not null)
            if (requestedDetails == null)
            {
                throw new ArgumentNullException("requestedDetails is a required property for ConsentedFinancialAccount and cannot be null");
            }
            this.RequestedDetails = requestedDetails;
            // to ensure "issuerId" is required (not null)
            if (issuerId == null)
            {
                throw new ArgumentNullException("issuerId is a required property for ConsentedFinancialAccount and cannot be null");
            }
            this.IssuerId = issuerId;
            // to ensure "issuerName" is required (not null)
            if (issuerName == null)
            {
                throw new ArgumentNullException("issuerName is a required property for ConsentedFinancialAccount and cannot be null");
            }
            this.IssuerName = issuerName;
            this.TransactionPeriod = transactionPeriod;
        }

        /// <summary>
        /// Financial account id.
        /// </summary>
        /// <value>Financial account id.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Financial account name.
        /// </summary>
        /// <value>Financial account name.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Financial account identifier.
        /// </summary>
        /// <value>Financial account identifier.</value>
        [DataMember(Name = "identifier", IsRequired = true, EmitDefaultValue = true)]
        public string Identifier { get; set; }

        /// <summary>
        /// Financial account field title.
        /// </summary>
        /// <value>Financial account field title.</value>
        [DataMember(Name = "fieldTitle", IsRequired = true, EmitDefaultValue = true)]
        public string FieldTitle { get; set; }

        /// <summary>
        /// Financial account field slug.
        /// </summary>
        /// <value>Financial account field slug.</value>
        [DataMember(Name = "fieldSlug", IsRequired = true, EmitDefaultValue = true)]
        public string FieldSlug { get; set; }

        /// <summary>
        /// Requested financial account details.
        /// </summary>
        /// <value>Requested financial account details.</value>
        [DataMember(Name = "requestedDetails", IsRequired = true, EmitDefaultValue = true)]
        public List<FinancialAccountDetailsRequired> RequestedDetails { get; set; }

        /// <summary>
        /// Gets or Sets TransactionPeriod
        /// </summary>
        [DataMember(Name = "transactionPeriod", EmitDefaultValue = false)]
        public ConsentedFinancialAccountTransactionPeriod TransactionPeriod { get; set; }

        /// <summary>
        /// Financial account issuer id.
        /// </summary>
        /// <value>Financial account issuer id.</value>
        [DataMember(Name = "issuerId", IsRequired = true, EmitDefaultValue = true)]
        public string IssuerId { get; set; }

        /// <summary>
        /// Financial account issuer name.
        /// </summary>
        /// <value>Financial account issuer name.</value>
        [DataMember(Name = "issuerName", IsRequired = true, EmitDefaultValue = true)]
        public string IssuerName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConsentedFinancialAccount {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  SubCategory: ").Append(SubCategory).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  FieldTitle: ").Append(FieldTitle).Append("\n");
            sb.Append("  FieldSlug: ").Append(FieldSlug).Append("\n");
            sb.Append("  RequestedDetails: ").Append(RequestedDetails).Append("\n");
            sb.Append("  TransactionPeriod: ").Append(TransactionPeriod).Append("\n");
            sb.Append("  IssuerId: ").Append(IssuerId).Append("\n");
            sb.Append("  IssuerName: ").Append(IssuerName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConsentedFinancialAccount);
        }

        /// <summary>
        /// Returns true if ConsentedFinancialAccount instances are equal
        /// </summary>
        /// <param name="input">Instance of ConsentedFinancialAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConsentedFinancialAccount input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Category == input.Category ||
                    this.Category.Equals(input.Category)
                ) && 
                (
                    this.SubCategory == input.SubCategory ||
                    this.SubCategory.Equals(input.SubCategory)
                ) && 
                (
                    this.Identifier == input.Identifier ||
                    (this.Identifier != null &&
                    this.Identifier.Equals(input.Identifier))
                ) && 
                (
                    this.FieldTitle == input.FieldTitle ||
                    (this.FieldTitle != null &&
                    this.FieldTitle.Equals(input.FieldTitle))
                ) && 
                (
                    this.FieldSlug == input.FieldSlug ||
                    (this.FieldSlug != null &&
                    this.FieldSlug.Equals(input.FieldSlug))
                ) && 
                (
                    this.RequestedDetails == input.RequestedDetails ||
                    this.RequestedDetails != null &&
                    input.RequestedDetails != null &&
                    this.RequestedDetails.SequenceEqual(input.RequestedDetails)
                ) && 
                (
                    this.TransactionPeriod == input.TransactionPeriod ||
                    (this.TransactionPeriod != null &&
                    this.TransactionPeriod.Equals(input.TransactionPeriod))
                ) && 
                (
                    this.IssuerId == input.IssuerId ||
                    (this.IssuerId != null &&
                    this.IssuerId.Equals(input.IssuerId))
                ) && 
                (
                    this.IssuerName == input.IssuerName ||
                    (this.IssuerName != null &&
                    this.IssuerName.Equals(input.IssuerName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Category.GetHashCode();
                hashCode = (hashCode * 59) + this.SubCategory.GetHashCode();
                if (this.Identifier != null)
                {
                    hashCode = (hashCode * 59) + this.Identifier.GetHashCode();
                }
                if (this.FieldTitle != null)
                {
                    hashCode = (hashCode * 59) + this.FieldTitle.GetHashCode();
                }
                if (this.FieldSlug != null)
                {
                    hashCode = (hashCode * 59) + this.FieldSlug.GetHashCode();
                }
                if (this.RequestedDetails != null)
                {
                    hashCode = (hashCode * 59) + this.RequestedDetails.GetHashCode();
                }
                if (this.TransactionPeriod != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionPeriod.GetHashCode();
                }
                if (this.IssuerId != null)
                {
                    hashCode = (hashCode * 59) + this.IssuerId.GetHashCode();
                }
                if (this.IssuerName != null)
                {
                    hashCode = (hashCode * 59) + this.IssuerName.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
