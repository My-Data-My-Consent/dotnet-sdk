/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = MyDataMyConsent.Client.OpenAPIDateConverter;

namespace MyDataMyConsent.Models
{
    /// <summary>
    /// ApplicationUser
    /// </summary>
    [DataContract(Name = "ApplicationUser")]
    public partial class ApplicationUser : IEquatable<ApplicationUser>
    {

        /// <summary>
        /// Gets or Sets Gender
        /// </summary>
        [DataMember(Name = "gender", EmitDefaultValue = false)]
        public Gender? Gender { get; set; }

        /// <summary>
        /// Gets or Sets Theme
        /// </summary>
        [DataMember(Name = "theme", EmitDefaultValue = false)]
        public Theme? Theme { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationUser" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="userName">userName.</param>
        /// <param name="normalizedUserName">normalizedUserName.</param>
        /// <param name="email">email.</param>
        /// <param name="normalizedEmail">normalizedEmail.</param>
        /// <param name="emailConfirmed">emailConfirmed.</param>
        /// <param name="passwordHash">passwordHash.</param>
        /// <param name="securityStamp">securityStamp.</param>
        /// <param name="concurrencyStamp">concurrencyStamp.</param>
        /// <param name="phoneNumber">phoneNumber.</param>
        /// <param name="phoneNumberConfirmed">phoneNumberConfirmed.</param>
        /// <param name="twoFactorEnabled">twoFactorEnabled.</param>
        /// <param name="lockoutEnd">lockoutEnd.</param>
        /// <param name="lockoutEnabled">lockoutEnabled.</param>
        /// <param name="accessFailedCount">accessFailedCount.</param>
        /// <param name="firstName">firstName.</param>
        /// <param name="middleName">middleName.</param>
        /// <param name="lastName">lastName.</param>
        /// <param name="gender">gender.</param>
        /// <param name="dateOfBirth">dateOfBirth.</param>
        /// <param name="countryId">countryId.</param>
        /// <param name="postCode">postCode.</param>
        /// <param name="referredBy">referredBy.</param>
        /// <param name="language">language.</param>
        /// <param name="theme">theme.</param>
        /// <param name="designation">designation.</param>
        /// <param name="isMarkedForDeletion">isMarkedForDeletion.</param>
        /// <param name="hardDeleteDate">hardDeleteDate.</param>
        /// <param name="securityPin">securityPin.</param>
        /// <param name="photoUrl">photoUrl.</param>
        /// <param name="referralCode">referralCode.</param>
        /// <param name="recoveryToken">recoveryToken.</param>
        /// <param name="digiLockerLastSyncDate">digiLockerLastSyncDate.</param>
        /// <param name="refreshTokens">refreshTokens.</param>
        /// <param name="country">country.</param>
        /// <param name="referredByUser">referredByUser.</param>
        public ApplicationUser(Guid id = default(Guid), string userName = default(string), string normalizedUserName = default(string), string email = default(string), string normalizedEmail = default(string), bool emailConfirmed = default(bool), string passwordHash = default(string), string securityStamp = default(string), string concurrencyStamp = default(string), string phoneNumber = default(string), bool phoneNumberConfirmed = default(bool), bool twoFactorEnabled = default(bool), DateTime? lockoutEnd = default(DateTime?), bool lockoutEnabled = default(bool), int accessFailedCount = default(int), string firstName = default(string), string middleName = default(string), string lastName = default(string), Gender? gender = default(Gender?), DateTime dateOfBirth = default(DateTime), Guid countryId = default(Guid), string postCode = default(string), Guid? referredBy = default(Guid?), string language = default(string), Theme? theme = default(Theme?), string designation = default(string), bool isMarkedForDeletion = default(bool), DateTime? hardDeleteDate = default(DateTime?), string securityPin = default(string), string photoUrl = default(string), string referralCode = default(string), string recoveryToken = default(string), DateTime? digiLockerLastSyncDate = default(DateTime?), List<RefreshToken> refreshTokens = default(List<RefreshToken>), Country country = default(Country), ApplicationUser referredByUser = default(ApplicationUser))
        {
            this.Id = id;
            this.UserName = userName;
            this.NormalizedUserName = normalizedUserName;
            this.Email = email;
            this.NormalizedEmail = normalizedEmail;
            this.EmailConfirmed = emailConfirmed;
            this.PasswordHash = passwordHash;
            this.SecurityStamp = securityStamp;
            this.ConcurrencyStamp = concurrencyStamp;
            this.PhoneNumber = phoneNumber;
            this.PhoneNumberConfirmed = phoneNumberConfirmed;
            this.TwoFactorEnabled = twoFactorEnabled;
            this.LockoutEnd = lockoutEnd;
            this.LockoutEnabled = lockoutEnabled;
            this.AccessFailedCount = accessFailedCount;
            this.FirstName = firstName;
            this.MiddleName = middleName;
            this.LastName = lastName;
            this.Gender = gender;
            this.DateOfBirth = dateOfBirth;
            this.CountryId = countryId;
            this.PostCode = postCode;
            this.ReferredBy = referredBy;
            this.Language = language;
            this.Theme = theme;
            this.Designation = designation;
            this.IsMarkedForDeletion = isMarkedForDeletion;
            this.HardDeleteDate = hardDeleteDate;
            this.SecurityPin = securityPin;
            this.PhotoUrl = photoUrl;
            this.ReferralCode = referralCode;
            this.RecoveryToken = recoveryToken;
            this.DigiLockerLastSyncDate = digiLockerLastSyncDate;
            this.RefreshTokens = refreshTokens;
            this.Country = country;
            this.ReferredByUser = referredByUser;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [DataMember(Name = "userName", EmitDefaultValue = true)]
        public string UserName { get; set; }

        /// <summary>
        /// Gets or Sets NormalizedUserName
        /// </summary>
        [DataMember(Name = "normalizedUserName", EmitDefaultValue = true)]
        public string NormalizedUserName { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "email", EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets NormalizedEmail
        /// </summary>
        [DataMember(Name = "normalizedEmail", EmitDefaultValue = true)]
        public string NormalizedEmail { get; set; }

        /// <summary>
        /// Gets or Sets EmailConfirmed
        /// </summary>
        [DataMember(Name = "emailConfirmed", EmitDefaultValue = true)]
        public bool EmailConfirmed { get; set; }

        /// <summary>
        /// Gets or Sets PasswordHash
        /// </summary>
        [DataMember(Name = "passwordHash", EmitDefaultValue = true)]
        public string PasswordHash { get; set; }

        /// <summary>
        /// Gets or Sets SecurityStamp
        /// </summary>
        [DataMember(Name = "securityStamp", EmitDefaultValue = true)]
        public string SecurityStamp { get; set; }

        /// <summary>
        /// Gets or Sets ConcurrencyStamp
        /// </summary>
        [DataMember(Name = "concurrencyStamp", EmitDefaultValue = true)]
        public string ConcurrencyStamp { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [DataMember(Name = "phoneNumber", EmitDefaultValue = true)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumberConfirmed
        /// </summary>
        [DataMember(Name = "phoneNumberConfirmed", EmitDefaultValue = true)]
        public bool PhoneNumberConfirmed { get; set; }

        /// <summary>
        /// Gets or Sets TwoFactorEnabled
        /// </summary>
        [DataMember(Name = "twoFactorEnabled", EmitDefaultValue = true)]
        public bool TwoFactorEnabled { get; set; }

        /// <summary>
        /// Gets or Sets LockoutEnd
        /// </summary>
        [DataMember(Name = "lockoutEnd", EmitDefaultValue = true)]
        public DateTime? LockoutEnd { get; set; }

        /// <summary>
        /// Gets or Sets LockoutEnabled
        /// </summary>
        [DataMember(Name = "lockoutEnabled", EmitDefaultValue = true)]
        public bool LockoutEnabled { get; set; }

        /// <summary>
        /// Gets or Sets AccessFailedCount
        /// </summary>
        [DataMember(Name = "accessFailedCount", EmitDefaultValue = false)]
        public int AccessFailedCount { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name = "firstName", EmitDefaultValue = true)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets MiddleName
        /// </summary>
        [DataMember(Name = "middleName", EmitDefaultValue = true)]
        public string MiddleName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name = "lastName", EmitDefaultValue = true)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets FullName
        /// </summary>
        [DataMember(Name = "fullName", EmitDefaultValue = true)]
        public string FullName { get; private set; }

        /// <summary>
        /// Returns false as FullName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFullName()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets DateOfBirth
        /// </summary>
        [DataMember(Name = "dateOfBirth", EmitDefaultValue = false)]
        public DateTime DateOfBirth { get; set; }

        /// <summary>
        /// Gets or Sets CountryId
        /// </summary>
        [DataMember(Name = "countryId", EmitDefaultValue = false)]
        public Guid CountryId { get; set; }

        /// <summary>
        /// Gets or Sets PostCode
        /// </summary>
        [DataMember(Name = "postCode", EmitDefaultValue = true)]
        public string PostCode { get; set; }

        /// <summary>
        /// Gets or Sets ReferredBy
        /// </summary>
        [DataMember(Name = "referredBy", EmitDefaultValue = true)]
        public Guid? ReferredBy { get; set; }

        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name = "language", EmitDefaultValue = true)]
        public string Language { get; set; }

        /// <summary>
        /// Gets or Sets Designation
        /// </summary>
        [DataMember(Name = "designation", EmitDefaultValue = true)]
        public string Designation { get; set; }

        /// <summary>
        /// Gets or Sets IsMarkedForDeletion
        /// </summary>
        [DataMember(Name = "isMarkedForDeletion", EmitDefaultValue = true)]
        public bool IsMarkedForDeletion { get; set; }

        /// <summary>
        /// Gets or Sets HardDeleteDate
        /// </summary>
        [DataMember(Name = "hardDeleteDate", EmitDefaultValue = true)]
        public DateTime? HardDeleteDate { get; set; }

        /// <summary>
        /// Gets or Sets SecurityPin
        /// </summary>
        [DataMember(Name = "securityPin", EmitDefaultValue = true)]
        public string SecurityPin { get; set; }

        /// <summary>
        /// Gets or Sets PhotoUrl
        /// </summary>
        [DataMember(Name = "photoUrl", EmitDefaultValue = true)]
        public string PhotoUrl { get; set; }

        /// <summary>
        /// Gets or Sets ReferralCode
        /// </summary>
        [DataMember(Name = "referralCode", EmitDefaultValue = true)]
        public string ReferralCode { get; set; }

        /// <summary>
        /// Gets or Sets RecoveryToken
        /// </summary>
        [DataMember(Name = "recoveryToken", EmitDefaultValue = true)]
        public string RecoveryToken { get; set; }

        /// <summary>
        /// Gets or Sets DigiLockerLastSyncDate
        /// </summary>
        [DataMember(Name = "digiLockerLastSyncDate", EmitDefaultValue = true)]
        public DateTime? DigiLockerLastSyncDate { get; set; }

        /// <summary>
        /// Gets or Sets RefreshTokens
        /// </summary>
        [DataMember(Name = "refreshTokens", EmitDefaultValue = true)]
        public List<RefreshToken> RefreshTokens { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public Country Country { get; set; }

        /// <summary>
        /// Gets or Sets ReferredByUser
        /// </summary>
        [DataMember(Name = "referredByUser", EmitDefaultValue = false)]
        public ApplicationUser ReferredByUser { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApplicationUser {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  NormalizedUserName: ").Append(NormalizedUserName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  NormalizedEmail: ").Append(NormalizedEmail).Append("\n");
            sb.Append("  EmailConfirmed: ").Append(EmailConfirmed).Append("\n");
            sb.Append("  PasswordHash: ").Append(PasswordHash).Append("\n");
            sb.Append("  SecurityStamp: ").Append(SecurityStamp).Append("\n");
            sb.Append("  ConcurrencyStamp: ").Append(ConcurrencyStamp).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  PhoneNumberConfirmed: ").Append(PhoneNumberConfirmed).Append("\n");
            sb.Append("  TwoFactorEnabled: ").Append(TwoFactorEnabled).Append("\n");
            sb.Append("  LockoutEnd: ").Append(LockoutEnd).Append("\n");
            sb.Append("  LockoutEnabled: ").Append(LockoutEnabled).Append("\n");
            sb.Append("  AccessFailedCount: ").Append(AccessFailedCount).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  DateOfBirth: ").Append(DateOfBirth).Append("\n");
            sb.Append("  CountryId: ").Append(CountryId).Append("\n");
            sb.Append("  PostCode: ").Append(PostCode).Append("\n");
            sb.Append("  ReferredBy: ").Append(ReferredBy).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Theme: ").Append(Theme).Append("\n");
            sb.Append("  Designation: ").Append(Designation).Append("\n");
            sb.Append("  IsMarkedForDeletion: ").Append(IsMarkedForDeletion).Append("\n");
            sb.Append("  HardDeleteDate: ").Append(HardDeleteDate).Append("\n");
            sb.Append("  SecurityPin: ").Append(SecurityPin).Append("\n");
            sb.Append("  PhotoUrl: ").Append(PhotoUrl).Append("\n");
            sb.Append("  ReferralCode: ").Append(ReferralCode).Append("\n");
            sb.Append("  RecoveryToken: ").Append(RecoveryToken).Append("\n");
            sb.Append("  DigiLockerLastSyncDate: ").Append(DigiLockerLastSyncDate).Append("\n");
            sb.Append("  RefreshTokens: ").Append(RefreshTokens).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  ReferredByUser: ").Append(ReferredByUser).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApplicationUser);
        }

        /// <summary>
        /// Returns true if ApplicationUser instances are equal
        /// </summary>
        /// <param name="input">Instance of ApplicationUser to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplicationUser input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                ) && 
                (
                    this.NormalizedUserName == input.NormalizedUserName ||
                    (this.NormalizedUserName != null &&
                    this.NormalizedUserName.Equals(input.NormalizedUserName))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.NormalizedEmail == input.NormalizedEmail ||
                    (this.NormalizedEmail != null &&
                    this.NormalizedEmail.Equals(input.NormalizedEmail))
                ) && 
                (
                    this.EmailConfirmed == input.EmailConfirmed ||
                    this.EmailConfirmed.Equals(input.EmailConfirmed)
                ) && 
                (
                    this.PasswordHash == input.PasswordHash ||
                    (this.PasswordHash != null &&
                    this.PasswordHash.Equals(input.PasswordHash))
                ) && 
                (
                    this.SecurityStamp == input.SecurityStamp ||
                    (this.SecurityStamp != null &&
                    this.SecurityStamp.Equals(input.SecurityStamp))
                ) && 
                (
                    this.ConcurrencyStamp == input.ConcurrencyStamp ||
                    (this.ConcurrencyStamp != null &&
                    this.ConcurrencyStamp.Equals(input.ConcurrencyStamp))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.PhoneNumberConfirmed == input.PhoneNumberConfirmed ||
                    this.PhoneNumberConfirmed.Equals(input.PhoneNumberConfirmed)
                ) && 
                (
                    this.TwoFactorEnabled == input.TwoFactorEnabled ||
                    this.TwoFactorEnabled.Equals(input.TwoFactorEnabled)
                ) && 
                (
                    this.LockoutEnd == input.LockoutEnd ||
                    (this.LockoutEnd != null &&
                    this.LockoutEnd.Equals(input.LockoutEnd))
                ) && 
                (
                    this.LockoutEnabled == input.LockoutEnabled ||
                    this.LockoutEnabled.Equals(input.LockoutEnabled)
                ) && 
                (
                    this.AccessFailedCount == input.AccessFailedCount ||
                    this.AccessFailedCount.Equals(input.AccessFailedCount)
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.MiddleName == input.MiddleName ||
                    (this.MiddleName != null &&
                    this.MiddleName.Equals(input.MiddleName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.FullName == input.FullName ||
                    (this.FullName != null &&
                    this.FullName.Equals(input.FullName))
                ) && 
                (
                    this.Gender == input.Gender ||
                    this.Gender.Equals(input.Gender)
                ) && 
                (
                    this.DateOfBirth == input.DateOfBirth ||
                    (this.DateOfBirth != null &&
                    this.DateOfBirth.Equals(input.DateOfBirth))
                ) && 
                (
                    this.CountryId == input.CountryId ||
                    (this.CountryId != null &&
                    this.CountryId.Equals(input.CountryId))
                ) && 
                (
                    this.PostCode == input.PostCode ||
                    (this.PostCode != null &&
                    this.PostCode.Equals(input.PostCode))
                ) && 
                (
                    this.ReferredBy == input.ReferredBy ||
                    (this.ReferredBy != null &&
                    this.ReferredBy.Equals(input.ReferredBy))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.Theme == input.Theme ||
                    this.Theme.Equals(input.Theme)
                ) && 
                (
                    this.Designation == input.Designation ||
                    (this.Designation != null &&
                    this.Designation.Equals(input.Designation))
                ) && 
                (
                    this.IsMarkedForDeletion == input.IsMarkedForDeletion ||
                    this.IsMarkedForDeletion.Equals(input.IsMarkedForDeletion)
                ) && 
                (
                    this.HardDeleteDate == input.HardDeleteDate ||
                    (this.HardDeleteDate != null &&
                    this.HardDeleteDate.Equals(input.HardDeleteDate))
                ) && 
                (
                    this.SecurityPin == input.SecurityPin ||
                    (this.SecurityPin != null &&
                    this.SecurityPin.Equals(input.SecurityPin))
                ) && 
                (
                    this.PhotoUrl == input.PhotoUrl ||
                    (this.PhotoUrl != null &&
                    this.PhotoUrl.Equals(input.PhotoUrl))
                ) && 
                (
                    this.ReferralCode == input.ReferralCode ||
                    (this.ReferralCode != null &&
                    this.ReferralCode.Equals(input.ReferralCode))
                ) && 
                (
                    this.RecoveryToken == input.RecoveryToken ||
                    (this.RecoveryToken != null &&
                    this.RecoveryToken.Equals(input.RecoveryToken))
                ) && 
                (
                    this.DigiLockerLastSyncDate == input.DigiLockerLastSyncDate ||
                    (this.DigiLockerLastSyncDate != null &&
                    this.DigiLockerLastSyncDate.Equals(input.DigiLockerLastSyncDate))
                ) && 
                (
                    this.RefreshTokens == input.RefreshTokens ||
                    this.RefreshTokens != null &&
                    input.RefreshTokens != null &&
                    this.RefreshTokens.SequenceEqual(input.RefreshTokens)
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.ReferredByUser == input.ReferredByUser ||
                    (this.ReferredByUser != null &&
                    this.ReferredByUser.Equals(input.ReferredByUser))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.UserName != null)
                {
                    hashCode = (hashCode * 59) + this.UserName.GetHashCode();
                }
                if (this.NormalizedUserName != null)
                {
                    hashCode = (hashCode * 59) + this.NormalizedUserName.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.NormalizedEmail != null)
                {
                    hashCode = (hashCode * 59) + this.NormalizedEmail.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EmailConfirmed.GetHashCode();
                if (this.PasswordHash != null)
                {
                    hashCode = (hashCode * 59) + this.PasswordHash.GetHashCode();
                }
                if (this.SecurityStamp != null)
                {
                    hashCode = (hashCode * 59) + this.SecurityStamp.GetHashCode();
                }
                if (this.ConcurrencyStamp != null)
                {
                    hashCode = (hashCode * 59) + this.ConcurrencyStamp.GetHashCode();
                }
                if (this.PhoneNumber != null)
                {
                    hashCode = (hashCode * 59) + this.PhoneNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PhoneNumberConfirmed.GetHashCode();
                hashCode = (hashCode * 59) + this.TwoFactorEnabled.GetHashCode();
                if (this.LockoutEnd != null)
                {
                    hashCode = (hashCode * 59) + this.LockoutEnd.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LockoutEnabled.GetHashCode();
                hashCode = (hashCode * 59) + this.AccessFailedCount.GetHashCode();
                if (this.FirstName != null)
                {
                    hashCode = (hashCode * 59) + this.FirstName.GetHashCode();
                }
                if (this.MiddleName != null)
                {
                    hashCode = (hashCode * 59) + this.MiddleName.GetHashCode();
                }
                if (this.LastName != null)
                {
                    hashCode = (hashCode * 59) + this.LastName.GetHashCode();
                }
                if (this.FullName != null)
                {
                    hashCode = (hashCode * 59) + this.FullName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Gender.GetHashCode();
                if (this.DateOfBirth != null)
                {
                    hashCode = (hashCode * 59) + this.DateOfBirth.GetHashCode();
                }
                if (this.CountryId != null)
                {
                    hashCode = (hashCode * 59) + this.CountryId.GetHashCode();
                }
                if (this.PostCode != null)
                {
                    hashCode = (hashCode * 59) + this.PostCode.GetHashCode();
                }
                if (this.ReferredBy != null)
                {
                    hashCode = (hashCode * 59) + this.ReferredBy.GetHashCode();
                }
                if (this.Language != null)
                {
                    hashCode = (hashCode * 59) + this.Language.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Theme.GetHashCode();
                if (this.Designation != null)
                {
                    hashCode = (hashCode * 59) + this.Designation.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsMarkedForDeletion.GetHashCode();
                if (this.HardDeleteDate != null)
                {
                    hashCode = (hashCode * 59) + this.HardDeleteDate.GetHashCode();
                }
                if (this.SecurityPin != null)
                {
                    hashCode = (hashCode * 59) + this.SecurityPin.GetHashCode();
                }
                if (this.PhotoUrl != null)
                {
                    hashCode = (hashCode * 59) + this.PhotoUrl.GetHashCode();
                }
                if (this.ReferralCode != null)
                {
                    hashCode = (hashCode * 59) + this.ReferralCode.GetHashCode();
                }
                if (this.RecoveryToken != null)
                {
                    hashCode = (hashCode * 59) + this.RecoveryToken.GetHashCode();
                }
                if (this.DigiLockerLastSyncDate != null)
                {
                    hashCode = (hashCode * 59) + this.DigiLockerLastSyncDate.GetHashCode();
                }
                if (this.RefreshTokens != null)
                {
                    hashCode = (hashCode * 59) + this.RefreshTokens.GetHashCode();
                }
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                if (this.ReferredByUser != null)
                {
                    hashCode = (hashCode * 59) + this.ReferredByUser.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
