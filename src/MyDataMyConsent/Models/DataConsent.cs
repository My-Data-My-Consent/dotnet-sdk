/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = MyDataMyConsent.Client.OpenAPIDateConverter;

namespace MyDataMyConsent.Models
{
    /// <summary>
    /// DataConsent
    /// </summary>
    [DataContract(Name = "DataConsent")]
    public partial class DataConsent : IEquatable<DataConsent>
    {

        /// <summary>
        /// Gets or Sets DataLifeUnit
        /// </summary>
        [DataMember(Name = "dataLifeUnit", EmitDefaultValue = false)]
        public DataLifeUnit? DataLifeUnit { get; set; }

        /// <summary>
        /// Gets or Sets DataFetchFrequencyUnit
        /// </summary>
        [DataMember(Name = "dataFetchFrequencyUnit", EmitDefaultValue = false)]
        public DataFetchFrequencyUnit? DataFetchFrequencyUnit { get; set; }

        /// <summary>
        /// Gets or Sets DataFetchType
        /// </summary>
        [DataMember(Name = "dataFetchType", EmitDefaultValue = false)]
        public DataFetchType? DataFetchType { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public DataConsentStatus? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DataConsent" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="userId">userId.</param>
        /// <param name="organizationId">organizationId.</param>
        /// <param name="requestedByOrgId">requestedByOrgId.</param>
        /// <param name="transactionId">transactionId.</param>
        /// <param name="startDateTime">startDateTime.</param>
        /// <param name="expiryDateTime">expiryDateTime.</param>
        /// <param name="description">description.</param>
        /// <param name="purposeCode">purposeCode.</param>
        /// <param name="purposeLink">purposeLink.</param>
        /// <param name="location">location.</param>
        /// <param name="agreementId">agreementId.</param>
        /// <param name="dataLifeUnit">dataLifeUnit.</param>
        /// <param name="dataLifeValue">dataLifeValue.</param>
        /// <param name="dataFetchFrequencyUnit">dataFetchFrequencyUnit.</param>
        /// <param name="dataFetchFrequencyUnitValue">dataFetchFrequencyUnitValue.</param>
        /// <param name="dataFetchType">dataFetchType.</param>
        /// <param name="status">status.</param>
        /// <param name="createdAtUtc">createdAtUtc.</param>
        /// <param name="approvedAtUtc">approvedAtUtc.</param>
        /// <param name="rejectedAtUtc">rejectedAtUtc.</param>
        /// <param name="user">user.</param>
        /// <param name="organization">organization.</param>
        /// <param name="requestedByOrg">requestedByOrg.</param>
        /// <param name="agreement">agreement.</param>
        /// <param name="identityClaims">identityClaims.</param>
        /// <param name="identifiers">identifiers.</param>
        /// <param name="requestedFinancialAccounts">requestedFinancialAccounts.</param>
        /// <param name="requestedDocuments">requestedDocuments.</param>
        public DataConsent(Guid id = default(Guid), Guid? userId = default(Guid?), Guid? organizationId = default(Guid?), Guid requestedByOrgId = default(Guid), string transactionId = default(string), DateTime? startDateTime = default(DateTime?), DateTime expiryDateTime = default(DateTime), string description = default(string), string purposeCode = default(string), string purposeLink = default(string), string location = default(string), Guid agreementId = default(Guid), DataLifeUnit? dataLifeUnit = default(DataLifeUnit?), int dataLifeValue = default(int), DataFetchFrequencyUnit? dataFetchFrequencyUnit = default(DataFetchFrequencyUnit?), int dataFetchFrequencyUnitValue = default(int), DataFetchType? dataFetchType = default(DataFetchType?), DataConsentStatus? status = default(DataConsentStatus?), DateTime createdAtUtc = default(DateTime), DateTime? approvedAtUtc = default(DateTime?), DateTime? rejectedAtUtc = default(DateTime?), ApplicationUser user = default(ApplicationUser), Organization organization = default(Organization), Organization requestedByOrg = default(Organization), DataProcessingAgreement agreement = default(DataProcessingAgreement), List<IdentityClaim> identityClaims = default(List<IdentityClaim>), List<DataConsentIdentifier> identifiers = default(List<DataConsentIdentifier>), List<DataConsentRequestedFinancialAccount> requestedFinancialAccounts = default(List<DataConsentRequestedFinancialAccount>), List<DataConsentRequestedDocument> requestedDocuments = default(List<DataConsentRequestedDocument>))
        {
            this.Id = id;
            this.UserId = userId;
            this.OrganizationId = organizationId;
            this.RequestedByOrgId = requestedByOrgId;
            this.TransactionId = transactionId;
            this.StartDateTime = startDateTime;
            this.ExpiryDateTime = expiryDateTime;
            this.Description = description;
            this.PurposeCode = purposeCode;
            this.PurposeLink = purposeLink;
            this.Location = location;
            this.AgreementId = agreementId;
            this.DataLifeUnit = dataLifeUnit;
            this.DataLifeValue = dataLifeValue;
            this.DataFetchFrequencyUnit = dataFetchFrequencyUnit;
            this.DataFetchFrequencyUnitValue = dataFetchFrequencyUnitValue;
            this.DataFetchType = dataFetchType;
            this.Status = status;
            this.CreatedAtUtc = createdAtUtc;
            this.ApprovedAtUtc = approvedAtUtc;
            this.RejectedAtUtc = rejectedAtUtc;
            this.User = user;
            this.Organization = organization;
            this.RequestedByOrg = requestedByOrg;
            this.Agreement = agreement;
            this.IdentityClaims = identityClaims;
            this.Identifiers = identifiers;
            this.RequestedFinancialAccounts = requestedFinancialAccounts;
            this.RequestedDocuments = requestedDocuments;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name = "userId", EmitDefaultValue = true)]
        public Guid? UserId { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationId
        /// </summary>
        [DataMember(Name = "organizationId", EmitDefaultValue = true)]
        public Guid? OrganizationId { get; set; }

        /// <summary>
        /// Gets or Sets RequestedByOrgId
        /// </summary>
        [DataMember(Name = "requestedByOrgId", EmitDefaultValue = false)]
        public Guid RequestedByOrgId { get; set; }

        /// <summary>
        /// Gets or Sets TransactionId
        /// </summary>
        [DataMember(Name = "transactionId", EmitDefaultValue = true)]
        public string TransactionId { get; set; }

        /// <summary>
        /// Gets or Sets StartDateTime
        /// </summary>
        [DataMember(Name = "startDateTime", EmitDefaultValue = true)]
        public DateTime? StartDateTime { get; set; }

        /// <summary>
        /// Gets or Sets ExpiryDateTime
        /// </summary>
        [DataMember(Name = "expiryDateTime", EmitDefaultValue = false)]
        public DateTime ExpiryDateTime { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets PurposeCode
        /// </summary>
        [DataMember(Name = "purposeCode", EmitDefaultValue = true)]
        public string PurposeCode { get; set; }

        /// <summary>
        /// Gets or Sets PurposeLink
        /// </summary>
        [DataMember(Name = "purposeLink", EmitDefaultValue = true)]
        public string PurposeLink { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name = "location", EmitDefaultValue = true)]
        public string Location { get; set; }

        /// <summary>
        /// Gets or Sets AgreementId
        /// </summary>
        [DataMember(Name = "agreementId", EmitDefaultValue = false)]
        public Guid AgreementId { get; set; }

        /// <summary>
        /// Gets or Sets DataLifeValue
        /// </summary>
        [DataMember(Name = "dataLifeValue", EmitDefaultValue = false)]
        public int DataLifeValue { get; set; }

        /// <summary>
        /// Gets or Sets DataFetchFrequencyUnitValue
        /// </summary>
        [DataMember(Name = "dataFetchFrequencyUnitValue", EmitDefaultValue = false)]
        public int DataFetchFrequencyUnitValue { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAtUtc
        /// </summary>
        [DataMember(Name = "createdAtUtc", EmitDefaultValue = false)]
        public DateTime CreatedAtUtc { get; set; }

        /// <summary>
        /// Gets or Sets ApprovedAtUtc
        /// </summary>
        [DataMember(Name = "approvedAtUtc", EmitDefaultValue = true)]
        public DateTime? ApprovedAtUtc { get; set; }

        /// <summary>
        /// Gets or Sets RejectedAtUtc
        /// </summary>
        [DataMember(Name = "rejectedAtUtc", EmitDefaultValue = true)]
        public DateTime? RejectedAtUtc { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "user", EmitDefaultValue = false)]
        public ApplicationUser User { get; set; }

        /// <summary>
        /// Gets or Sets Organization
        /// </summary>
        [DataMember(Name = "organization", EmitDefaultValue = false)]
        public Organization Organization { get; set; }

        /// <summary>
        /// Gets or Sets RequestedByOrg
        /// </summary>
        [DataMember(Name = "requestedByOrg", EmitDefaultValue = false)]
        public Organization RequestedByOrg { get; set; }

        /// <summary>
        /// Gets or Sets Agreement
        /// </summary>
        [DataMember(Name = "agreement", EmitDefaultValue = false)]
        public DataProcessingAgreement Agreement { get; set; }

        /// <summary>
        /// Gets or Sets IdentityClaims
        /// </summary>
        [DataMember(Name = "identityClaims", EmitDefaultValue = true)]
        public List<IdentityClaim> IdentityClaims { get; set; }

        /// <summary>
        /// Gets or Sets Identifiers
        /// </summary>
        [DataMember(Name = "identifiers", EmitDefaultValue = true)]
        public List<DataConsentIdentifier> Identifiers { get; set; }

        /// <summary>
        /// Gets or Sets RequestedFinancialAccounts
        /// </summary>
        [DataMember(Name = "requestedFinancialAccounts", EmitDefaultValue = true)]
        public List<DataConsentRequestedFinancialAccount> RequestedFinancialAccounts { get; set; }

        /// <summary>
        /// Gets or Sets RequestedDocuments
        /// </summary>
        [DataMember(Name = "requestedDocuments", EmitDefaultValue = true)]
        public List<DataConsentRequestedDocument> RequestedDocuments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DataConsent {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  RequestedByOrgId: ").Append(RequestedByOrgId).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  StartDateTime: ").Append(StartDateTime).Append("\n");
            sb.Append("  ExpiryDateTime: ").Append(ExpiryDateTime).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  PurposeCode: ").Append(PurposeCode).Append("\n");
            sb.Append("  PurposeLink: ").Append(PurposeLink).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  AgreementId: ").Append(AgreementId).Append("\n");
            sb.Append("  DataLifeUnit: ").Append(DataLifeUnit).Append("\n");
            sb.Append("  DataLifeValue: ").Append(DataLifeValue).Append("\n");
            sb.Append("  DataFetchFrequencyUnit: ").Append(DataFetchFrequencyUnit).Append("\n");
            sb.Append("  DataFetchFrequencyUnitValue: ").Append(DataFetchFrequencyUnitValue).Append("\n");
            sb.Append("  DataFetchType: ").Append(DataFetchType).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CreatedAtUtc: ").Append(CreatedAtUtc).Append("\n");
            sb.Append("  ApprovedAtUtc: ").Append(ApprovedAtUtc).Append("\n");
            sb.Append("  RejectedAtUtc: ").Append(RejectedAtUtc).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Organization: ").Append(Organization).Append("\n");
            sb.Append("  RequestedByOrg: ").Append(RequestedByOrg).Append("\n");
            sb.Append("  Agreement: ").Append(Agreement).Append("\n");
            sb.Append("  IdentityClaims: ").Append(IdentityClaims).Append("\n");
            sb.Append("  Identifiers: ").Append(Identifiers).Append("\n");
            sb.Append("  RequestedFinancialAccounts: ").Append(RequestedFinancialAccounts).Append("\n");
            sb.Append("  RequestedDocuments: ").Append(RequestedDocuments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DataConsent);
        }

        /// <summary>
        /// Returns true if DataConsent instances are equal
        /// </summary>
        /// <param name="input">Instance of DataConsent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataConsent input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.OrganizationId == input.OrganizationId ||
                    (this.OrganizationId != null &&
                    this.OrganizationId.Equals(input.OrganizationId))
                ) && 
                (
                    this.RequestedByOrgId == input.RequestedByOrgId ||
                    (this.RequestedByOrgId != null &&
                    this.RequestedByOrgId.Equals(input.RequestedByOrgId))
                ) && 
                (
                    this.TransactionId == input.TransactionId ||
                    (this.TransactionId != null &&
                    this.TransactionId.Equals(input.TransactionId))
                ) && 
                (
                    this.StartDateTime == input.StartDateTime ||
                    (this.StartDateTime != null &&
                    this.StartDateTime.Equals(input.StartDateTime))
                ) && 
                (
                    this.ExpiryDateTime == input.ExpiryDateTime ||
                    (this.ExpiryDateTime != null &&
                    this.ExpiryDateTime.Equals(input.ExpiryDateTime))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.PurposeCode == input.PurposeCode ||
                    (this.PurposeCode != null &&
                    this.PurposeCode.Equals(input.PurposeCode))
                ) && 
                (
                    this.PurposeLink == input.PurposeLink ||
                    (this.PurposeLink != null &&
                    this.PurposeLink.Equals(input.PurposeLink))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.AgreementId == input.AgreementId ||
                    (this.AgreementId != null &&
                    this.AgreementId.Equals(input.AgreementId))
                ) && 
                (
                    this.DataLifeUnit == input.DataLifeUnit ||
                    this.DataLifeUnit.Equals(input.DataLifeUnit)
                ) && 
                (
                    this.DataLifeValue == input.DataLifeValue ||
                    this.DataLifeValue.Equals(input.DataLifeValue)
                ) && 
                (
                    this.DataFetchFrequencyUnit == input.DataFetchFrequencyUnit ||
                    this.DataFetchFrequencyUnit.Equals(input.DataFetchFrequencyUnit)
                ) && 
                (
                    this.DataFetchFrequencyUnitValue == input.DataFetchFrequencyUnitValue ||
                    this.DataFetchFrequencyUnitValue.Equals(input.DataFetchFrequencyUnitValue)
                ) && 
                (
                    this.DataFetchType == input.DataFetchType ||
                    this.DataFetchType.Equals(input.DataFetchType)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.CreatedAtUtc == input.CreatedAtUtc ||
                    (this.CreatedAtUtc != null &&
                    this.CreatedAtUtc.Equals(input.CreatedAtUtc))
                ) && 
                (
                    this.ApprovedAtUtc == input.ApprovedAtUtc ||
                    (this.ApprovedAtUtc != null &&
                    this.ApprovedAtUtc.Equals(input.ApprovedAtUtc))
                ) && 
                (
                    this.RejectedAtUtc == input.RejectedAtUtc ||
                    (this.RejectedAtUtc != null &&
                    this.RejectedAtUtc.Equals(input.RejectedAtUtc))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.Organization == input.Organization ||
                    (this.Organization != null &&
                    this.Organization.Equals(input.Organization))
                ) && 
                (
                    this.RequestedByOrg == input.RequestedByOrg ||
                    (this.RequestedByOrg != null &&
                    this.RequestedByOrg.Equals(input.RequestedByOrg))
                ) && 
                (
                    this.Agreement == input.Agreement ||
                    (this.Agreement != null &&
                    this.Agreement.Equals(input.Agreement))
                ) && 
                (
                    this.IdentityClaims == input.IdentityClaims ||
                    this.IdentityClaims != null &&
                    input.IdentityClaims != null &&
                    this.IdentityClaims.SequenceEqual(input.IdentityClaims)
                ) && 
                (
                    this.Identifiers == input.Identifiers ||
                    this.Identifiers != null &&
                    input.Identifiers != null &&
                    this.Identifiers.SequenceEqual(input.Identifiers)
                ) && 
                (
                    this.RequestedFinancialAccounts == input.RequestedFinancialAccounts ||
                    this.RequestedFinancialAccounts != null &&
                    input.RequestedFinancialAccounts != null &&
                    this.RequestedFinancialAccounts.SequenceEqual(input.RequestedFinancialAccounts)
                ) && 
                (
                    this.RequestedDocuments == input.RequestedDocuments ||
                    this.RequestedDocuments != null &&
                    input.RequestedDocuments != null &&
                    this.RequestedDocuments.SequenceEqual(input.RequestedDocuments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.UserId != null)
                {
                    hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                }
                if (this.OrganizationId != null)
                {
                    hashCode = (hashCode * 59) + this.OrganizationId.GetHashCode();
                }
                if (this.RequestedByOrgId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestedByOrgId.GetHashCode();
                }
                if (this.TransactionId != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionId.GetHashCode();
                }
                if (this.StartDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.StartDateTime.GetHashCode();
                }
                if (this.ExpiryDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.ExpiryDateTime.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.PurposeCode != null)
                {
                    hashCode = (hashCode * 59) + this.PurposeCode.GetHashCode();
                }
                if (this.PurposeLink != null)
                {
                    hashCode = (hashCode * 59) + this.PurposeLink.GetHashCode();
                }
                if (this.Location != null)
                {
                    hashCode = (hashCode * 59) + this.Location.GetHashCode();
                }
                if (this.AgreementId != null)
                {
                    hashCode = (hashCode * 59) + this.AgreementId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DataLifeUnit.GetHashCode();
                hashCode = (hashCode * 59) + this.DataLifeValue.GetHashCode();
                hashCode = (hashCode * 59) + this.DataFetchFrequencyUnit.GetHashCode();
                hashCode = (hashCode * 59) + this.DataFetchFrequencyUnitValue.GetHashCode();
                hashCode = (hashCode * 59) + this.DataFetchType.GetHashCode();
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.CreatedAtUtc != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAtUtc.GetHashCode();
                }
                if (this.ApprovedAtUtc != null)
                {
                    hashCode = (hashCode * 59) + this.ApprovedAtUtc.GetHashCode();
                }
                if (this.RejectedAtUtc != null)
                {
                    hashCode = (hashCode * 59) + this.RejectedAtUtc.GetHashCode();
                }
                if (this.User != null)
                {
                    hashCode = (hashCode * 59) + this.User.GetHashCode();
                }
                if (this.Organization != null)
                {
                    hashCode = (hashCode * 59) + this.Organization.GetHashCode();
                }
                if (this.RequestedByOrg != null)
                {
                    hashCode = (hashCode * 59) + this.RequestedByOrg.GetHashCode();
                }
                if (this.Agreement != null)
                {
                    hashCode = (hashCode * 59) + this.Agreement.GetHashCode();
                }
                if (this.IdentityClaims != null)
                {
                    hashCode = (hashCode * 59) + this.IdentityClaims.GetHashCode();
                }
                if (this.Identifiers != null)
                {
                    hashCode = (hashCode * 59) + this.Identifiers.GetHashCode();
                }
                if (this.RequestedFinancialAccounts != null)
                {
                    hashCode = (hashCode * 59) + this.RequestedFinancialAccounts.GetHashCode();
                }
                if (this.RequestedDocuments != null)
                {
                    hashCode = (hashCode * 59) + this.RequestedDocuments.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
