/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = MyDataMyConsent.Client.OpenAPIDateConverter;

namespace MyDataMyConsent.Models
{
    /// <summary>
    /// JsonSchema
    /// </summary>
    [DataContract(Name = "JsonSchema")]
    public partial class JsonSchema : IEquatable<JsonSchema>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JsonSchema" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public JsonSchema()
        {
        }

        /// <summary>
        /// Gets or Sets Keywords
        /// </summary>
        [DataMember(Name = "keywords", EmitDefaultValue = true)]
        public List<Object> Keywords { get; private set; }

        /// <summary>
        /// Returns false as Keywords should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeKeywords()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets OtherData
        /// </summary>
        [DataMember(Name = "otherData", EmitDefaultValue = true)]
        public Dictionary<string, Object> OtherData { get; private set; }

        /// <summary>
        /// Returns false as OtherData should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOtherData()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JsonSchema {\n");
            sb.Append("  Keywords: ").Append(Keywords).Append("\n");
            sb.Append("  OtherData: ").Append(OtherData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JsonSchema);
        }

        /// <summary>
        /// Returns true if JsonSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of JsonSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JsonSchema input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Keywords == input.Keywords ||
                    this.Keywords != null &&
                    input.Keywords != null &&
                    this.Keywords.SequenceEqual(input.Keywords)
                ) && 
                (
                    this.OtherData == input.OtherData ||
                    this.OtherData != null &&
                    input.OtherData != null &&
                    this.OtherData.SequenceEqual(input.OtherData)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Keywords != null)
                {
                    hashCode = (hashCode * 59) + this.Keywords.GetHashCode();
                }
                if (this.OtherData != null)
                {
                    hashCode = (hashCode * 59) + this.OtherData.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
