/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = MyDataMyConsent.Client.OpenAPIDateConverter;

namespace MyDataMyConsent.Models
{
    /// <summary>
    /// DocumentIssueRequest
    /// </summary>
    [DataContract(Name = "DocumentIssueRequest")]
    public partial class DocumentIssueRequest : IEquatable<DocumentIssueRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentIssueRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DocumentIssueRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentIssueRequest" /> class.
        /// </summary>
        /// <param name="documentTypeId">documentTypeId (required).</param>
        /// <param name="identifier">identifier (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="description">description (required).</param>
        /// <param name="receiver">receiver (required).</param>
        /// <param name="expiresAtUtc">expiresAtUtc.</param>
        /// <param name="base64PDFDocument">base64PDFDocument (required).</param>
        /// <param name="metadata">metadata.</param>
        public DocumentIssueRequest(string documentTypeId = default(string), string identifier = default(string), string name = default(string), string description = default(string), Receiver receiver = default(Receiver), string expiresAtUtc = default(string), string base64PDFDocument = default(string), Object metadata = default(Object))
        {
            // to ensure "documentTypeId" is required (not null)
            if (documentTypeId == null) {
                throw new ArgumentNullException("documentTypeId is a required property for DocumentIssueRequest and cannot be null");
            }
            this.DocumentTypeId = documentTypeId;
            // to ensure "identifier" is required (not null)
            if (identifier == null) {
                throw new ArgumentNullException("identifier is a required property for DocumentIssueRequest and cannot be null");
            }
            this.Identifier = identifier;
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for DocumentIssueRequest and cannot be null");
            }
            this.Name = name;
            // to ensure "description" is required (not null)
            if (description == null) {
                throw new ArgumentNullException("description is a required property for DocumentIssueRequest and cannot be null");
            }
            this.Description = description;
            // to ensure "receiver" is required (not null)
            if (receiver == null) {
                throw new ArgumentNullException("receiver is a required property for DocumentIssueRequest and cannot be null");
            }
            this.Receiver = receiver;
            // to ensure "base64PDFDocument" is required (not null)
            if (base64PDFDocument == null) {
                throw new ArgumentNullException("base64PDFDocument is a required property for DocumentIssueRequest and cannot be null");
            }
            this.Base64PDFDocument = base64PDFDocument;
            this.ExpiresAtUtc = expiresAtUtc;
            this.Metadata = metadata;
        }

        /// <summary>
        /// Gets or Sets DocumentTypeId
        /// </summary>
        [DataMember(Name = "documentTypeId", IsRequired = true, EmitDefaultValue = false)]
        public string DocumentTypeId { get; set; }

        /// <summary>
        /// Gets or Sets Identifier
        /// </summary>
        [DataMember(Name = "identifier", IsRequired = true, EmitDefaultValue = false)]
        public string Identifier { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Receiver
        /// </summary>
        [DataMember(Name = "receiver", IsRequired = true, EmitDefaultValue = false)]
        public Receiver Receiver { get; set; }

        /// <summary>
        /// Gets or Sets ExpiresAtUtc
        /// </summary>
        [DataMember(Name = "expiresAtUtc", EmitDefaultValue = true)]
        public string ExpiresAtUtc { get; set; }

        /// <summary>
        /// Gets or Sets Base64PDFDocument
        /// </summary>
        [DataMember(Name = "base64PDFDocument", IsRequired = true, EmitDefaultValue = false)]
        public string Base64PDFDocument { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", EmitDefaultValue = true)]
        public Object Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DocumentIssueRequest {\n");
            sb.Append("  DocumentTypeId: ").Append(DocumentTypeId).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Receiver: ").Append(Receiver).Append("\n");
            sb.Append("  ExpiresAtUtc: ").Append(ExpiresAtUtc).Append("\n");
            sb.Append("  Base64PDFDocument: ").Append(Base64PDFDocument).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentIssueRequest);
        }

        /// <summary>
        /// Returns true if DocumentIssueRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentIssueRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentIssueRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DocumentTypeId == input.DocumentTypeId ||
                    (this.DocumentTypeId != null &&
                    this.DocumentTypeId.Equals(input.DocumentTypeId))
                ) && 
                (
                    this.Identifier == input.Identifier ||
                    (this.Identifier != null &&
                    this.Identifier.Equals(input.Identifier))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Receiver == input.Receiver ||
                    (this.Receiver != null &&
                    this.Receiver.Equals(input.Receiver))
                ) && 
                (
                    this.ExpiresAtUtc == input.ExpiresAtUtc ||
                    (this.ExpiresAtUtc != null &&
                    this.ExpiresAtUtc.Equals(input.ExpiresAtUtc))
                ) && 
                (
                    this.Base64PDFDocument == input.Base64PDFDocument ||
                    (this.Base64PDFDocument != null &&
                    this.Base64PDFDocument.Equals(input.Base64PDFDocument))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DocumentTypeId != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentTypeId.GetHashCode();
                }
                if (this.Identifier != null)
                {
                    hashCode = (hashCode * 59) + this.Identifier.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Receiver != null)
                {
                    hashCode = (hashCode * 59) + this.Receiver.GetHashCode();
                }
                if (this.ExpiresAtUtc != null)
                {
                    hashCode = (hashCode * 59) + this.ExpiresAtUtc.GetHashCode();
                }
                if (this.Base64PDFDocument != null)
                {
                    hashCode = (hashCode * 59) + this.Base64PDFDocument.GetHashCode();
                }
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
