/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = MyDataMyConsent.Client.OpenAPIDateConverter;

namespace MyDataMyConsent.Models
{
    /// <summary>
    /// Defines ErrorType
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum ErrorType
    {
        /// <summary>
        /// Enum InvalidAccessToken for value: InvalidAccessToken
        /// </summary>
        [EnumMember(Value = "InvalidAccessToken")]
        InvalidAccessToken = 1,

        /// <summary>
        /// Enum InvalidRefreshToken for value: InvalidRefreshToken
        /// </summary>
        [EnumMember(Value = "InvalidRefreshToken")]
        InvalidRefreshToken = 2,

        /// <summary>
        /// Enum InsufficientPermission for value: InsufficientPermission
        /// </summary>
        [EnumMember(Value = "InsufficientPermission")]
        InsufficientPermission = 3,

        /// <summary>
        /// Enum InternalServerError for value: InternalServerError
        /// </summary>
        [EnumMember(Value = "InternalServerError")]
        InternalServerError = 4,

        /// <summary>
        /// Enum BadRequest for value: BadRequest
        /// </summary>
        [EnumMember(Value = "BadRequest")]
        BadRequest = 5,

        /// <summary>
        /// Enum NotFound for value: NotFound
        /// </summary>
        [EnumMember(Value = "NotFound")]
        NotFound = 6,

        /// <summary>
        /// Enum InvalidOrganization for value: InvalidOrganization
        /// </summary>
        [EnumMember(Value = "InvalidOrganization")]
        InvalidOrganization = 7,

        /// <summary>
        /// Enum InvalidFileUploadType for value: InvalidFileUploadType
        /// </summary>
        [EnumMember(Value = "InvalidFileUploadType")]
        InvalidFileUploadType = 8

    }

}
