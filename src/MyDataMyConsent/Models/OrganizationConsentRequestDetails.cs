/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = MyDataMyConsent.Client.OpenAPIDateConverter;

namespace MyDataMyConsent.Models
{
    /// <summary>
    /// OrganizationConsentRequestDetails : Organization consent request details.
    /// </summary>
    [DataContract(Name = "OrganizationConsentRequestDetails")]
    public partial class OrganizationConsentRequestDetails : IEquatable<OrganizationConsentRequestDetails>
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public DataConsentStatus Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationConsentRequestDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrganizationConsentRequestDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationConsentRequestDetails" /> class.
        /// </summary>
        /// <param name="receiver">Name of request receiver organization. (required).</param>
        /// <param name="id">Consent request id (required).</param>
        /// <param name="templateId">Consent request template id.</param>
        /// <param name="consentId">Consent id.</param>
        /// <param name="title">Consent request title. (required).</param>
        /// <param name="description">Consent request description. (required).</param>
        /// <param name="purpose">Consent request purpose..</param>
        /// <param name="status">status (required).</param>
        /// <param name="transactionId">Transaction id.</param>
        /// <param name="createdAtUtc">Request creation datetime in UTC timezone (required).</param>
        /// <param name="expiresAtUtc">Request expiration datetime in UTC timezone (required).</param>
        public OrganizationConsentRequestDetails(string receiver = default(string), string id = default(string), string templateId = default(string), string consentId = default(string), string title = default(string), string description = default(string), string purpose = default(string), DataConsentStatus status = default(DataConsentStatus), string transactionId = default(string), DateTime createdAtUtc = default(DateTime), DateTime expiresAtUtc = default(DateTime))
        {
            // to ensure "receiver" is required (not null)
            if (receiver == null)
            {
                throw new ArgumentNullException("receiver is a required property for OrganizationConsentRequestDetails and cannot be null");
            }
            this.Receiver = receiver;
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for OrganizationConsentRequestDetails and cannot be null");
            }
            this.Id = id;
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new ArgumentNullException("title is a required property for OrganizationConsentRequestDetails and cannot be null");
            }
            this.Title = title;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for OrganizationConsentRequestDetails and cannot be null");
            }
            this.Description = description;
            this.Status = status;
            this.CreatedAtUtc = createdAtUtc;
            this.ExpiresAtUtc = expiresAtUtc;
            this.TemplateId = templateId;
            this.ConsentId = consentId;
            this.Purpose = purpose;
            this.TransactionId = transactionId;
        }

        /// <summary>
        /// Name of request receiver organization.
        /// </summary>
        /// <value>Name of request receiver organization.</value>
        [DataMember(Name = "receiver", IsRequired = true, EmitDefaultValue = true)]
        public string Receiver { get; set; }

        /// <summary>
        /// Consent request id
        /// </summary>
        /// <value>Consent request id</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Consent request template id
        /// </summary>
        /// <value>Consent request template id</value>
        [DataMember(Name = "templateId", EmitDefaultValue = false)]
        public string TemplateId { get; set; }

        /// <summary>
        /// Consent id
        /// </summary>
        /// <value>Consent id</value>
        [DataMember(Name = "consentId", EmitDefaultValue = false)]
        public string ConsentId { get; set; }

        /// <summary>
        /// Consent request title.
        /// </summary>
        /// <value>Consent request title.</value>
        [DataMember(Name = "title", IsRequired = true, EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// Consent request description.
        /// </summary>
        /// <value>Consent request description.</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Consent request purpose.
        /// </summary>
        /// <value>Consent request purpose.</value>
        [DataMember(Name = "purpose", EmitDefaultValue = false)]
        public string Purpose { get; set; }

        /// <summary>
        /// Transaction id
        /// </summary>
        /// <value>Transaction id</value>
        [DataMember(Name = "transactionId", EmitDefaultValue = false)]
        public string TransactionId { get; set; }

        /// <summary>
        /// Request creation datetime in UTC timezone
        /// </summary>
        /// <value>Request creation datetime in UTC timezone</value>
        [DataMember(Name = "createdAtUtc", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAtUtc { get; set; }

        /// <summary>
        /// Request expiration datetime in UTC timezone
        /// </summary>
        /// <value>Request expiration datetime in UTC timezone</value>
        [DataMember(Name = "expiresAtUtc", IsRequired = true, EmitDefaultValue = true)]
        public DateTime ExpiresAtUtc { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrganizationConsentRequestDetails {\n");
            sb.Append("  Receiver: ").Append(Receiver).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("  ConsentId: ").Append(ConsentId).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Purpose: ").Append(Purpose).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  CreatedAtUtc: ").Append(CreatedAtUtc).Append("\n");
            sb.Append("  ExpiresAtUtc: ").Append(ExpiresAtUtc).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrganizationConsentRequestDetails);
        }

        /// <summary>
        /// Returns true if OrganizationConsentRequestDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of OrganizationConsentRequestDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrganizationConsentRequestDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Receiver == input.Receiver ||
                    (this.Receiver != null &&
                    this.Receiver.Equals(input.Receiver))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.TemplateId == input.TemplateId ||
                    (this.TemplateId != null &&
                    this.TemplateId.Equals(input.TemplateId))
                ) && 
                (
                    this.ConsentId == input.ConsentId ||
                    (this.ConsentId != null &&
                    this.ConsentId.Equals(input.ConsentId))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Purpose == input.Purpose ||
                    (this.Purpose != null &&
                    this.Purpose.Equals(input.Purpose))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.TransactionId == input.TransactionId ||
                    (this.TransactionId != null &&
                    this.TransactionId.Equals(input.TransactionId))
                ) && 
                (
                    this.CreatedAtUtc == input.CreatedAtUtc ||
                    (this.CreatedAtUtc != null &&
                    this.CreatedAtUtc.Equals(input.CreatedAtUtc))
                ) && 
                (
                    this.ExpiresAtUtc == input.ExpiresAtUtc ||
                    (this.ExpiresAtUtc != null &&
                    this.ExpiresAtUtc.Equals(input.ExpiresAtUtc))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Receiver != null)
                {
                    hashCode = (hashCode * 59) + this.Receiver.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.TemplateId != null)
                {
                    hashCode = (hashCode * 59) + this.TemplateId.GetHashCode();
                }
                if (this.ConsentId != null)
                {
                    hashCode = (hashCode * 59) + this.ConsentId.GetHashCode();
                }
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Purpose != null)
                {
                    hashCode = (hashCode * 59) + this.Purpose.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.TransactionId != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionId.GetHashCode();
                }
                if (this.CreatedAtUtc != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAtUtc.GetHashCode();
                }
                if (this.ExpiresAtUtc != null)
                {
                    hashCode = (hashCode * 59) + this.ExpiresAtUtc.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
