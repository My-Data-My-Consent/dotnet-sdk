/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = MyDataMyConsent.Client.OpenAPIDateConverter;

namespace MyDataMyConsent.Models
{
    /// <summary>
    /// Identifier details.
    /// </summary>
    [DataContract(Name = "Identifier")]
    public partial class Identifier : IEquatable<Identifier>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Identifier" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Identifier() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Identifier" /> class.
        /// </summary>
        /// <param name="key">Identifier key. EMAIL, MOBILE_NUMBER, etc. (required).</param>
        /// <param name="name">Identifier name. Email, Mobile Number, etc. (required).</param>
        /// <param name="description">Identifier description. User&#39;s email, User&#39;s mobile number, etc. (required).</param>
        /// <param name="exampleValue">Example value. example@email.com, +919090909090, etc. (required).</param>
        public Identifier(string key = default(string), string name = default(string), string description = default(string), string exampleValue = default(string))
        {
            // to ensure "key" is required (not null)
            if (key == null)
            {
                throw new ArgumentNullException("key is a required property for Identifier and cannot be null");
            }
            this.Key = key;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Identifier and cannot be null");
            }
            this.Name = name;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for Identifier and cannot be null");
            }
            this.Description = description;
            // to ensure "exampleValue" is required (not null)
            if (exampleValue == null)
            {
                throw new ArgumentNullException("exampleValue is a required property for Identifier and cannot be null");
            }
            this.ExampleValue = exampleValue;
        }

        /// <summary>
        /// Identifier key. EMAIL, MOBILE_NUMBER, etc.
        /// </summary>
        /// <value>Identifier key. EMAIL, MOBILE_NUMBER, etc.</value>
        [DataMember(Name = "key", IsRequired = true, EmitDefaultValue = true)]
        public string Key { get; set; }

        /// <summary>
        /// Identifier name. Email, Mobile Number, etc.
        /// </summary>
        /// <value>Identifier name. Email, Mobile Number, etc.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Identifier description. User&#39;s email, User&#39;s mobile number, etc.
        /// </summary>
        /// <value>Identifier description. User&#39;s email, User&#39;s mobile number, etc.</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Example value. example@email.com, +919090909090, etc.
        /// </summary>
        /// <value>Example value. example@email.com, +919090909090, etc.</value>
        [DataMember(Name = "example_value", IsRequired = true, EmitDefaultValue = true)]
        public string ExampleValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Identifier {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ExampleValue: ").Append(ExampleValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Identifier);
        }

        /// <summary>
        /// Returns true if Identifier instances are equal
        /// </summary>
        /// <param name="input">Instance of Identifier to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Identifier input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ExampleValue == input.ExampleValue ||
                    (this.ExampleValue != null &&
                    this.ExampleValue.Equals(input.ExampleValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Key != null)
                {
                    hashCode = (hashCode * 59) + this.Key.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.ExampleValue != null)
                {
                    hashCode = (hashCode * 59) + this.ExampleValue.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
