/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = MyDataMyConsent.Client.OpenAPIDateConverter;

namespace MyDataMyConsent.Models
{
    /// <summary>
    /// OrganizationDataConsentInfoDto
    /// </summary>
    [DataContract(Name = "OrganizationDataConsentInfoDto")]
    public partial class OrganizationDataConsentInfoDto : IEquatable<OrganizationDataConsentInfoDto>
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public DataConsentStatus? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationDataConsentInfoDto" /> class.
        /// </summary>
        /// <param name="consentRequestId">consentRequestId.</param>
        /// <param name="userId">userId.</param>
        /// <param name="consentTemplateId">consentTemplateId.</param>
        /// <param name="consentPurpose">consentPurpose.</param>
        /// <param name="consentDescription">consentDescription.</param>
        /// <param name="status">status.</param>
        /// <param name="createdAtUtc">createdAtUtc.</param>
        /// <param name="organizationId">organizationId.</param>
        /// <param name="consentSentToOrganization">consentSentToOrganization.</param>
        public OrganizationDataConsentInfoDto(Guid consentRequestId = default(Guid), Guid? userId = default(Guid?), Guid? consentTemplateId = default(Guid?), string consentPurpose = default(string), string consentDescription = default(string), DataConsentStatus? status = default(DataConsentStatus?), DateTime createdAtUtc = default(DateTime), Guid organizationId = default(Guid), string consentSentToOrganization = default(string))
        {
            this.ConsentRequestId = consentRequestId;
            this.UserId = userId;
            this.ConsentTemplateId = consentTemplateId;
            this.ConsentPurpose = consentPurpose;
            this.ConsentDescription = consentDescription;
            this.Status = status;
            this.CreatedAtUtc = createdAtUtc;
            this.OrganizationId = organizationId;
            this.ConsentSentToOrganization = consentSentToOrganization;
        }

        /// <summary>
        /// Gets or Sets ConsentRequestId
        /// </summary>
        [DataMember(Name = "consentRequestId", EmitDefaultValue = false)]
        public Guid ConsentRequestId { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name = "userId", EmitDefaultValue = true)]
        public Guid? UserId { get; set; }

        /// <summary>
        /// Gets or Sets ConsentTemplateId
        /// </summary>
        [DataMember(Name = "consentTemplateId", EmitDefaultValue = true)]
        public Guid? ConsentTemplateId { get; set; }

        /// <summary>
        /// Gets or Sets ConsentPurpose
        /// </summary>
        [DataMember(Name = "consentPurpose", EmitDefaultValue = true)]
        public string ConsentPurpose { get; set; }

        /// <summary>
        /// Gets or Sets ConsentDescription
        /// </summary>
        [DataMember(Name = "consentDescription", EmitDefaultValue = true)]
        public string ConsentDescription { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAtUtc
        /// </summary>
        [DataMember(Name = "createdAtUtc", EmitDefaultValue = false)]
        public DateTime CreatedAtUtc { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationId
        /// </summary>
        [DataMember(Name = "organizationId", EmitDefaultValue = false)]
        public Guid OrganizationId { get; set; }

        /// <summary>
        /// Gets or Sets ConsentSentToOrganization
        /// </summary>
        [DataMember(Name = "consentSentToOrganization", EmitDefaultValue = true)]
        public string ConsentSentToOrganization { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrganizationDataConsentInfoDto {\n");
            sb.Append("  ConsentRequestId: ").Append(ConsentRequestId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  ConsentTemplateId: ").Append(ConsentTemplateId).Append("\n");
            sb.Append("  ConsentPurpose: ").Append(ConsentPurpose).Append("\n");
            sb.Append("  ConsentDescription: ").Append(ConsentDescription).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CreatedAtUtc: ").Append(CreatedAtUtc).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  ConsentSentToOrganization: ").Append(ConsentSentToOrganization).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrganizationDataConsentInfoDto);
        }

        /// <summary>
        /// Returns true if OrganizationDataConsentInfoDto instances are equal
        /// </summary>
        /// <param name="input">Instance of OrganizationDataConsentInfoDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrganizationDataConsentInfoDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ConsentRequestId == input.ConsentRequestId ||
                    (this.ConsentRequestId != null &&
                    this.ConsentRequestId.Equals(input.ConsentRequestId))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.ConsentTemplateId == input.ConsentTemplateId ||
                    (this.ConsentTemplateId != null &&
                    this.ConsentTemplateId.Equals(input.ConsentTemplateId))
                ) && 
                (
                    this.ConsentPurpose == input.ConsentPurpose ||
                    (this.ConsentPurpose != null &&
                    this.ConsentPurpose.Equals(input.ConsentPurpose))
                ) && 
                (
                    this.ConsentDescription == input.ConsentDescription ||
                    (this.ConsentDescription != null &&
                    this.ConsentDescription.Equals(input.ConsentDescription))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.CreatedAtUtc == input.CreatedAtUtc ||
                    (this.CreatedAtUtc != null &&
                    this.CreatedAtUtc.Equals(input.CreatedAtUtc))
                ) && 
                (
                    this.OrganizationId == input.OrganizationId ||
                    (this.OrganizationId != null &&
                    this.OrganizationId.Equals(input.OrganizationId))
                ) && 
                (
                    this.ConsentSentToOrganization == input.ConsentSentToOrganization ||
                    (this.ConsentSentToOrganization != null &&
                    this.ConsentSentToOrganization.Equals(input.ConsentSentToOrganization))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConsentRequestId != null)
                {
                    hashCode = (hashCode * 59) + this.ConsentRequestId.GetHashCode();
                }
                if (this.UserId != null)
                {
                    hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                }
                if (this.ConsentTemplateId != null)
                {
                    hashCode = (hashCode * 59) + this.ConsentTemplateId.GetHashCode();
                }
                if (this.ConsentPurpose != null)
                {
                    hashCode = (hashCode * 59) + this.ConsentPurpose.GetHashCode();
                }
                if (this.ConsentDescription != null)
                {
                    hashCode = (hashCode * 59) + this.ConsentDescription.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.CreatedAtUtc != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAtUtc.GetHashCode();
                }
                if (this.OrganizationId != null)
                {
                    hashCode = (hashCode * 59) + this.OrganizationId.GetHashCode();
                }
                if (this.ConsentSentToOrganization != null)
                {
                    hashCode = (hashCode * 59) + this.ConsentSentToOrganization.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
