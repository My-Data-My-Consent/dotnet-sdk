/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = MyDataMyConsent.Client.OpenAPIDateConverter;

namespace MyDataMyConsent.Models
{
    /// <summary>
    /// DataConsentRequest
    /// </summary>
    [DataContract(Name = "DataConsentRequest")]
    public partial class DataConsentRequest : IEquatable<DataConsentRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DataConsentRequest" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="templateId">templateId.</param>
        /// <param name="requestedAtUtc">requestedAtUtc.</param>
        /// <param name="requestExpiredAtUtc">requestExpiredAtUtc.</param>
        /// <param name="transactionId">transactionId.</param>
        public DataConsentRequest(Guid id = default(Guid), Guid? templateId = default(Guid?), DateTime requestedAtUtc = default(DateTime), DateTime requestExpiredAtUtc = default(DateTime), string transactionId = default(string))
        {
            this.Id = id;
            this.TemplateId = templateId;
            this.RequestedAtUtc = requestedAtUtc;
            this.RequestExpiredAtUtc = requestExpiredAtUtc;
            this.TransactionId = transactionId;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets TemplateId
        /// </summary>
        [DataMember(Name = "templateId", EmitDefaultValue = true)]
        public Guid? TemplateId { get; set; }

        /// <summary>
        /// Gets or Sets RequestedAtUtc
        /// </summary>
        [DataMember(Name = "requestedAtUtc", EmitDefaultValue = false)]
        public DateTime RequestedAtUtc { get; set; }

        /// <summary>
        /// Gets or Sets RequestExpiredAtUtc
        /// </summary>
        [DataMember(Name = "requestExpiredAtUtc", EmitDefaultValue = false)]
        public DateTime RequestExpiredAtUtc { get; set; }

        /// <summary>
        /// Gets or Sets TransactionId
        /// </summary>
        [DataMember(Name = "transactionId", EmitDefaultValue = true)]
        public string TransactionId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DataConsentRequest {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("  RequestedAtUtc: ").Append(RequestedAtUtc).Append("\n");
            sb.Append("  RequestExpiredAtUtc: ").Append(RequestExpiredAtUtc).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DataConsentRequest);
        }

        /// <summary>
        /// Returns true if DataConsentRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of DataConsentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataConsentRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.TemplateId == input.TemplateId ||
                    (this.TemplateId != null &&
                    this.TemplateId.Equals(input.TemplateId))
                ) && 
                (
                    this.RequestedAtUtc == input.RequestedAtUtc ||
                    (this.RequestedAtUtc != null &&
                    this.RequestedAtUtc.Equals(input.RequestedAtUtc))
                ) && 
                (
                    this.RequestExpiredAtUtc == input.RequestExpiredAtUtc ||
                    (this.RequestExpiredAtUtc != null &&
                    this.RequestExpiredAtUtc.Equals(input.RequestExpiredAtUtc))
                ) && 
                (
                    this.TransactionId == input.TransactionId ||
                    (this.TransactionId != null &&
                    this.TransactionId.Equals(input.TransactionId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.TemplateId != null)
                {
                    hashCode = (hashCode * 59) + this.TemplateId.GetHashCode();
                }
                if (this.RequestedAtUtc != null)
                {
                    hashCode = (hashCode * 59) + this.RequestedAtUtc.GetHashCode();
                }
                if (this.RequestExpiredAtUtc != null)
                {
                    hashCode = (hashCode * 59) + this.RequestExpiredAtUtc.GetHashCode();
                }
                if (this.TransactionId != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionId.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
