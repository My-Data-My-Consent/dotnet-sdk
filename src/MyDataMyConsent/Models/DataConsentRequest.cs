/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = MyDataMyConsent.Client.OpenAPIDateConverter;

namespace MyDataMyConsent.Models
{
    /// <summary>
    /// Data consent request details.
    /// </summary>
    [DataContract(Name = "DataConsentRequest")]
    public partial class DataConsentRequest : IEquatable<DataConsentRequest>
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = false)]
        public DataConsentStatus Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DataConsentRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DataConsentRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DataConsentRequest" /> class.
        /// </summary>
        /// <param name="id">Data consent request id. (required).</param>
        /// <param name="templateId">Data consent template id..</param>
        /// <param name="consentId">Data consent id..</param>
        /// <param name="title">Data consent title. (required).</param>
        /// <param name="description">Data consent description. (required).</param>
        /// <param name="purpose">Data consent purpose..</param>
        /// <param name="dataLife">dataLife.</param>
        /// <param name="collectables">List of supported collectables. (required).</param>
        /// <param name="receiver">receiver (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="createdAtUtc">Request creation datetime in UTC timezone. (required).</param>
        /// <param name="expiresAtUtc">Request expiration datetime in UTC timezone. (required).</param>
        /// <param name="approvedAtUtc">Request approval datetime in UTC timezone..</param>
        /// <param name="dataAccessExpiresAtUtc">Data access expiration datetime in UTC timezone..</param>
        /// <param name="rejectedAtUtc">Request rejection datetime in UTC timezone..</param>
        /// <param name="revokedAtUtc">Request revocation datetime in UTC timezone..</param>
        public DataConsentRequest(Guid id = default(Guid), Guid? templateId = default(Guid?), Guid? consentId = default(Guid?), string title = default(string), string description = default(string), string purpose = default(string), Life dataLife = default(Life), List<CollectibleTypes> collectables = default(List<CollectibleTypes>), ConsentRequestReceiver receiver = default(ConsentRequestReceiver), DataConsentStatus status = default(DataConsentStatus), DateTime createdAtUtc = default(DateTime), DateTime expiresAtUtc = default(DateTime), DateTime? approvedAtUtc = default(DateTime?), DateTime? dataAccessExpiresAtUtc = default(DateTime?), DateTime? rejectedAtUtc = default(DateTime?), DateTime? revokedAtUtc = default(DateTime?))
        {
            this.Id = id;
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new ArgumentNullException("title is a required property for DataConsentRequest and cannot be null");
            }
            this.Title = title;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for DataConsentRequest and cannot be null");
            }
            this.Description = description;
            // to ensure "collectables" is required (not null)
            if (collectables == null)
            {
                throw new ArgumentNullException("collectables is a required property for DataConsentRequest and cannot be null");
            }
            this.Collectables = collectables;
            // to ensure "receiver" is required (not null)
            if (receiver == null)
            {
                throw new ArgumentNullException("receiver is a required property for DataConsentRequest and cannot be null");
            }
            this.Receiver = receiver;
            this.Status = status;
            this.CreatedAtUtc = createdAtUtc;
            this.ExpiresAtUtc = expiresAtUtc;
            this.TemplateId = templateId;
            this.ConsentId = consentId;
            this.Purpose = purpose;
            this.DataLife = dataLife;
            this.ApprovedAtUtc = approvedAtUtc;
            this.DataAccessExpiresAtUtc = dataAccessExpiresAtUtc;
            this.RejectedAtUtc = rejectedAtUtc;
            this.RevokedAtUtc = revokedAtUtc;
        }

        /// <summary>
        /// Data consent request id.
        /// </summary>
        /// <value>Data consent request id.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Data consent template id.
        /// </summary>
        /// <value>Data consent template id.</value>
        [DataMember(Name = "templateId", EmitDefaultValue = true)]
        public Guid? TemplateId { get; set; }

        /// <summary>
        /// Data consent id.
        /// </summary>
        /// <value>Data consent id.</value>
        [DataMember(Name = "consentId", EmitDefaultValue = true)]
        public Guid? ConsentId { get; set; }

        /// <summary>
        /// Data consent title.
        /// </summary>
        /// <value>Data consent title.</value>
        [DataMember(Name = "title", IsRequired = true, EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// Data consent description.
        /// </summary>
        /// <value>Data consent description.</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Data consent purpose.
        /// </summary>
        /// <value>Data consent purpose.</value>
        [DataMember(Name = "purpose", EmitDefaultValue = true)]
        public string Purpose { get; set; }

        /// <summary>
        /// Gets or Sets DataLife
        /// </summary>
        [DataMember(Name = "dataLife", EmitDefaultValue = false)]
        public Life DataLife { get; set; }

        /// <summary>
        /// List of supported collectables.
        /// </summary>
        /// <value>List of supported collectables.</value>
        [DataMember(Name = "collectables", IsRequired = true, EmitDefaultValue = false)]
        public List<CollectibleTypes> Collectables { get; set; }

        /// <summary>
        /// Gets or Sets Receiver
        /// </summary>
        [DataMember(Name = "receiver", IsRequired = true, EmitDefaultValue = false)]
        public ConsentRequestReceiver Receiver { get; set; }

        /// <summary>
        /// Request creation datetime in UTC timezone.
        /// </summary>
        /// <value>Request creation datetime in UTC timezone.</value>
        [DataMember(Name = "createdAtUtc", IsRequired = true, EmitDefaultValue = false)]
        public DateTime CreatedAtUtc { get; set; }

        /// <summary>
        /// Request expiration datetime in UTC timezone.
        /// </summary>
        /// <value>Request expiration datetime in UTC timezone.</value>
        [DataMember(Name = "expiresAtUtc", IsRequired = true, EmitDefaultValue = false)]
        public DateTime ExpiresAtUtc { get; set; }

        /// <summary>
        /// Request approval datetime in UTC timezone.
        /// </summary>
        /// <value>Request approval datetime in UTC timezone.</value>
        [DataMember(Name = "approvedAtUtc", EmitDefaultValue = true)]
        public DateTime? ApprovedAtUtc { get; set; }

        /// <summary>
        /// Data access expiration datetime in UTC timezone.
        /// </summary>
        /// <value>Data access expiration datetime in UTC timezone.</value>
        [DataMember(Name = "dataAccessExpiresAtUtc", EmitDefaultValue = true)]
        public DateTime? DataAccessExpiresAtUtc { get; set; }

        /// <summary>
        /// Request rejection datetime in UTC timezone.
        /// </summary>
        /// <value>Request rejection datetime in UTC timezone.</value>
        [DataMember(Name = "rejectedAtUtc", EmitDefaultValue = true)]
        public DateTime? RejectedAtUtc { get; set; }

        /// <summary>
        /// Request revocation datetime in UTC timezone.
        /// </summary>
        /// <value>Request revocation datetime in UTC timezone.</value>
        [DataMember(Name = "revokedAtUtc", EmitDefaultValue = true)]
        public DateTime? RevokedAtUtc { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DataConsentRequest {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("  ConsentId: ").Append(ConsentId).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Purpose: ").Append(Purpose).Append("\n");
            sb.Append("  DataLife: ").Append(DataLife).Append("\n");
            sb.Append("  Collectables: ").Append(Collectables).Append("\n");
            sb.Append("  Receiver: ").Append(Receiver).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CreatedAtUtc: ").Append(CreatedAtUtc).Append("\n");
            sb.Append("  ExpiresAtUtc: ").Append(ExpiresAtUtc).Append("\n");
            sb.Append("  ApprovedAtUtc: ").Append(ApprovedAtUtc).Append("\n");
            sb.Append("  DataAccessExpiresAtUtc: ").Append(DataAccessExpiresAtUtc).Append("\n");
            sb.Append("  RejectedAtUtc: ").Append(RejectedAtUtc).Append("\n");
            sb.Append("  RevokedAtUtc: ").Append(RevokedAtUtc).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DataConsentRequest);
        }

        /// <summary>
        /// Returns true if DataConsentRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of DataConsentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataConsentRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.TemplateId == input.TemplateId ||
                    (this.TemplateId != null &&
                    this.TemplateId.Equals(input.TemplateId))
                ) && 
                (
                    this.ConsentId == input.ConsentId ||
                    (this.ConsentId != null &&
                    this.ConsentId.Equals(input.ConsentId))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Purpose == input.Purpose ||
                    (this.Purpose != null &&
                    this.Purpose.Equals(input.Purpose))
                ) && 
                (
                    this.DataLife == input.DataLife ||
                    (this.DataLife != null &&
                    this.DataLife.Equals(input.DataLife))
                ) && 
                (
                    this.Collectables == input.Collectables ||
                    this.Collectables != null &&
                    input.Collectables != null &&
                    this.Collectables.SequenceEqual(input.Collectables)
                ) && 
                (
                    this.Receiver == input.Receiver ||
                    (this.Receiver != null &&
                    this.Receiver.Equals(input.Receiver))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.CreatedAtUtc == input.CreatedAtUtc ||
                    (this.CreatedAtUtc != null &&
                    this.CreatedAtUtc.Equals(input.CreatedAtUtc))
                ) && 
                (
                    this.ExpiresAtUtc == input.ExpiresAtUtc ||
                    (this.ExpiresAtUtc != null &&
                    this.ExpiresAtUtc.Equals(input.ExpiresAtUtc))
                ) && 
                (
                    this.ApprovedAtUtc == input.ApprovedAtUtc ||
                    (this.ApprovedAtUtc != null &&
                    this.ApprovedAtUtc.Equals(input.ApprovedAtUtc))
                ) && 
                (
                    this.DataAccessExpiresAtUtc == input.DataAccessExpiresAtUtc ||
                    (this.DataAccessExpiresAtUtc != null &&
                    this.DataAccessExpiresAtUtc.Equals(input.DataAccessExpiresAtUtc))
                ) && 
                (
                    this.RejectedAtUtc == input.RejectedAtUtc ||
                    (this.RejectedAtUtc != null &&
                    this.RejectedAtUtc.Equals(input.RejectedAtUtc))
                ) && 
                (
                    this.RevokedAtUtc == input.RevokedAtUtc ||
                    (this.RevokedAtUtc != null &&
                    this.RevokedAtUtc.Equals(input.RevokedAtUtc))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.TemplateId != null)
                {
                    hashCode = (hashCode * 59) + this.TemplateId.GetHashCode();
                }
                if (this.ConsentId != null)
                {
                    hashCode = (hashCode * 59) + this.ConsentId.GetHashCode();
                }
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Purpose != null)
                {
                    hashCode = (hashCode * 59) + this.Purpose.GetHashCode();
                }
                if (this.DataLife != null)
                {
                    hashCode = (hashCode * 59) + this.DataLife.GetHashCode();
                }
                if (this.Collectables != null)
                {
                    hashCode = (hashCode * 59) + this.Collectables.GetHashCode();
                }
                if (this.Receiver != null)
                {
                    hashCode = (hashCode * 59) + this.Receiver.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.CreatedAtUtc != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAtUtc.GetHashCode();
                }
                if (this.ExpiresAtUtc != null)
                {
                    hashCode = (hashCode * 59) + this.ExpiresAtUtc.GetHashCode();
                }
                if (this.ApprovedAtUtc != null)
                {
                    hashCode = (hashCode * 59) + this.ApprovedAtUtc.GetHashCode();
                }
                if (this.DataAccessExpiresAtUtc != null)
                {
                    hashCode = (hashCode * 59) + this.DataAccessExpiresAtUtc.GetHashCode();
                }
                if (this.RejectedAtUtc != null)
                {
                    hashCode = (hashCode * 59) + this.RejectedAtUtc.GetHashCode();
                }
                if (this.RevokedAtUtc != null)
                {
                    hashCode = (hashCode * 59) + this.RevokedAtUtc.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
