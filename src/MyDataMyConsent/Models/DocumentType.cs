/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = MyDataMyConsent.Client.OpenAPIDateConverter;

namespace MyDataMyConsent.Models
{
    /// <summary>
    /// DocumentType : Issuable Document Type details.
    /// </summary>
    [DataContract(Name = "DocumentType")]
    public partial class DocumentType : IEquatable<DocumentType>
    {

        /// <summary>
        /// Gets or Sets CategoryType
        /// </summary>
        [DataMember(Name = "categoryType", IsRequired = true, EmitDefaultValue = true)]
        public DocumentCategoryType CategoryType { get; set; }

        /// <summary>
        /// Gets or Sets SubCategoryType
        /// </summary>
        [DataMember(Name = "subCategoryType", IsRequired = true, EmitDefaultValue = true)]
        public DocumentSubCategoryType SubCategoryType { get; set; }

        /// <summary>
        /// Gets or Sets SupportedEntityType
        /// </summary>
        [DataMember(Name = "supportedEntityType", IsRequired = true, EmitDefaultValue = true)]
        public SupportedEntityType SupportedEntityType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentType" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DocumentType() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentType" /> class.
        /// </summary>
        /// <param name="id">Document Type Identifier. (required).</param>
        /// <param name="categoryType">categoryType (required).</param>
        /// <param name="subCategoryType">subCategoryType (required).</param>
        /// <param name="name">Document Type Name. eg: Driving License. (required).</param>
        /// <param name="slug">Document Type Unique Slug. eg: \\\&quot;in.gov.gj.transport.dl\\\&quot;. (required).</param>
        /// <param name="description">Document Type description. eg: Gujarat State Driving License..</param>
        /// <param name="logoUrl">Logo URL of document type. (required).</param>
        /// <param name="searchServiceName">Document search repository service name..</param>
        /// <param name="repositoryServiceName">Document repository service name..</param>
        /// <param name="supportedEntityType">supportedEntityType (required).</param>
        /// <param name="addedBy">Name of the document type creator. (required).</param>
        /// <param name="payableAmount">Payable amount if document is chargeable. eg: 10.25. (required).</param>
        /// <param name="payableAmountCurrency">Payable amount currency. eg: INR, USD etc.,. (required).</param>
        /// <param name="approvedAtUtc">DateTime of approval in UTC timezone..</param>
        public DocumentType(string id = default(string), DocumentCategoryType categoryType = default(DocumentCategoryType), DocumentSubCategoryType subCategoryType = default(DocumentSubCategoryType), string name = default(string), string slug = default(string), string description = default(string), string logoUrl = default(string), string searchServiceName = default(string), string repositoryServiceName = default(string), SupportedEntityType supportedEntityType = default(SupportedEntityType), string addedBy = default(string), decimal payableAmount = default(decimal), string payableAmountCurrency = default(string), DateTime approvedAtUtc = default(DateTime))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for DocumentType and cannot be null");
            }
            this.Id = id;
            this.CategoryType = categoryType;
            this.SubCategoryType = subCategoryType;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for DocumentType and cannot be null");
            }
            this.Name = name;
            // to ensure "slug" is required (not null)
            if (slug == null)
            {
                throw new ArgumentNullException("slug is a required property for DocumentType and cannot be null");
            }
            this.Slug = slug;
            // to ensure "logoUrl" is required (not null)
            if (logoUrl == null)
            {
                throw new ArgumentNullException("logoUrl is a required property for DocumentType and cannot be null");
            }
            this.LogoUrl = logoUrl;
            this.SupportedEntityType = supportedEntityType;
            // to ensure "addedBy" is required (not null)
            if (addedBy == null)
            {
                throw new ArgumentNullException("addedBy is a required property for DocumentType and cannot be null");
            }
            this.AddedBy = addedBy;
            this.PayableAmount = payableAmount;
            // to ensure "payableAmountCurrency" is required (not null)
            if (payableAmountCurrency == null)
            {
                throw new ArgumentNullException("payableAmountCurrency is a required property for DocumentType and cannot be null");
            }
            this.PayableAmountCurrency = payableAmountCurrency;
            this.Description = description;
            this.SearchServiceName = searchServiceName;
            this.RepositoryServiceName = repositoryServiceName;
            this.ApprovedAtUtc = approvedAtUtc;
        }

        /// <summary>
        /// Document Type Identifier.
        /// </summary>
        /// <value>Document Type Identifier.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Document Type Name. eg: Driving License.
        /// </summary>
        /// <value>Document Type Name. eg: Driving License.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Document Type Unique Slug. eg: \\\&quot;in.gov.gj.transport.dl\\\&quot;.
        /// </summary>
        /// <value>Document Type Unique Slug. eg: \\\&quot;in.gov.gj.transport.dl\\\&quot;.</value>
        [DataMember(Name = "slug", IsRequired = true, EmitDefaultValue = true)]
        public string Slug { get; set; }

        /// <summary>
        /// Document Type description. eg: Gujarat State Driving License.
        /// </summary>
        /// <value>Document Type description. eg: Gujarat State Driving License.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Logo URL of document type.
        /// </summary>
        /// <value>Logo URL of document type.</value>
        [DataMember(Name = "logoUrl", IsRequired = true, EmitDefaultValue = true)]
        public string LogoUrl { get; set; }

        /// <summary>
        /// Document search repository service name.
        /// </summary>
        /// <value>Document search repository service name.</value>
        [DataMember(Name = "searchServiceName", EmitDefaultValue = false)]
        public string SearchServiceName { get; set; }

        /// <summary>
        /// Document repository service name.
        /// </summary>
        /// <value>Document repository service name.</value>
        [DataMember(Name = "repositoryServiceName", EmitDefaultValue = false)]
        public string RepositoryServiceName { get; set; }

        /// <summary>
        /// Name of the document type creator.
        /// </summary>
        /// <value>Name of the document type creator.</value>
        [DataMember(Name = "addedBy", IsRequired = true, EmitDefaultValue = true)]
        public string AddedBy { get; set; }

        /// <summary>
        /// Payable amount if document is chargeable. eg: 10.25.
        /// </summary>
        /// <value>Payable amount if document is chargeable. eg: 10.25.</value>
        [DataMember(Name = "payableAmount", IsRequired = true, EmitDefaultValue = true)]
        public decimal PayableAmount { get; set; }

        /// <summary>
        /// Payable amount currency. eg: INR, USD etc.,.
        /// </summary>
        /// <value>Payable amount currency. eg: INR, USD etc.,.</value>
        [DataMember(Name = "payableAmountCurrency", IsRequired = true, EmitDefaultValue = true)]
        public string PayableAmountCurrency { get; set; }

        /// <summary>
        /// DateTime of approval in UTC timezone.
        /// </summary>
        /// <value>DateTime of approval in UTC timezone.</value>
        [DataMember(Name = "approvedAtUtc", EmitDefaultValue = false)]
        public DateTime ApprovedAtUtc { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DocumentType {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CategoryType: ").Append(CategoryType).Append("\n");
            sb.Append("  SubCategoryType: ").Append(SubCategoryType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Slug: ").Append(Slug).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  LogoUrl: ").Append(LogoUrl).Append("\n");
            sb.Append("  SearchServiceName: ").Append(SearchServiceName).Append("\n");
            sb.Append("  RepositoryServiceName: ").Append(RepositoryServiceName).Append("\n");
            sb.Append("  SupportedEntityType: ").Append(SupportedEntityType).Append("\n");
            sb.Append("  AddedBy: ").Append(AddedBy).Append("\n");
            sb.Append("  PayableAmount: ").Append(PayableAmount).Append("\n");
            sb.Append("  PayableAmountCurrency: ").Append(PayableAmountCurrency).Append("\n");
            sb.Append("  ApprovedAtUtc: ").Append(ApprovedAtUtc).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentType);
        }

        /// <summary>
        /// Returns true if DocumentType instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentType input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CategoryType == input.CategoryType ||
                    this.CategoryType.Equals(input.CategoryType)
                ) && 
                (
                    this.SubCategoryType == input.SubCategoryType ||
                    this.SubCategoryType.Equals(input.SubCategoryType)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Slug == input.Slug ||
                    (this.Slug != null &&
                    this.Slug.Equals(input.Slug))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.LogoUrl == input.LogoUrl ||
                    (this.LogoUrl != null &&
                    this.LogoUrl.Equals(input.LogoUrl))
                ) && 
                (
                    this.SearchServiceName == input.SearchServiceName ||
                    (this.SearchServiceName != null &&
                    this.SearchServiceName.Equals(input.SearchServiceName))
                ) && 
                (
                    this.RepositoryServiceName == input.RepositoryServiceName ||
                    (this.RepositoryServiceName != null &&
                    this.RepositoryServiceName.Equals(input.RepositoryServiceName))
                ) && 
                (
                    this.SupportedEntityType == input.SupportedEntityType ||
                    this.SupportedEntityType.Equals(input.SupportedEntityType)
                ) && 
                (
                    this.AddedBy == input.AddedBy ||
                    (this.AddedBy != null &&
                    this.AddedBy.Equals(input.AddedBy))
                ) && 
                (
                    this.PayableAmount == input.PayableAmount ||
                    this.PayableAmount.Equals(input.PayableAmount)
                ) && 
                (
                    this.PayableAmountCurrency == input.PayableAmountCurrency ||
                    (this.PayableAmountCurrency != null &&
                    this.PayableAmountCurrency.Equals(input.PayableAmountCurrency))
                ) && 
                (
                    this.ApprovedAtUtc == input.ApprovedAtUtc ||
                    (this.ApprovedAtUtc != null &&
                    this.ApprovedAtUtc.Equals(input.ApprovedAtUtc))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CategoryType.GetHashCode();
                hashCode = (hashCode * 59) + this.SubCategoryType.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Slug != null)
                {
                    hashCode = (hashCode * 59) + this.Slug.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.LogoUrl != null)
                {
                    hashCode = (hashCode * 59) + this.LogoUrl.GetHashCode();
                }
                if (this.SearchServiceName != null)
                {
                    hashCode = (hashCode * 59) + this.SearchServiceName.GetHashCode();
                }
                if (this.RepositoryServiceName != null)
                {
                    hashCode = (hashCode * 59) + this.RepositoryServiceName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SupportedEntityType.GetHashCode();
                if (this.AddedBy != null)
                {
                    hashCode = (hashCode * 59) + this.AddedBy.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PayableAmount.GetHashCode();
                if (this.PayableAmountCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.PayableAmountCurrency.GetHashCode();
                }
                if (this.ApprovedAtUtc != null)
                {
                    hashCode = (hashCode * 59) + this.ApprovedAtUtc.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
