/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = MyDataMyConsent.Client.OpenAPIDateConverter;

namespace MyDataMyConsent.Models
{
    /// <summary>
    /// MutualFundTransaction
    /// </summary>
    [DataContract(Name = "MutualFundTransaction")]
    public partial class MutualFundTransaction : IEquatable<MutualFundTransaction>
    {

        /// <summary>
        /// Gets or Sets SchemePlan
        /// </summary>
        [DataMember(Name = "scheme_plan", IsRequired = true, EmitDefaultValue = true)]
        public MutualFundSchemePlan SchemePlan { get; set; }

        /// <summary>
        /// Gets or Sets FundType
        /// </summary>
        [DataMember(Name = "fund_type", IsRequired = true, EmitDefaultValue = true)]
        public MutualFundFundType FundType { get; set; }

        /// <summary>
        /// Gets or Sets SchemeOption
        /// </summary>
        [DataMember(Name = "scheme_option", IsRequired = true, EmitDefaultValue = true)]
        public MutualFundSchemeOption SchemeOption { get; set; }

        /// <summary>
        /// Gets or Sets SchemeTypes
        /// </summary>
        [DataMember(Name = "scheme_types", IsRequired = true, EmitDefaultValue = true)]
        public MutualFundSchemeType SchemeTypes { get; set; }

        /// <summary>
        /// Gets or Sets SchemeCategory
        /// </summary>
        [DataMember(Name = "scheme_category", IsRequired = true, EmitDefaultValue = true)]
        public MutualFundSchemeCategory SchemeCategory { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public MutualFundTransactionType Type { get; set; }

        /// <summary>
        /// Gets or Sets Mode
        /// </summary>
        [DataMember(Name = "mode", IsRequired = true, EmitDefaultValue = true)]
        public MutualFundHoldingMode Mode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MutualFundTransaction" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MutualFundTransaction() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MutualFundTransaction" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="amc">amc (required).</param>
        /// <param name="registrar">registrar (required).</param>
        /// <param name="schemeCode">schemeCode (required).</param>
        /// <param name="schemePlan">schemePlan (required).</param>
        /// <param name="isin">isin (required).</param>
        /// <param name="amfiCode">amfiCode (required).</param>
        /// <param name="fundType">fundType (required).</param>
        /// <param name="schemeOption">schemeOption (required).</param>
        /// <param name="schemeTypes">schemeTypes (required).</param>
        /// <param name="schemeCategory">schemeCategory (required).</param>
        /// <param name="ucc">ucc (required).</param>
        /// <param name="amount">amount (required).</param>
        /// <param name="closingUnits">closingUnits (required).</param>
        /// <param name="lienUnits">lienUnits (required).</param>
        /// <param name="nav">nav (required).</param>
        /// <param name="navDate">navDate (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="orderDate">orderDate (required).</param>
        /// <param name="executionDate">executionDate (required).</param>
        /// <param name="lockinFlag">lockinFlag (required).</param>
        /// <param name="lockinDays">lockinDays (required).</param>
        /// <param name="mode">mode (required).</param>
        /// <param name="narration">narration (required).</param>
        public MutualFundTransaction(string id = default(string), string amc = default(string), string registrar = default(string), string schemeCode = default(string), MutualFundSchemePlan schemePlan = default(MutualFundSchemePlan), string isin = default(string), string amfiCode = default(string), MutualFundFundType fundType = default(MutualFundFundType), MutualFundSchemeOption schemeOption = default(MutualFundSchemeOption), MutualFundSchemeType schemeTypes = default(MutualFundSchemeType), MutualFundSchemeCategory schemeCategory = default(MutualFundSchemeCategory), string ucc = default(string), string amount = default(string), string closingUnits = default(string), string lienUnits = default(string), string nav = default(string), DateTime navDate = default(DateTime), MutualFundTransactionType type = default(MutualFundTransactionType), DateTime orderDate = default(DateTime), DateTime executionDate = default(DateTime), string lockinFlag = default(string), string lockinDays = default(string), MutualFundHoldingMode mode = default(MutualFundHoldingMode), string narration = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for MutualFundTransaction and cannot be null");
            }
            this.Id = id;
            // to ensure "amc" is required (not null)
            if (amc == null)
            {
                throw new ArgumentNullException("amc is a required property for MutualFundTransaction and cannot be null");
            }
            this.Amc = amc;
            // to ensure "registrar" is required (not null)
            if (registrar == null)
            {
                throw new ArgumentNullException("registrar is a required property for MutualFundTransaction and cannot be null");
            }
            this.Registrar = registrar;
            // to ensure "schemeCode" is required (not null)
            if (schemeCode == null)
            {
                throw new ArgumentNullException("schemeCode is a required property for MutualFundTransaction and cannot be null");
            }
            this.SchemeCode = schemeCode;
            this.SchemePlan = schemePlan;
            // to ensure "isin" is required (not null)
            if (isin == null)
            {
                throw new ArgumentNullException("isin is a required property for MutualFundTransaction and cannot be null");
            }
            this.Isin = isin;
            // to ensure "amfiCode" is required (not null)
            if (amfiCode == null)
            {
                throw new ArgumentNullException("amfiCode is a required property for MutualFundTransaction and cannot be null");
            }
            this.AmfiCode = amfiCode;
            this.FundType = fundType;
            this.SchemeOption = schemeOption;
            this.SchemeTypes = schemeTypes;
            this.SchemeCategory = schemeCategory;
            // to ensure "ucc" is required (not null)
            if (ucc == null)
            {
                throw new ArgumentNullException("ucc is a required property for MutualFundTransaction and cannot be null");
            }
            this.Ucc = ucc;
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new ArgumentNullException("amount is a required property for MutualFundTransaction and cannot be null");
            }
            this.Amount = amount;
            // to ensure "closingUnits" is required (not null)
            if (closingUnits == null)
            {
                throw new ArgumentNullException("closingUnits is a required property for MutualFundTransaction and cannot be null");
            }
            this.ClosingUnits = closingUnits;
            // to ensure "lienUnits" is required (not null)
            if (lienUnits == null)
            {
                throw new ArgumentNullException("lienUnits is a required property for MutualFundTransaction and cannot be null");
            }
            this.LienUnits = lienUnits;
            // to ensure "nav" is required (not null)
            if (nav == null)
            {
                throw new ArgumentNullException("nav is a required property for MutualFundTransaction and cannot be null");
            }
            this.Nav = nav;
            this.NavDate = navDate;
            this.Type = type;
            this.OrderDate = orderDate;
            this.ExecutionDate = executionDate;
            // to ensure "lockinFlag" is required (not null)
            if (lockinFlag == null)
            {
                throw new ArgumentNullException("lockinFlag is a required property for MutualFundTransaction and cannot be null");
            }
            this.LockinFlag = lockinFlag;
            // to ensure "lockinDays" is required (not null)
            if (lockinDays == null)
            {
                throw new ArgumentNullException("lockinDays is a required property for MutualFundTransaction and cannot be null");
            }
            this.LockinDays = lockinDays;
            this.Mode = mode;
            // to ensure "narration" is required (not null)
            if (narration == null)
            {
                throw new ArgumentNullException("narration is a required property for MutualFundTransaction and cannot be null");
            }
            this.Narration = narration;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Amc
        /// </summary>
        [DataMember(Name = "amc", IsRequired = true, EmitDefaultValue = true)]
        public string Amc { get; set; }

        /// <summary>
        /// Gets or Sets Registrar
        /// </summary>
        [DataMember(Name = "registrar", IsRequired = true, EmitDefaultValue = true)]
        public string Registrar { get; set; }

        /// <summary>
        /// Gets or Sets SchemeCode
        /// </summary>
        [DataMember(Name = "scheme_code", IsRequired = true, EmitDefaultValue = true)]
        public string SchemeCode { get; set; }

        /// <summary>
        /// Gets or Sets Isin
        /// </summary>
        [DataMember(Name = "isin", IsRequired = true, EmitDefaultValue = true)]
        public string Isin { get; set; }

        /// <summary>
        /// Gets or Sets AmfiCode
        /// </summary>
        [DataMember(Name = "amfi_code", IsRequired = true, EmitDefaultValue = true)]
        public string AmfiCode { get; set; }

        /// <summary>
        /// Gets or Sets Ucc
        /// </summary>
        [DataMember(Name = "ucc", IsRequired = true, EmitDefaultValue = true)]
        public string Ucc { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        public string Amount { get; set; }

        /// <summary>
        /// Gets or Sets ClosingUnits
        /// </summary>
        [DataMember(Name = "closing_units", IsRequired = true, EmitDefaultValue = true)]
        public string ClosingUnits { get; set; }

        /// <summary>
        /// Gets or Sets LienUnits
        /// </summary>
        [DataMember(Name = "lien_units", IsRequired = true, EmitDefaultValue = true)]
        public string LienUnits { get; set; }

        /// <summary>
        /// Gets or Sets Nav
        /// </summary>
        [DataMember(Name = "nav", IsRequired = true, EmitDefaultValue = true)]
        public string Nav { get; set; }

        /// <summary>
        /// Gets or Sets NavDate
        /// </summary>
        [DataMember(Name = "nav_date", IsRequired = true, EmitDefaultValue = true)]
        public DateTime NavDate { get; set; }

        /// <summary>
        /// Gets or Sets OrderDate
        /// </summary>
        [DataMember(Name = "order_date", IsRequired = true, EmitDefaultValue = true)]
        public DateTime OrderDate { get; set; }

        /// <summary>
        /// Gets or Sets ExecutionDate
        /// </summary>
        [DataMember(Name = "execution_date", IsRequired = true, EmitDefaultValue = true)]
        public DateTime ExecutionDate { get; set; }

        /// <summary>
        /// Gets or Sets LockinFlag
        /// </summary>
        [DataMember(Name = "lockin_flag", IsRequired = true, EmitDefaultValue = true)]
        public string LockinFlag { get; set; }

        /// <summary>
        /// Gets or Sets LockinDays
        /// </summary>
        [DataMember(Name = "lockin_days", IsRequired = true, EmitDefaultValue = true)]
        public string LockinDays { get; set; }

        /// <summary>
        /// Gets or Sets Narration
        /// </summary>
        [DataMember(Name = "narration", IsRequired = true, EmitDefaultValue = true)]
        public string Narration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MutualFundTransaction {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Amc: ").Append(Amc).Append("\n");
            sb.Append("  Registrar: ").Append(Registrar).Append("\n");
            sb.Append("  SchemeCode: ").Append(SchemeCode).Append("\n");
            sb.Append("  SchemePlan: ").Append(SchemePlan).Append("\n");
            sb.Append("  Isin: ").Append(Isin).Append("\n");
            sb.Append("  AmfiCode: ").Append(AmfiCode).Append("\n");
            sb.Append("  FundType: ").Append(FundType).Append("\n");
            sb.Append("  SchemeOption: ").Append(SchemeOption).Append("\n");
            sb.Append("  SchemeTypes: ").Append(SchemeTypes).Append("\n");
            sb.Append("  SchemeCategory: ").Append(SchemeCategory).Append("\n");
            sb.Append("  Ucc: ").Append(Ucc).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  ClosingUnits: ").Append(ClosingUnits).Append("\n");
            sb.Append("  LienUnits: ").Append(LienUnits).Append("\n");
            sb.Append("  Nav: ").Append(Nav).Append("\n");
            sb.Append("  NavDate: ").Append(NavDate).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  OrderDate: ").Append(OrderDate).Append("\n");
            sb.Append("  ExecutionDate: ").Append(ExecutionDate).Append("\n");
            sb.Append("  LockinFlag: ").Append(LockinFlag).Append("\n");
            sb.Append("  LockinDays: ").Append(LockinDays).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  Narration: ").Append(Narration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MutualFundTransaction);
        }

        /// <summary>
        /// Returns true if MutualFundTransaction instances are equal
        /// </summary>
        /// <param name="input">Instance of MutualFundTransaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MutualFundTransaction input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Amc == input.Amc ||
                    (this.Amc != null &&
                    this.Amc.Equals(input.Amc))
                ) && 
                (
                    this.Registrar == input.Registrar ||
                    (this.Registrar != null &&
                    this.Registrar.Equals(input.Registrar))
                ) && 
                (
                    this.SchemeCode == input.SchemeCode ||
                    (this.SchemeCode != null &&
                    this.SchemeCode.Equals(input.SchemeCode))
                ) && 
                (
                    this.SchemePlan == input.SchemePlan ||
                    this.SchemePlan.Equals(input.SchemePlan)
                ) && 
                (
                    this.Isin == input.Isin ||
                    (this.Isin != null &&
                    this.Isin.Equals(input.Isin))
                ) && 
                (
                    this.AmfiCode == input.AmfiCode ||
                    (this.AmfiCode != null &&
                    this.AmfiCode.Equals(input.AmfiCode))
                ) && 
                (
                    this.FundType == input.FundType ||
                    this.FundType.Equals(input.FundType)
                ) && 
                (
                    this.SchemeOption == input.SchemeOption ||
                    this.SchemeOption.Equals(input.SchemeOption)
                ) && 
                (
                    this.SchemeTypes == input.SchemeTypes ||
                    this.SchemeTypes.Equals(input.SchemeTypes)
                ) && 
                (
                    this.SchemeCategory == input.SchemeCategory ||
                    this.SchemeCategory.Equals(input.SchemeCategory)
                ) && 
                (
                    this.Ucc == input.Ucc ||
                    (this.Ucc != null &&
                    this.Ucc.Equals(input.Ucc))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.ClosingUnits == input.ClosingUnits ||
                    (this.ClosingUnits != null &&
                    this.ClosingUnits.Equals(input.ClosingUnits))
                ) && 
                (
                    this.LienUnits == input.LienUnits ||
                    (this.LienUnits != null &&
                    this.LienUnits.Equals(input.LienUnits))
                ) && 
                (
                    this.Nav == input.Nav ||
                    (this.Nav != null &&
                    this.Nav.Equals(input.Nav))
                ) && 
                (
                    this.NavDate == input.NavDate ||
                    (this.NavDate != null &&
                    this.NavDate.Equals(input.NavDate))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.OrderDate == input.OrderDate ||
                    (this.OrderDate != null &&
                    this.OrderDate.Equals(input.OrderDate))
                ) && 
                (
                    this.ExecutionDate == input.ExecutionDate ||
                    (this.ExecutionDate != null &&
                    this.ExecutionDate.Equals(input.ExecutionDate))
                ) && 
                (
                    this.LockinFlag == input.LockinFlag ||
                    (this.LockinFlag != null &&
                    this.LockinFlag.Equals(input.LockinFlag))
                ) && 
                (
                    this.LockinDays == input.LockinDays ||
                    (this.LockinDays != null &&
                    this.LockinDays.Equals(input.LockinDays))
                ) && 
                (
                    this.Mode == input.Mode ||
                    this.Mode.Equals(input.Mode)
                ) && 
                (
                    this.Narration == input.Narration ||
                    (this.Narration != null &&
                    this.Narration.Equals(input.Narration))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Amc != null)
                {
                    hashCode = (hashCode * 59) + this.Amc.GetHashCode();
                }
                if (this.Registrar != null)
                {
                    hashCode = (hashCode * 59) + this.Registrar.GetHashCode();
                }
                if (this.SchemeCode != null)
                {
                    hashCode = (hashCode * 59) + this.SchemeCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SchemePlan.GetHashCode();
                if (this.Isin != null)
                {
                    hashCode = (hashCode * 59) + this.Isin.GetHashCode();
                }
                if (this.AmfiCode != null)
                {
                    hashCode = (hashCode * 59) + this.AmfiCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FundType.GetHashCode();
                hashCode = (hashCode * 59) + this.SchemeOption.GetHashCode();
                hashCode = (hashCode * 59) + this.SchemeTypes.GetHashCode();
                hashCode = (hashCode * 59) + this.SchemeCategory.GetHashCode();
                if (this.Ucc != null)
                {
                    hashCode = (hashCode * 59) + this.Ucc.GetHashCode();
                }
                if (this.Amount != null)
                {
                    hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                }
                if (this.ClosingUnits != null)
                {
                    hashCode = (hashCode * 59) + this.ClosingUnits.GetHashCode();
                }
                if (this.LienUnits != null)
                {
                    hashCode = (hashCode * 59) + this.LienUnits.GetHashCode();
                }
                if (this.Nav != null)
                {
                    hashCode = (hashCode * 59) + this.Nav.GetHashCode();
                }
                if (this.NavDate != null)
                {
                    hashCode = (hashCode * 59) + this.NavDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.OrderDate != null)
                {
                    hashCode = (hashCode * 59) + this.OrderDate.GetHashCode();
                }
                if (this.ExecutionDate != null)
                {
                    hashCode = (hashCode * 59) + this.ExecutionDate.GetHashCode();
                }
                if (this.LockinFlag != null)
                {
                    hashCode = (hashCode * 59) + this.LockinFlag.GetHashCode();
                }
                if (this.LockinDays != null)
                {
                    hashCode = (hashCode * 59) + this.LockinDays.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Mode.GetHashCode();
                if (this.Narration != null)
                {
                    hashCode = (hashCode * 59) + this.Narration.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
