/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = MyDataMyConsent.Client.OpenAPIDateConverter;

namespace MyDataMyConsent.Models
{
    /// <summary>
    /// MutualFundHolding
    /// </summary>
    [DataContract(Name = "MutualFundHolding")]
    public partial class MutualFundHolding : IEquatable<MutualFundHolding>
    {

        /// <summary>
        /// Gets or Sets Mode
        /// </summary>
        [DataMember(Name = "mode", IsRequired = true, EmitDefaultValue = true)]
        public MutualFundHoldingMode Mode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MutualFundHolding" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MutualFundHolding() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MutualFundHolding" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="amc">amc.</param>
        /// <param name="registrar">registrar.</param>
        /// <param name="schemeCode">schemeCode.</param>
        /// <param name="isin">isin (required).</param>
        /// <param name="ucc">ucc.</param>
        /// <param name="amfiCode">amfiCode.</param>
        /// <param name="folioNo">folioNo (required).</param>
        /// <param name="dividendType">dividendType.</param>
        /// <param name="fatcaStatus">fatcaStatus.</param>
        /// <param name="mode">mode (required).</param>
        /// <param name="units">units (required).</param>
        /// <param name="closingUnits">closingUnits.</param>
        /// <param name="lienUnits">lienUnits.</param>
        /// <param name="rate">rate.</param>
        /// <param name="nav">nav.</param>
        /// <param name="lockingUnits">lockingUnits.</param>
        public MutualFundHolding(string name = default(string), string amc = default(string), string registrar = default(string), string schemeCode = default(string), string isin = default(string), string ucc = default(string), string amfiCode = default(string), string folioNo = default(string), string dividendType = default(string), string fatcaStatus = default(string), MutualFundHoldingMode mode = default(MutualFundHoldingMode), double units = default(double), string closingUnits = default(string), string lienUnits = default(string), string rate = default(string), string nav = default(string), string lockingUnits = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for MutualFundHolding and cannot be null");
            }
            this.Name = name;
            // to ensure "isin" is required (not null)
            if (isin == null)
            {
                throw new ArgumentNullException("isin is a required property for MutualFundHolding and cannot be null");
            }
            this.Isin = isin;
            // to ensure "folioNo" is required (not null)
            if (folioNo == null)
            {
                throw new ArgumentNullException("folioNo is a required property for MutualFundHolding and cannot be null");
            }
            this.FolioNo = folioNo;
            this.Mode = mode;
            this.Units = units;
            this.Amc = amc;
            this.Registrar = registrar;
            this.SchemeCode = schemeCode;
            this.Ucc = ucc;
            this.AmfiCode = amfiCode;
            this.DividendType = dividendType;
            this.FatcaStatus = fatcaStatus;
            this.ClosingUnits = closingUnits;
            this.LienUnits = lienUnits;
            this.Rate = rate;
            this.Nav = nav;
            this.LockingUnits = lockingUnits;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Amc
        /// </summary>
        [DataMember(Name = "amc", EmitDefaultValue = false)]
        public string Amc { get; set; }

        /// <summary>
        /// Gets or Sets Registrar
        /// </summary>
        [DataMember(Name = "registrar", EmitDefaultValue = false)]
        public string Registrar { get; set; }

        /// <summary>
        /// Gets or Sets SchemeCode
        /// </summary>
        [DataMember(Name = "schemeCode", EmitDefaultValue = false)]
        public string SchemeCode { get; set; }

        /// <summary>
        /// Gets or Sets Isin
        /// </summary>
        [DataMember(Name = "isin", IsRequired = true, EmitDefaultValue = true)]
        public string Isin { get; set; }

        /// <summary>
        /// Gets or Sets Ucc
        /// </summary>
        [DataMember(Name = "ucc", EmitDefaultValue = false)]
        public string Ucc { get; set; }

        /// <summary>
        /// Gets or Sets AmfiCode
        /// </summary>
        [DataMember(Name = "amfiCode", EmitDefaultValue = false)]
        public string AmfiCode { get; set; }

        /// <summary>
        /// Gets or Sets FolioNo
        /// </summary>
        [DataMember(Name = "folioNo", IsRequired = true, EmitDefaultValue = true)]
        public string FolioNo { get; set; }

        /// <summary>
        /// Gets or Sets DividendType
        /// </summary>
        [DataMember(Name = "dividendType", EmitDefaultValue = false)]
        public string DividendType { get; set; }

        /// <summary>
        /// Gets or Sets FatcaStatus
        /// </summary>
        [DataMember(Name = "fatcaStatus", EmitDefaultValue = false)]
        public string FatcaStatus { get; set; }

        /// <summary>
        /// Gets or Sets Units
        /// </summary>
        [DataMember(Name = "units", IsRequired = true, EmitDefaultValue = true)]
        public double Units { get; set; }

        /// <summary>
        /// Gets or Sets ClosingUnits
        /// </summary>
        [DataMember(Name = "closingUnits", EmitDefaultValue = false)]
        public string ClosingUnits { get; set; }

        /// <summary>
        /// Gets or Sets LienUnits
        /// </summary>
        [DataMember(Name = "lienUnits", EmitDefaultValue = false)]
        public string LienUnits { get; set; }

        /// <summary>
        /// Gets or Sets Rate
        /// </summary>
        [DataMember(Name = "rate", EmitDefaultValue = false)]
        public string Rate { get; set; }

        /// <summary>
        /// Gets or Sets Nav
        /// </summary>
        [DataMember(Name = "nav", EmitDefaultValue = false)]
        public string Nav { get; set; }

        /// <summary>
        /// Gets or Sets LockingUnits
        /// </summary>
        [DataMember(Name = "lockingUnits", EmitDefaultValue = false)]
        public string LockingUnits { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MutualFundHolding {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Amc: ").Append(Amc).Append("\n");
            sb.Append("  Registrar: ").Append(Registrar).Append("\n");
            sb.Append("  SchemeCode: ").Append(SchemeCode).Append("\n");
            sb.Append("  Isin: ").Append(Isin).Append("\n");
            sb.Append("  Ucc: ").Append(Ucc).Append("\n");
            sb.Append("  AmfiCode: ").Append(AmfiCode).Append("\n");
            sb.Append("  FolioNo: ").Append(FolioNo).Append("\n");
            sb.Append("  DividendType: ").Append(DividendType).Append("\n");
            sb.Append("  FatcaStatus: ").Append(FatcaStatus).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  Units: ").Append(Units).Append("\n");
            sb.Append("  ClosingUnits: ").Append(ClosingUnits).Append("\n");
            sb.Append("  LienUnits: ").Append(LienUnits).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  Nav: ").Append(Nav).Append("\n");
            sb.Append("  LockingUnits: ").Append(LockingUnits).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MutualFundHolding);
        }

        /// <summary>
        /// Returns true if MutualFundHolding instances are equal
        /// </summary>
        /// <param name="input">Instance of MutualFundHolding to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MutualFundHolding input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Amc == input.Amc ||
                    (this.Amc != null &&
                    this.Amc.Equals(input.Amc))
                ) && 
                (
                    this.Registrar == input.Registrar ||
                    (this.Registrar != null &&
                    this.Registrar.Equals(input.Registrar))
                ) && 
                (
                    this.SchemeCode == input.SchemeCode ||
                    (this.SchemeCode != null &&
                    this.SchemeCode.Equals(input.SchemeCode))
                ) && 
                (
                    this.Isin == input.Isin ||
                    (this.Isin != null &&
                    this.Isin.Equals(input.Isin))
                ) && 
                (
                    this.Ucc == input.Ucc ||
                    (this.Ucc != null &&
                    this.Ucc.Equals(input.Ucc))
                ) && 
                (
                    this.AmfiCode == input.AmfiCode ||
                    (this.AmfiCode != null &&
                    this.AmfiCode.Equals(input.AmfiCode))
                ) && 
                (
                    this.FolioNo == input.FolioNo ||
                    (this.FolioNo != null &&
                    this.FolioNo.Equals(input.FolioNo))
                ) && 
                (
                    this.DividendType == input.DividendType ||
                    (this.DividendType != null &&
                    this.DividendType.Equals(input.DividendType))
                ) && 
                (
                    this.FatcaStatus == input.FatcaStatus ||
                    (this.FatcaStatus != null &&
                    this.FatcaStatus.Equals(input.FatcaStatus))
                ) && 
                (
                    this.Mode == input.Mode ||
                    this.Mode.Equals(input.Mode)
                ) && 
                (
                    this.Units == input.Units ||
                    this.Units.Equals(input.Units)
                ) && 
                (
                    this.ClosingUnits == input.ClosingUnits ||
                    (this.ClosingUnits != null &&
                    this.ClosingUnits.Equals(input.ClosingUnits))
                ) && 
                (
                    this.LienUnits == input.LienUnits ||
                    (this.LienUnits != null &&
                    this.LienUnits.Equals(input.LienUnits))
                ) && 
                (
                    this.Rate == input.Rate ||
                    (this.Rate != null &&
                    this.Rate.Equals(input.Rate))
                ) && 
                (
                    this.Nav == input.Nav ||
                    (this.Nav != null &&
                    this.Nav.Equals(input.Nav))
                ) && 
                (
                    this.LockingUnits == input.LockingUnits ||
                    (this.LockingUnits != null &&
                    this.LockingUnits.Equals(input.LockingUnits))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Amc != null)
                {
                    hashCode = (hashCode * 59) + this.Amc.GetHashCode();
                }
                if (this.Registrar != null)
                {
                    hashCode = (hashCode * 59) + this.Registrar.GetHashCode();
                }
                if (this.SchemeCode != null)
                {
                    hashCode = (hashCode * 59) + this.SchemeCode.GetHashCode();
                }
                if (this.Isin != null)
                {
                    hashCode = (hashCode * 59) + this.Isin.GetHashCode();
                }
                if (this.Ucc != null)
                {
                    hashCode = (hashCode * 59) + this.Ucc.GetHashCode();
                }
                if (this.AmfiCode != null)
                {
                    hashCode = (hashCode * 59) + this.AmfiCode.GetHashCode();
                }
                if (this.FolioNo != null)
                {
                    hashCode = (hashCode * 59) + this.FolioNo.GetHashCode();
                }
                if (this.DividendType != null)
                {
                    hashCode = (hashCode * 59) + this.DividendType.GetHashCode();
                }
                if (this.FatcaStatus != null)
                {
                    hashCode = (hashCode * 59) + this.FatcaStatus.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Mode.GetHashCode();
                hashCode = (hashCode * 59) + this.Units.GetHashCode();
                if (this.ClosingUnits != null)
                {
                    hashCode = (hashCode * 59) + this.ClosingUnits.GetHashCode();
                }
                if (this.LienUnits != null)
                {
                    hashCode = (hashCode * 59) + this.LienUnits.GetHashCode();
                }
                if (this.Rate != null)
                {
                    hashCode = (hashCode * 59) + this.Rate.GetHashCode();
                }
                if (this.Nav != null)
                {
                    hashCode = (hashCode * 59) + this.Nav.GetHashCode();
                }
                if (this.LockingUnits != null)
                {
                    hashCode = (hashCode * 59) + this.LockingUnits.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
