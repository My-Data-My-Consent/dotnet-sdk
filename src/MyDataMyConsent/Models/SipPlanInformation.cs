/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = MyDataMyConsent.Client.OpenAPIDateConverter;

namespace MyDataMyConsent.Models
{
    /// <summary>
    /// SipPlanInformation
    /// </summary>
    [DataContract(Name = "SipPlanInformation")]
    public partial class SipPlanInformation : IEquatable<SipPlanInformation>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SipPlanInformation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SipPlanInformation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SipPlanInformation" /> class.
        /// </summary>
        /// <param name="amc">amc.</param>
        /// <param name="registrar">registrar.</param>
        /// <param name="scheme">scheme (required).</param>
        /// <param name="isin">isin (required).</param>
        /// <param name="folioNumber">folioNumber.</param>
        /// <param name="nav">nav.</param>
        /// <param name="dividendType">dividendType (required).</param>
        /// <param name="creationDate">creationDate.</param>
        public SipPlanInformation(string amc = default(string), string registrar = default(string), string scheme = default(string), string isin = default(string), string folioNumber = default(string), string nav = default(string), string dividendType = default(string), DateTime creationDate = default(DateTime))
        {
            // to ensure "scheme" is required (not null)
            if (scheme == null)
            {
                throw new ArgumentNullException("scheme is a required property for SipPlanInformation and cannot be null");
            }
            this.Scheme = scheme;
            // to ensure "isin" is required (not null)
            if (isin == null)
            {
                throw new ArgumentNullException("isin is a required property for SipPlanInformation and cannot be null");
            }
            this.Isin = isin;
            // to ensure "dividendType" is required (not null)
            if (dividendType == null)
            {
                throw new ArgumentNullException("dividendType is a required property for SipPlanInformation and cannot be null");
            }
            this.DividendType = dividendType;
            this.Amc = amc;
            this.Registrar = registrar;
            this.FolioNumber = folioNumber;
            this.Nav = nav;
            this.CreationDate = creationDate;
        }

        /// <summary>
        /// Gets or Sets Amc
        /// </summary>
        [DataMember(Name = "amc", EmitDefaultValue = false)]
        public string Amc { get; set; }

        /// <summary>
        /// Gets or Sets Registrar
        /// </summary>
        [DataMember(Name = "registrar", EmitDefaultValue = false)]
        public string Registrar { get; set; }

        /// <summary>
        /// Gets or Sets Scheme
        /// </summary>
        [DataMember(Name = "scheme", IsRequired = true, EmitDefaultValue = true)]
        public string Scheme { get; set; }

        /// <summary>
        /// Gets or Sets Isin
        /// </summary>
        [DataMember(Name = "isin", IsRequired = true, EmitDefaultValue = true)]
        public string Isin { get; set; }

        /// <summary>
        /// Gets or Sets FolioNumber
        /// </summary>
        [DataMember(Name = "folio_number", EmitDefaultValue = false)]
        public string FolioNumber { get; set; }

        /// <summary>
        /// Gets or Sets Nav
        /// </summary>
        [DataMember(Name = "nav", EmitDefaultValue = false)]
        public string Nav { get; set; }

        /// <summary>
        /// Gets or Sets DividendType
        /// </summary>
        [DataMember(Name = "dividend_type", IsRequired = true, EmitDefaultValue = true)]
        public string DividendType { get; set; }

        /// <summary>
        /// Gets or Sets CreationDate
        /// </summary>
        [DataMember(Name = "creation_date", EmitDefaultValue = false)]
        public DateTime CreationDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SipPlanInformation {\n");
            sb.Append("  Amc: ").Append(Amc).Append("\n");
            sb.Append("  Registrar: ").Append(Registrar).Append("\n");
            sb.Append("  Scheme: ").Append(Scheme).Append("\n");
            sb.Append("  Isin: ").Append(Isin).Append("\n");
            sb.Append("  FolioNumber: ").Append(FolioNumber).Append("\n");
            sb.Append("  Nav: ").Append(Nav).Append("\n");
            sb.Append("  DividendType: ").Append(DividendType).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SipPlanInformation);
        }

        /// <summary>
        /// Returns true if SipPlanInformation instances are equal
        /// </summary>
        /// <param name="input">Instance of SipPlanInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SipPlanInformation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Amc == input.Amc ||
                    (this.Amc != null &&
                    this.Amc.Equals(input.Amc))
                ) && 
                (
                    this.Registrar == input.Registrar ||
                    (this.Registrar != null &&
                    this.Registrar.Equals(input.Registrar))
                ) && 
                (
                    this.Scheme == input.Scheme ||
                    (this.Scheme != null &&
                    this.Scheme.Equals(input.Scheme))
                ) && 
                (
                    this.Isin == input.Isin ||
                    (this.Isin != null &&
                    this.Isin.Equals(input.Isin))
                ) && 
                (
                    this.FolioNumber == input.FolioNumber ||
                    (this.FolioNumber != null &&
                    this.FolioNumber.Equals(input.FolioNumber))
                ) && 
                (
                    this.Nav == input.Nav ||
                    (this.Nav != null &&
                    this.Nav.Equals(input.Nav))
                ) && 
                (
                    this.DividendType == input.DividendType ||
                    (this.DividendType != null &&
                    this.DividendType.Equals(input.DividendType))
                ) && 
                (
                    this.CreationDate == input.CreationDate ||
                    (this.CreationDate != null &&
                    this.CreationDate.Equals(input.CreationDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amc != null)
                {
                    hashCode = (hashCode * 59) + this.Amc.GetHashCode();
                }
                if (this.Registrar != null)
                {
                    hashCode = (hashCode * 59) + this.Registrar.GetHashCode();
                }
                if (this.Scheme != null)
                {
                    hashCode = (hashCode * 59) + this.Scheme.GetHashCode();
                }
                if (this.Isin != null)
                {
                    hashCode = (hashCode * 59) + this.Isin.GetHashCode();
                }
                if (this.FolioNumber != null)
                {
                    hashCode = (hashCode * 59) + this.FolioNumber.GetHashCode();
                }
                if (this.Nav != null)
                {
                    hashCode = (hashCode * 59) + this.Nav.GetHashCode();
                }
                if (this.DividendType != null)
                {
                    hashCode = (hashCode * 59) + this.DividendType.GetHashCode();
                }
                if (this.CreationDate != null)
                {
                    hashCode = (hashCode * 59) + this.CreationDate.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
