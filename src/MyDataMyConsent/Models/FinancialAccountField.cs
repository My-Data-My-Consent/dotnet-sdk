/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = MyDataMyConsent.Client.OpenAPIDateConverter;

namespace MyDataMyConsent.Models
{
    /// <summary>
    /// FinancialAccountField : Financial account field of consent request template.
    /// </summary>
    [DataContract(Name = "FinancialAccountField")]
    public partial class FinancialAccountField : IEquatable<FinancialAccountField>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FinancialAccountField" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FinancialAccountField() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FinancialAccountField" /> class.
        /// </summary>
        /// <param name="fieldTitle">Field title. (required).</param>
        /// <param name="fieldSlug">Field slug. (required).</param>
        /// <param name="accountTypes">Selected financial account types. (required).</param>
        public FinancialAccountField(string fieldTitle = default(string), string fieldSlug = default(string), List<SelectedFinancialAccountType> accountTypes = default(List<SelectedFinancialAccountType>))
        {
            // to ensure "fieldTitle" is required (not null)
            if (fieldTitle == null)
            {
                throw new ArgumentNullException("fieldTitle is a required property for FinancialAccountField and cannot be null");
            }
            this.FieldTitle = fieldTitle;
            // to ensure "fieldSlug" is required (not null)
            if (fieldSlug == null)
            {
                throw new ArgumentNullException("fieldSlug is a required property for FinancialAccountField and cannot be null");
            }
            this.FieldSlug = fieldSlug;
            // to ensure "accountTypes" is required (not null)
            if (accountTypes == null)
            {
                throw new ArgumentNullException("accountTypes is a required property for FinancialAccountField and cannot be null");
            }
            this.AccountTypes = accountTypes;
        }

        /// <summary>
        /// Field title.
        /// </summary>
        /// <value>Field title.</value>
        [DataMember(Name = "fieldTitle", IsRequired = true, EmitDefaultValue = true)]
        public string FieldTitle { get; set; }

        /// <summary>
        /// Field slug.
        /// </summary>
        /// <value>Field slug.</value>
        [DataMember(Name = "fieldSlug", IsRequired = true, EmitDefaultValue = true)]
        public string FieldSlug { get; set; }

        /// <summary>
        /// Selected financial account types.
        /// </summary>
        /// <value>Selected financial account types.</value>
        [DataMember(Name = "accountTypes", IsRequired = true, EmitDefaultValue = true)]
        public List<SelectedFinancialAccountType> AccountTypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FinancialAccountField {\n");
            sb.Append("  FieldTitle: ").Append(FieldTitle).Append("\n");
            sb.Append("  FieldSlug: ").Append(FieldSlug).Append("\n");
            sb.Append("  AccountTypes: ").Append(AccountTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FinancialAccountField);
        }

        /// <summary>
        /// Returns true if FinancialAccountField instances are equal
        /// </summary>
        /// <param name="input">Instance of FinancialAccountField to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FinancialAccountField input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FieldTitle == input.FieldTitle ||
                    (this.FieldTitle != null &&
                    this.FieldTitle.Equals(input.FieldTitle))
                ) && 
                (
                    this.FieldSlug == input.FieldSlug ||
                    (this.FieldSlug != null &&
                    this.FieldSlug.Equals(input.FieldSlug))
                ) && 
                (
                    this.AccountTypes == input.AccountTypes ||
                    this.AccountTypes != null &&
                    input.AccountTypes != null &&
                    this.AccountTypes.SequenceEqual(input.AccountTypes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FieldTitle != null)
                {
                    hashCode = (hashCode * 59) + this.FieldTitle.GetHashCode();
                }
                if (this.FieldSlug != null)
                {
                    hashCode = (hashCode * 59) + this.FieldSlug.GetHashCode();
                }
                if (this.AccountTypes != null)
                {
                    hashCode = (hashCode * 59) + this.AccountTypes.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
