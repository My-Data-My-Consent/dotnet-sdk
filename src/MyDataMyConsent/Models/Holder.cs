/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = MyDataMyConsent.Client.OpenAPIDateConverter;

namespace MyDataMyConsent.Models
{
    /// <summary>
    /// Holder
    /// </summary>
    [DataContract(Name = "Holder")]
    public partial class Holder : IEquatable<Holder>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Holder" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Holder() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Holder" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="dateOfBirth">dateOfBirth.</param>
        /// <param name="mobile">mobile.</param>
        /// <param name="dematId">dematId (required).</param>
        /// <param name="email">email (required).</param>
        /// <param name="pan">pan.</param>
        public Holder(string name = default(string), DateTime dateOfBirth = default(DateTime), string mobile = default(string), string dematId = default(string), string email = default(string), string pan = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Holder and cannot be null");
            }
            this.Name = name;
            // to ensure "dematId" is required (not null)
            if (dematId == null)
            {
                throw new ArgumentNullException("dematId is a required property for Holder and cannot be null");
            }
            this.DematId = dematId;
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new ArgumentNullException("email is a required property for Holder and cannot be null");
            }
            this.Email = email;
            this.DateOfBirth = dateOfBirth;
            this.Mobile = mobile;
            this.Pan = pan;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets DateOfBirth
        /// </summary>
        [DataMember(Name = "date_of_birth", EmitDefaultValue = false)]
        public DateTime DateOfBirth { get; set; }

        /// <summary>
        /// Gets or Sets Mobile
        /// </summary>
        [DataMember(Name = "mobile", EmitDefaultValue = false)]
        public string Mobile { get; set; }

        /// <summary>
        /// Gets or Sets DematId
        /// </summary>
        [DataMember(Name = "demat_id", IsRequired = true, EmitDefaultValue = true)]
        public string DematId { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "email", IsRequired = true, EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets Pan
        /// </summary>
        [DataMember(Name = "pan", EmitDefaultValue = false)]
        public string Pan { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Holder {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DateOfBirth: ").Append(DateOfBirth).Append("\n");
            sb.Append("  Mobile: ").Append(Mobile).Append("\n");
            sb.Append("  DematId: ").Append(DematId).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Pan: ").Append(Pan).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Holder);
        }

        /// <summary>
        /// Returns true if Holder instances are equal
        /// </summary>
        /// <param name="input">Instance of Holder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Holder input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.DateOfBirth == input.DateOfBirth ||
                    (this.DateOfBirth != null &&
                    this.DateOfBirth.Equals(input.DateOfBirth))
                ) && 
                (
                    this.Mobile == input.Mobile ||
                    (this.Mobile != null &&
                    this.Mobile.Equals(input.Mobile))
                ) && 
                (
                    this.DematId == input.DematId ||
                    (this.DematId != null &&
                    this.DematId.Equals(input.DematId))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Pan == input.Pan ||
                    (this.Pan != null &&
                    this.Pan.Equals(input.Pan))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.DateOfBirth != null)
                {
                    hashCode = (hashCode * 59) + this.DateOfBirth.GetHashCode();
                }
                if (this.Mobile != null)
                {
                    hashCode = (hashCode * 59) + this.Mobile.GetHashCode();
                }
                if (this.DematId != null)
                {
                    hashCode = (hashCode * 59) + this.DematId.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.Pan != null)
                {
                    hashCode = (hashCode * 59) + this.Pan.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
