/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = MyDataMyConsent.Client.OpenAPIDateConverter;

namespace MyDataMyConsent.Models
{
    /// <summary>
    /// FinancialAccountCreditCardTransaction
    /// </summary>
    [DataContract(Name = "FinancialAccountCreditCardTransaction")]
    public partial class FinancialAccountCreditCardTransaction : IEquatable<FinancialAccountCreditCardTransaction>
    {

        /// <summary>
        /// Gets or Sets TxnType
        /// </summary>
        [DataMember(Name = "txn_type", IsRequired = true, EmitDefaultValue = true)]
        public CreditCardTransactionType TxnType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FinancialAccountCreditCardTransaction" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FinancialAccountCreditCardTransaction() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FinancialAccountCreditCardTransaction" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="id">id (required).</param>
        /// <param name="txnType">txnType (required).</param>
        /// <param name="txnDate">txnDate (required).</param>
        /// <param name="amount">amount (required).</param>
        /// <param name="valueDate">valueDate (required).</param>
        /// <param name="narration">narration (required).</param>
        /// <param name="statementDate">statementDate (required).</param>
        /// <param name="mcc">mcc (required).</param>
        /// <param name="maskedCardNumber">maskedCardNumber (required).</param>
        public FinancialAccountCreditCardTransaction(string type = default(string), string id = default(string), CreditCardTransactionType txnType = default(CreditCardTransactionType), DateTime txnDate = default(DateTime), float amount = default(float), DateTime valueDate = default(DateTime), string narration = default(string), DateTime statementDate = default(DateTime), string mcc = default(string), string maskedCardNumber = default(string))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for FinancialAccountCreditCardTransaction and cannot be null");
            }
            this.Type = type;
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for FinancialAccountCreditCardTransaction and cannot be null");
            }
            this.Id = id;
            this.TxnType = txnType;
            this.TxnDate = txnDate;
            this.Amount = amount;
            this.ValueDate = valueDate;
            // to ensure "narration" is required (not null)
            if (narration == null)
            {
                throw new ArgumentNullException("narration is a required property for FinancialAccountCreditCardTransaction and cannot be null");
            }
            this.Narration = narration;
            this.StatementDate = statementDate;
            // to ensure "mcc" is required (not null)
            if (mcc == null)
            {
                throw new ArgumentNullException("mcc is a required property for FinancialAccountCreditCardTransaction and cannot be null");
            }
            this.Mcc = mcc;
            // to ensure "maskedCardNumber" is required (not null)
            if (maskedCardNumber == null)
            {
                throw new ArgumentNullException("maskedCardNumber is a required property for FinancialAccountCreditCardTransaction and cannot be null");
            }
            this.MaskedCardNumber = maskedCardNumber;
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets TxnDate
        /// </summary>
        [DataMember(Name = "txn_date", IsRequired = true, EmitDefaultValue = true)]
        public DateTime TxnDate { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        public float Amount { get; set; }

        /// <summary>
        /// Gets or Sets ValueDate
        /// </summary>
        [DataMember(Name = "value_date", IsRequired = true, EmitDefaultValue = true)]
        public DateTime ValueDate { get; set; }

        /// <summary>
        /// Gets or Sets Narration
        /// </summary>
        [DataMember(Name = "narration", IsRequired = true, EmitDefaultValue = true)]
        public string Narration { get; set; }

        /// <summary>
        /// Gets or Sets StatementDate
        /// </summary>
        [DataMember(Name = "statement_date", IsRequired = true, EmitDefaultValue = true)]
        public DateTime StatementDate { get; set; }

        /// <summary>
        /// Gets or Sets Mcc
        /// </summary>
        [DataMember(Name = "mcc", IsRequired = true, EmitDefaultValue = true)]
        public string Mcc { get; set; }

        /// <summary>
        /// Gets or Sets MaskedCardNumber
        /// </summary>
        [DataMember(Name = "masked_card_number", IsRequired = true, EmitDefaultValue = true)]
        public string MaskedCardNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FinancialAccountCreditCardTransaction {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TxnType: ").Append(TxnType).Append("\n");
            sb.Append("  TxnDate: ").Append(TxnDate).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  ValueDate: ").Append(ValueDate).Append("\n");
            sb.Append("  Narration: ").Append(Narration).Append("\n");
            sb.Append("  StatementDate: ").Append(StatementDate).Append("\n");
            sb.Append("  Mcc: ").Append(Mcc).Append("\n");
            sb.Append("  MaskedCardNumber: ").Append(MaskedCardNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FinancialAccountCreditCardTransaction);
        }

        /// <summary>
        /// Returns true if FinancialAccountCreditCardTransaction instances are equal
        /// </summary>
        /// <param name="input">Instance of FinancialAccountCreditCardTransaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FinancialAccountCreditCardTransaction input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.TxnType == input.TxnType ||
                    this.TxnType.Equals(input.TxnType)
                ) && 
                (
                    this.TxnDate == input.TxnDate ||
                    (this.TxnDate != null &&
                    this.TxnDate.Equals(input.TxnDate))
                ) && 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.ValueDate == input.ValueDate ||
                    (this.ValueDate != null &&
                    this.ValueDate.Equals(input.ValueDate))
                ) && 
                (
                    this.Narration == input.Narration ||
                    (this.Narration != null &&
                    this.Narration.Equals(input.Narration))
                ) && 
                (
                    this.StatementDate == input.StatementDate ||
                    (this.StatementDate != null &&
                    this.StatementDate.Equals(input.StatementDate))
                ) && 
                (
                    this.Mcc == input.Mcc ||
                    (this.Mcc != null &&
                    this.Mcc.Equals(input.Mcc))
                ) && 
                (
                    this.MaskedCardNumber == input.MaskedCardNumber ||
                    (this.MaskedCardNumber != null &&
                    this.MaskedCardNumber.Equals(input.MaskedCardNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TxnType.GetHashCode();
                if (this.TxnDate != null)
                {
                    hashCode = (hashCode * 59) + this.TxnDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                if (this.ValueDate != null)
                {
                    hashCode = (hashCode * 59) + this.ValueDate.GetHashCode();
                }
                if (this.Narration != null)
                {
                    hashCode = (hashCode * 59) + this.Narration.GetHashCode();
                }
                if (this.StatementDate != null)
                {
                    hashCode = (hashCode * 59) + this.StatementDate.GetHashCode();
                }
                if (this.Mcc != null)
                {
                    hashCode = (hashCode * 59) + this.Mcc.GetHashCode();
                }
                if (this.MaskedCardNumber != null)
                {
                    hashCode = (hashCode * 59) + this.MaskedCardNumber.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
