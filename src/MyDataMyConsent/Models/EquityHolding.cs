/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = MyDataMyConsent.Client.OpenAPIDateConverter;

namespace MyDataMyConsent.Models
{
    /// <summary>
    /// EquityHolding
    /// </summary>
    [DataContract(Name = "EquityHolding")]
    public partial class EquityHolding : IEquatable<EquityHolding>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EquityHolding" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EquityHolding() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EquityHolding" /> class.
        /// </summary>
        /// <param name="issuerName">issuerName (required).</param>
        /// <param name="exchange">exchange (required).</param>
        /// <param name="isin">isin (required).</param>
        /// <param name="units">units (required).</param>
        /// <param name="investmentDateTime">investmentDateTime.</param>
        /// <param name="rate">rate.</param>
        /// <param name="lastTradedPrice">lastTradedPrice.</param>
        /// <param name="description">description.</param>
        public EquityHolding(string issuerName = default(string), string exchange = default(string), string isin = default(string), long units = default(long), DateTime investmentDateTime = default(DateTime), string rate = default(string), string lastTradedPrice = default(string), string description = default(string))
        {
            // to ensure "issuerName" is required (not null)
            if (issuerName == null)
            {
                throw new ArgumentNullException("issuerName is a required property for EquityHolding and cannot be null");
            }
            this.IssuerName = issuerName;
            // to ensure "exchange" is required (not null)
            if (exchange == null)
            {
                throw new ArgumentNullException("exchange is a required property for EquityHolding and cannot be null");
            }
            this.Exchange = exchange;
            // to ensure "isin" is required (not null)
            if (isin == null)
            {
                throw new ArgumentNullException("isin is a required property for EquityHolding and cannot be null");
            }
            this.Isin = isin;
            this.Units = units;
            this.InvestmentDateTime = investmentDateTime;
            this.Rate = rate;
            this.LastTradedPrice = lastTradedPrice;
            this.Description = description;
        }

        /// <summary>
        /// Gets or Sets IssuerName
        /// </summary>
        [DataMember(Name = "issuerName", IsRequired = true, EmitDefaultValue = true)]
        public string IssuerName { get; set; }

        /// <summary>
        /// Gets or Sets Exchange
        /// </summary>
        [DataMember(Name = "exchange", IsRequired = true, EmitDefaultValue = true)]
        public string Exchange { get; set; }

        /// <summary>
        /// Gets or Sets Isin
        /// </summary>
        [DataMember(Name = "isin", IsRequired = true, EmitDefaultValue = true)]
        public string Isin { get; set; }

        /// <summary>
        /// Gets or Sets Units
        /// </summary>
        [DataMember(Name = "units", IsRequired = true, EmitDefaultValue = true)]
        public long Units { get; set; }

        /// <summary>
        /// Gets or Sets InvestmentDateTime
        /// </summary>
        [DataMember(Name = "investmentDateTime", EmitDefaultValue = false)]
        public DateTime InvestmentDateTime { get; set; }

        /// <summary>
        /// Gets or Sets Rate
        /// </summary>
        [DataMember(Name = "rate", EmitDefaultValue = false)]
        public string Rate { get; set; }

        /// <summary>
        /// Gets or Sets LastTradedPrice
        /// </summary>
        [DataMember(Name = "lastTradedPrice", EmitDefaultValue = false)]
        public string LastTradedPrice { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EquityHolding {\n");
            sb.Append("  IssuerName: ").Append(IssuerName).Append("\n");
            sb.Append("  Exchange: ").Append(Exchange).Append("\n");
            sb.Append("  Isin: ").Append(Isin).Append("\n");
            sb.Append("  Units: ").Append(Units).Append("\n");
            sb.Append("  InvestmentDateTime: ").Append(InvestmentDateTime).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  LastTradedPrice: ").Append(LastTradedPrice).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EquityHolding);
        }

        /// <summary>
        /// Returns true if EquityHolding instances are equal
        /// </summary>
        /// <param name="input">Instance of EquityHolding to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EquityHolding input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IssuerName == input.IssuerName ||
                    (this.IssuerName != null &&
                    this.IssuerName.Equals(input.IssuerName))
                ) && 
                (
                    this.Exchange == input.Exchange ||
                    (this.Exchange != null &&
                    this.Exchange.Equals(input.Exchange))
                ) && 
                (
                    this.Isin == input.Isin ||
                    (this.Isin != null &&
                    this.Isin.Equals(input.Isin))
                ) && 
                (
                    this.Units == input.Units ||
                    this.Units.Equals(input.Units)
                ) && 
                (
                    this.InvestmentDateTime == input.InvestmentDateTime ||
                    (this.InvestmentDateTime != null &&
                    this.InvestmentDateTime.Equals(input.InvestmentDateTime))
                ) && 
                (
                    this.Rate == input.Rate ||
                    (this.Rate != null &&
                    this.Rate.Equals(input.Rate))
                ) && 
                (
                    this.LastTradedPrice == input.LastTradedPrice ||
                    (this.LastTradedPrice != null &&
                    this.LastTradedPrice.Equals(input.LastTradedPrice))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IssuerName != null)
                {
                    hashCode = (hashCode * 59) + this.IssuerName.GetHashCode();
                }
                if (this.Exchange != null)
                {
                    hashCode = (hashCode * 59) + this.Exchange.GetHashCode();
                }
                if (this.Isin != null)
                {
                    hashCode = (hashCode * 59) + this.Isin.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Units.GetHashCode();
                if (this.InvestmentDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.InvestmentDateTime.GetHashCode();
                }
                if (this.Rate != null)
                {
                    hashCode = (hashCode * 59) + this.Rate.GetHashCode();
                }
                if (this.LastTradedPrice != null)
                {
                    hashCode = (hashCode * 59) + this.LastTradedPrice.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
