/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using MyDataMyConsent.Client;
using MyDataMyConsent.Api;
// uncomment below to import models
//using MyDataMyConsent.Models;

namespace MyDataMyConsent.Test.Api
{
    /// <summary>
    ///  Class for testing DataProcessingAgreementsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DataProcessingAgreementsApiTests : IDisposable
    {
        private DataProcessingAgreementsApi instance;

        public DataProcessingAgreementsApiTests()
        {
            instance = new DataProcessingAgreementsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of DataProcessingAgreementsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' DataProcessingAgreementsApi
            //Assert.IsType<DataProcessingAgreementsApi>(instance);
        }

        /// <summary>
        /// Test CreateDataProcessingAgreement
        /// </summary>
        [Fact]
        public void CreateDataProcessingAgreementTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateDataProcessingAgreement createDataProcessingAgreement = null;
            //var response = instance.CreateDataProcessingAgreement(createDataProcessingAgreement);
            //Assert.IsType<DataProcessingAgreement>(response);
        }

        /// <summary>
        /// Test DeleteDataProcessingAgreementById
        /// </summary>
        [Fact]
        public void DeleteDataProcessingAgreementByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //instance.DeleteDataProcessingAgreementById(id);
        }

        /// <summary>
        /// Test GetDataProcessingAgreementById
        /// </summary>
        [Fact]
        public void GetDataProcessingAgreementByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.GetDataProcessingAgreementById(id);
            //Assert.IsType<DataProcessingAgreement>(response);
        }

        /// <summary>
        /// Test GetDataProcessingAgreements
        /// </summary>
        [Fact]
        public void GetDataProcessingAgreementsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? pageNo = null;
            //int? pageSize = null;
            //var response = instance.GetDataProcessingAgreements(pageNo, pageSize);
            //Assert.IsType<DataProcessingAgreementPaginatedList>(response);
        }

        /// <summary>
        /// Test TerminateDataProcessingAgreementById
        /// </summary>
        [Fact]
        public void TerminateDataProcessingAgreementByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //instance.TerminateDataProcessingAgreementById(id);
        }

        /// <summary>
        /// Test UpdateDataProcessingAgreement
        /// </summary>
        [Fact]
        public void UpdateDataProcessingAgreementTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //UpdateDataProcessingAgreement updateDataProcessingAgreement = null;
            //var response = instance.UpdateDataProcessingAgreement(id, updateDataProcessingAgreement);
            //Assert.IsType<DataProcessingAgreement>(response);
        }
    }
}
