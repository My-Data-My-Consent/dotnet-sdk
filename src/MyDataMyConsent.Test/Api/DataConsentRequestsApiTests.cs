/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using MyDataMyConsent.Client;
using MyDataMyConsent.Api;
// uncomment below to import models
//using MyDataMyConsent.Models;

namespace MyDataMyConsent.Test.Api
{
    /// <summary>
    ///  Class for testing DataConsentRequestsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DataConsentRequestsApiTests : IDisposable
    {
        private DataConsentRequestsApi instance;

        public DataConsentRequestsApiTests()
        {
            instance = new DataConsentRequestsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of DataConsentRequestsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' DataConsentRequestsApi
            //Assert.IsType<DataConsentRequestsApi>(instance);
        }

        /// <summary>
        /// Test CancelIndividualDataConsentRequest
        /// </summary>
        [Fact]
        public void CancelIndividualDataConsentRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid requestId = null;
            //instance.CancelIndividualDataConsentRequest(requestId);
        }

        /// <summary>
        /// Test CancelOrganizationDataConsentRequest
        /// </summary>
        [Fact]
        public void CancelOrganizationDataConsentRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid requestId = null;
            //instance.CancelOrganizationDataConsentRequest(requestId);
        }

        /// <summary>
        /// Test CreateIndividualDataConsentRequest
        /// </summary>
        [Fact]
        public void CreateIndividualDataConsentRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateDataConsentRequest createDataConsentRequest = null;
            //var response = instance.CreateIndividualDataConsentRequest(createDataConsentRequest);
            //Assert.IsType<IndividualDataConsentRequestDetails>(response);
        }

        /// <summary>
        /// Test CreateOrganizationDataConsentRequest
        /// </summary>
        [Fact]
        public void CreateOrganizationDataConsentRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateDataConsentRequest createDataConsentRequest = null;
            //var response = instance.CreateOrganizationDataConsentRequest(createDataConsentRequest);
            //Assert.IsType<OrganizationDataConsentRequestDetails>(response);
        }

        /// <summary>
        /// Test GetAllConsentRequestsToIndividuals
        /// </summary>
        [Fact]
        public void GetAllConsentRequestsToIndividualsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DataConsentStatus? status = null;
            //DateTime? startDateTime = null;
            //DateTime? endDateTime = null;
            //int? pageNo = null;
            //int? pageSize = null;
            //var response = instance.GetAllConsentRequestsToIndividuals(status, startDateTime, endDateTime, pageNo, pageSize);
            //Assert.IsType<IndividualDataConsentRequestDetailsPaginatedList>(response);
        }

        /// <summary>
        /// Test GetAllConsentRequestsToOrganizations
        /// </summary>
        [Fact]
        public void GetAllConsentRequestsToOrganizationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DataConsentStatus? status = null;
            //DateTime? startDateTime = null;
            //DateTime? endDateTime = null;
            //int? pageNo = null;
            //int? pageSize = null;
            //var response = instance.GetAllConsentRequestsToOrganizations(status, startDateTime, endDateTime, pageNo, pageSize);
            //Assert.IsType<OrganizationDataConsentRequestDetailsPaginatedList>(response);
        }

        /// <summary>
        /// Test GetIndividualConsentRequestById
        /// </summary>
        [Fact]
        public void GetIndividualConsentRequestByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid requestId = null;
            //var response = instance.GetIndividualConsentRequestById(requestId);
            //Assert.IsType<DataConsentRequest>(response);
        }

        /// <summary>
        /// Test GetOrganizationConsentRequestById
        /// </summary>
        [Fact]
        public void GetOrganizationConsentRequestByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid requestId = null;
            //var response = instance.GetOrganizationConsentRequestById(requestId);
            //Assert.IsType<DataConsentRequest>(response);
        }
    }
}
