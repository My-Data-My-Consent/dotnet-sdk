/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@mydatamyconsent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using MyDataMyConsent.Client;
using MyDataMyConsent.Api;
// uncomment below to import models
//using MyDataMyConsent.Models;

namespace MyDataMyConsent.Test.Api
{
    /// <summary>
    ///  Class for testing IndividualsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class IndividualsApiTests : IDisposable
    {
        private IndividualsApi instance;

        public IndividualsApiTests()
        {
            instance = new IndividualsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of IndividualsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' IndividualsApi
            //Assert.IsType<IndividualsApi>(instance);
        }

        /// <summary>
        /// Test IssuerIssuedoc1XmlPost
        /// </summary>
        [Fact]
        public void IssuerIssuedoc1XmlPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PushUriRequest pushUriRequest = null;
            //var response = instance.IssuerIssuedoc1XmlPost(pushUriRequest);
            //Assert.IsType<PushUriResponse>(response);
        }

        /// <summary>
        /// Test V1IndividualsConsentRequestsGet
        /// </summary>
        [Fact]
        public void V1IndividualsConsentRequestsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DataConsentStatus? status = null;
            //DateTime? fromDateTime = null;
            //DateTime? toDateTime = null;
            //int? pageNo = null;
            //int? pageSize = null;
            //var response = instance.V1IndividualsConsentRequestsGet(status, fromDateTime, toDateTime, pageNo, pageSize);
            //Assert.IsType<PaginatedListOfIndividualConsentRequestDetailss>(response);
        }

        /// <summary>
        /// Test V1IndividualsConsentRequestsPost
        /// </summary>
        [Fact]
        public void V1IndividualsConsentRequestsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateConsentRequest createConsentRequest = null;
            //var response = instance.V1IndividualsConsentRequestsPost(createConsentRequest);
            //Assert.IsType<IndividualConsentRequestDetails>(response);
        }

        /// <summary>
        /// Test V1IndividualsConsentRequestsRequestIdCancelPut
        /// </summary>
        [Fact]
        public void V1IndividualsConsentRequestsRequestIdCancelPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string requestId = null;
            //var response = instance.V1IndividualsConsentRequestsRequestIdCancelPut(requestId);
            //Assert.IsType<bool>(response);
        }

        /// <summary>
        /// Test V1IndividualsConsentRequestsRequestIdGet
        /// </summary>
        [Fact]
        public void V1IndividualsConsentRequestsRequestIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string requestId = null;
            //var response = instance.V1IndividualsConsentRequestsRequestIdGet(requestId);
            //Assert.IsType<ConsentRequest>(response);
        }

        /// <summary>
        /// Test V1IndividualsConsentTemplatesGet
        /// </summary>
        [Fact]
        public void V1IndividualsConsentTemplatesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? pageNo = null;
            //int? pageSize = null;
            //var response = instance.V1IndividualsConsentTemplatesGet(pageNo, pageSize);
            //Assert.IsType<PaginatedListOfConsentRequestTemplates>(response);
        }

        /// <summary>
        /// Test V1IndividualsConsentTemplatesTemplateIdGet
        /// </summary>
        [Fact]
        public void V1IndividualsConsentTemplatesTemplateIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string templateId = null;
            //var response = instance.V1IndividualsConsentTemplatesTemplateIdGet(templateId);
            //Assert.IsType<IndividualConsentRequestTemplateDetails>(response);
        }

        /// <summary>
        /// Test V1IndividualsConsentsConsentIdDocumentsDocumentIdDownloadGet
        /// </summary>
        [Fact]
        public void V1IndividualsConsentsConsentIdDocumentsDocumentIdDownloadGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string consentId = null;
            //string documentId = null;
            //var response = instance.V1IndividualsConsentsConsentIdDocumentsDocumentIdDownloadGet(consentId, documentId);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test V1IndividualsConsentsConsentIdDocumentsDocumentIdGet
        /// </summary>
        [Fact]
        public void V1IndividualsConsentsConsentIdDocumentsDocumentIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string consentId = null;
            //string documentId = null;
            //var response = instance.V1IndividualsConsentsConsentIdDocumentsDocumentIdGet(consentId, documentId);
            //Assert.IsType<ConsentedDocument>(response);
        }

        /// <summary>
        /// Test V1IndividualsConsentsConsentIdDocumentsGet
        /// </summary>
        [Fact]
        public void V1IndividualsConsentsConsentIdDocumentsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string consentId = null;
            //var response = instance.V1IndividualsConsentsConsentIdDocumentsGet(consentId);
            //Assert.IsType<List<ConsentedDocument>>(response);
        }

        /// <summary>
        /// Test V1IndividualsConsentsConsentIdFinancialAccountsAccountIdGet
        /// </summary>
        [Fact]
        public void V1IndividualsConsentsConsentIdFinancialAccountsAccountIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string consentId = null;
            //string accountId = null;
            //var response = instance.V1IndividualsConsentsConsentIdFinancialAccountsAccountIdGet(consentId, accountId);
            //Assert.IsType<FinancialAccount>(response);
        }

        /// <summary>
        /// Test V1IndividualsConsentsConsentIdFinancialAccountsAccountIdTransactionsGet
        /// </summary>
        [Fact]
        public void V1IndividualsConsentsConsentIdFinancialAccountsAccountIdTransactionsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string consentId = null;
            //string accountId = null;
            //string? filters = null;
            //string? fromDateTime = null;
            //string? toDateTime = null;
            //int? pageNo = null;
            //int? pageSize = null;
            //var response = instance.V1IndividualsConsentsConsentIdFinancialAccountsAccountIdTransactionsGet(consentId, accountId, filters, fromDateTime, toDateTime, pageNo, pageSize);
            //Assert.IsType<PaginatedListOfFinancialAccountTransactions>(response);
        }

        /// <summary>
        /// Test V1IndividualsConsentsConsentIdFinancialAccountsGet
        /// </summary>
        [Fact]
        public void V1IndividualsConsentsConsentIdFinancialAccountsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string consentId = null;
            //var response = instance.V1IndividualsConsentsConsentIdFinancialAccountsGet(consentId);
            //Assert.IsType<List<FinancialAccount>>(response);
        }

        /// <summary>
        /// Test V1IndividualsConsentsConsentIdGet
        /// </summary>
        [Fact]
        public void V1IndividualsConsentsConsentIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string consentId = null;
            //var response = instance.V1IndividualsConsentsConsentIdGet(consentId);
            //Assert.IsType<ConsentDetails>(response);
        }

        /// <summary>
        /// Test V1IndividualsConsentsConsentIdHealthFhirBundleGet
        /// </summary>
        [Fact]
        public void V1IndividualsConsentsConsentIdHealthFhirBundleGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string consentId = null;
            //var response = instance.V1IndividualsConsentsConsentIdHealthFhirBundleGet(consentId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test V1IndividualsConsentsGet
        /// </summary>
        [Fact]
        public void V1IndividualsConsentsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DataConsentStatus? status = null;
            //DateTime? fromDateTime = null;
            //DateTime? toDateTime = null;
            //int? pageNo = null;
            //int? pageSize = null;
            //var response = instance.V1IndividualsConsentsGet(status, fromDateTime, toDateTime, pageNo, pageSize);
            //Assert.IsType<PaginatedListOfConsents>(response);
        }

        /// <summary>
        /// Test V1IndividualsDocumentsIssueIssueRequestIdUploadPost
        /// </summary>
        [Fact]
        public void V1IndividualsDocumentsIssueIssueRequestIdUploadPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string issueRequestId = null;
            //System.IO.Stream file = null;
            //var response = instance.V1IndividualsDocumentsIssueIssueRequestIdUploadPost(issueRequestId, file);
            //Assert.IsType<UploadDocumentResponse>(response);
        }

        /// <summary>
        /// Test V1IndividualsDocumentsIssuePost
        /// </summary>
        [Fact]
        public void V1IndividualsDocumentsIssuePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DocumentIssueRequest documentIssueRequest = null;
            //var response = instance.V1IndividualsDocumentsIssuePost(documentIssueRequest);
            //Assert.IsType<DocumentIssueRequestDetails>(response);
        }

        /// <summary>
        /// Test V1IndividualsDocumentsIssuedDocumentIdGet
        /// </summary>
        [Fact]
        public void V1IndividualsDocumentsIssuedDocumentIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string documentId = null;
            //var response = instance.V1IndividualsDocumentsIssuedDocumentIdGet(documentId);
            //Assert.IsType<IssuedDocument>(response);
        }

        /// <summary>
        /// Test V1IndividualsDocumentsIssuedGet
        /// </summary>
        [Fact]
        public void V1IndividualsDocumentsIssuedGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string documentTypeId = null;
            //DateTime? fromDateTime = null;
            //DateTime? toDateTime = null;
            //int? pageNo = null;
            //int? pageSize = null;
            //var response = instance.V1IndividualsDocumentsIssuedGet(documentTypeId, fromDateTime, toDateTime, pageNo, pageSize);
            //Assert.IsType<PaginatedListOfIssuedDocuments>(response);
        }

        /// <summary>
        /// Test V1IndividualsDocumentsTypesGet
        /// </summary>
        [Fact]
        public void V1IndividualsDocumentsTypesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? pageNo = null;
            //int? pageSize = null;
            //var response = instance.V1IndividualsDocumentsTypesGet(pageNo, pageSize);
            //Assert.IsType<PaginatedListOfDocumentTypes>(response);
        }
    }
}
